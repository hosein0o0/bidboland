[{"E:\\bidboland\\src\\index.js":"1","E:\\bidboland\\src\\App.js":"2","E:\\bidboland\\src\\reportWebVitals.js":"3","E:\\bidboland\\src\\rampco.js":"4","E:\\bidboland\\src\\staticData.js":"5","E:\\bidboland\\src\\PARS.js":"6","E:\\bidboland\\src\\bidboland.js":"7","E:\\bidboland\\src\\login\\Login.js":"8","E:\\bidboland\\src\\dashboard\\Dashboard.js":"9","E:\\bidboland\\src\\createUser\\IndexUserGroup.js":"10","E:\\bidboland\\src\\createUser\\CreateUser.js":"11","E:\\bidboland\\src\\404\\404.js":"12","E:\\bidboland\\src\\edit-profile\\EditProfile.js":"13","E:\\bidboland\\src\\list-user\\userlist.js":"14","E:\\bidboland\\src\\table\\table.js":"15","E:\\bidboland\\src\\gallery\\Create.js":"16","E:\\bidboland\\src\\gallery\\Gallery.js":"17","E:\\bidboland\\src\\gallery\\Edit.js":"18","E:\\bidboland\\src\\gallery\\archive.js":"19","E:\\bidboland\\src\\mre\\Mre.js":"20","E:\\bidboland\\src\\avl\\index-Avl.js":"21","E:\\bidboland\\src\\avl\\Avl.js":"22","E:\\bidboland\\src\\Meeting-management\\Create.js":"23","E:\\bidboland\\src\\Meeting-management\\second-section.js":"24","E:\\bidboland\\src\\Meeting-management\\third-section.js":"25","E:\\bidboland\\src\\Meeting-management\\index-metting.js":"26","E:\\bidboland\\src\\Meeting-management\\edit-second.js":"27","E:\\bidboland\\src\\Meeting-management\\edit-metting.js":"28","E:\\bidboland\\src\\library\\library.js":"29","E:\\bidboland\\src\\Meeting-management\\ViewProceedings.js":"30","E:\\bidboland\\src\\library\\dashboard.js":"31","E:\\bidboland\\src\\library\\index-library.js":"32","E:\\bidboland\\src\\library\\StandardRequest.js":"33","E:\\bidboland\\src\\daily-report\\Daily-report.js":"34","E:\\bidboland\\src\\contact\\index-contact.js":"35","E:\\bidboland\\src\\contact\\create.js":"36","E:\\bidboland\\src\\System-management\\SystemManagement.js":"37","E:\\bidboland\\src\\contact\\edit.js":"38","E:\\bidboland\\src\\RFQ\\order.js":"39","E:\\bidboland\\src\\RFQ\\uploadFile.js":"40","E:\\bidboland\\src\\RFQ\\CommentSheet.js":"41","E:\\bidboland\\src\\RFQ\\UploadDocuments.js":"42","E:\\bidboland\\src\\RFQ\\RFQ.js":"43","E:\\bidboland\\src\\notification\\index-Notification.js":"44","E:\\bidboland\\src\\index-builder\\IndexBuilder.js":"45","E:\\bidboland\\src\\index-builder\\DynamicIndex.js":"46","E:\\bidboland\\src\\FAQ\\FAQ.js":"47","E:\\bidboland\\src\\WBS\\ProjectIdentifyEdit.js":"48","E:\\bidboland\\src\\EngineeringManagement\\DCC.js":"49","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ShowTsr.js":"50","E:\\bidboland\\src\\WBS\\ProjectIdentifyForm.js":"51","E:\\bidboland\\src\\Project\\TQ\\TqForm.js":"52","E:\\bidboland\\src\\Project\\vendorTransmittal\\ShowTransmittal.js":"53","E:\\bidboland\\src\\Project\\TQ\\TqTable.js":"54","E:\\bidboland\\src\\Project\\vendorTransmittal\\Transmital.js":"55","E:\\bidboland\\src\\Project\\vendorTransmittal\\EditTransmittal.js":"56","E:\\bidboland\\src\\Project\\Mokatebat\\Mokatebat.js":"57","E:\\bidboland\\src\\Project\\Mokatebat\\Edit.js":"58","E:\\bidboland\\src\\Project\\Mokatebat\\MokatebatDisabled.js":"59","E:\\bidboland\\src\\Project\\TQ\\complete.js":"60","E:\\bidboland\\src\\Project\\Mokatebat\\index-Mokatebat.js":"61","E:\\bidboland\\src\\Project\\Engineering\\commodityEngineering.js":"62","E:\\bidboland\\src\\Project\\Engineering\\Endorsement.js":"63","E:\\bidboland\\src\\Project\\Engineering\\FieldEngineering.js":"64","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dcc.js":"65","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\ShowTransmittal.js":"66","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\Create-Transmital.js":"67","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\ShowTransmittal.js":"68","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\EditTransmittal.js":"69","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\Create-Transmital.js":"70","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\EditTransmittal.js":"71","E:\\bidboland\\src\\Project\\Engineering\\vendorDocument\\CreateVendor.js":"72","E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\index-reports.js":"73","E:\\bidboland\\src\\Project\\Engineering\\dcc\\DocumentControlCenter\\CreateMdl.js":"74","E:\\bidboland\\src\\Tools\\InternalPhonebook\\InternalPhonebook.js":"75","E:\\bidboland\\src\\Tools\\Calendar\\Calendar.js":"76","E:\\bidboland\\src\\Tools\\Chat\\Chat.js":"77","E:\\bidboland\\src\\Print\\NewTSR\\FORM.js":"78","E:\\bidboland\\src\\tsrNew\\tsr.js":"79","E:\\bidboland\\src\\tsrNew\\index\\BaseIndex.js":"80","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\dashboard.js":"81","E:\\bidboland\\src\\Chart\\Main.js":"82","E:\\bidboland\\src\\library\\CreatePublishers.js":"83","E:\\bidboland\\src\\Tools\\TaskManagement\\TaskManagement.js":"84","E:\\bidboland\\src\\Tools\\E-mail\\Email.js":"85","E:\\bidboland\\src\\Print\\ARP\\form.js":"86","E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\Edit.js":"87","E:\\bidboland\\src\\Print\\TSR\\form.js":"88","E:\\bidboland\\src\\createUser\\EditUserGroup\\index.js":"89","E:\\bidboland\\src\\createUser\\CreateUserGroup\\index.js":"90","E:\\bidboland\\src\\library\\IndexPublishers.js":"91","E:\\bidboland\\src\\tsrNew\\report\\index.js":"92","E:\\bidboland\\src\\library\\CreateWriters.js":"93","E:\\bidboland\\src\\library\\IndexWriters.js":"94","E:\\bidboland\\src\\table\\SearchTable.js":"95","E:\\bidboland\\src\\index-builder\\AdvanceSearchDate.js":"96","E:\\bidboland\\src\\notification\\Message.js":"97","E:\\bidboland\\src\\notification\\notification.js":"98","E:\\bidboland\\src\\handleString.js":"99","E:\\bidboland\\src\\index-builder\\TableDynamicIndex.js":"100","E:\\bidboland\\src\\index-builder\\RowDrag.js":"101","E:\\bidboland\\src\\notification\\tableNotification.js":"102","E:\\bidboland\\src\\index-builder\\ColumnDefinition.js":"103","E:\\bidboland\\src\\index-builder\\PositioningExcel.js":"104","E:\\bidboland\\src\\index-builder\\basicData.js":"105","E:\\bidboland\\src\\Tools\\InternalPhonebook\\TablePhonebook.js":"106","E:\\bidboland\\src\\Customization\\customization.js":"107","E:\\bidboland\\src\\handleCheckText.js":"108","E:\\bidboland\\src\\Tools\\Calendar\\days.js":"109","E:\\bidboland\\src\\permision\\permision.js":"110","E:\\bidboland\\src\\layout\\sidebar.js":"111","E:\\bidboland\\src\\Customization\\UploadInformation.js":"112","E:\\bidboland\\src\\layout\\menu.js":"113","E:\\bidboland\\src\\layout\\loading.js":"114","E:\\bidboland\\src\\layout\\popupConfirm.js":"115","E:\\bidboland\\src\\getCustomFormat.js":"116","E:\\bidboland\\src\\layout\\firstLoading.js":"117","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\TSR11.js":"118","E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\TSR12.js":"119","E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\TSR10.js":"120","E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\TSR8.js":"121","E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\TSR9.js":"122","E:\\bidboland\\src\\tsrNew\\tabs.js":"123","E:\\bidboland\\src\\tsrNew\\ListSign.js":"124","E:\\bidboland\\src\\tsrNew\\tsr1\\TechnicalServiceApplication.js":"125","E:\\bidboland\\src\\layout\\CancelButton.js":"126","E:\\bidboland\\src\\Chart\\Chart.js":"127","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\TableVertical.js":"128","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\TableHorizontal.js":"129","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\PieOfPie.js":"130","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\LastSituationBox.js":"131","E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\TSR7.js":"132","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\DurationValueAxis.js":"133","E:\\bidboland\\src\\tsrNew\\index\\AcceptedList.js":"134","E:\\bidboland\\src\\Customization\\CounterTab.js":"135","E:\\bidboland\\src\\tsrNew\\index\\DrafList.js":"136","E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\TSR6.js":"137","E:\\bidboland\\src\\Tools\\TaskManagement\\AllTasks.js":"138","E:\\bidboland\\src\\Form\\Form.js":"139","E:\\bidboland\\src\\Print\\TSR\\page11.js":"140","E:\\bidboland\\src\\Print\\TSR\\page12.js":"141","E:\\bidboland\\src\\Print\\TSR\\page10.js":"142","E:\\bidboland\\src\\createUser\\CreateUserGroup\\access.js":"143","E:\\bidboland\\src\\library\\TablePublishers.js":"144","E:\\bidboland\\src\\TSR\\ListSign.js":"145","E:\\bidboland\\src\\tsrNew\\report\\content.js":"146","E:\\bidboland\\src\\library\\TableWriters.js":"147","E:\\bidboland\\src\\CheckPersianText.js":"148","E:\\bidboland\\src\\index-builder\\EditRow.js":"149","E:\\bidboland\\src\\ConvertNumber.js":"150","E:\\bidboland\\src\\layout\\LinkReality.js":"151","E:\\bidboland\\src\\layout\\Bulletin.js":"152","E:\\bidboland\\src\\layout\\itemSide.js.js":"153","E:\\bidboland\\src\\Print\\NewTSR\\TextAreaWithRotate.js":"154","E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\Date.js":"155","E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\ResultReview.js":"156","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\Office.js":"157","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\Documents.js":"158","E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\Problems.js":"159","E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\InstructionNumber.js":"160","E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\ReviewResult.js":"161","E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\Page9.js":"162","E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\Page8.js":"163","E:\\bidboland\\src\\Print\\NewTSR\\Sign\\Sign.js":"164","E:\\bidboland\\src\\Print\\NewTSR\\Header\\Header.js":"165","E:\\bidboland\\src\\tsrNew\\TSR9\\StaticList.js":"166","E:\\bidboland\\src\\tsrNew\\TSR8\\ListTab.js":"167","E:\\bidboland\\src\\tsrNew\\CCDisabled.js":"168","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Internal.js":"169","E:\\bidboland\\src\\table\\Row.js":"170","E:\\bidboland\\src\\tsrNew\\index\\Undo.js":"171","E:\\bidboland\\src\\tsrNew\\index\\AcceptedListAction.js":"172","E:\\bidboland\\src\\tsrNew\\index\\Reject.js":"173","E:\\bidboland\\src\\tsrNew\\index\\ConfirmReject.js":"174","E:\\bidboland\\src\\table\\FooterTable.js":"175","E:\\bidboland\\src\\Form\\Switch.js":"176","E:\\bidboland\\src\\createUser\\CreateUserGroup\\Submit.js":"177","E:\\bidboland\\src\\table\\OutputFilter.js":"178","E:\\bidboland\\src\\table\\notFound.js":"179","E:\\bidboland\\src\\Customization\\advancedSearch.js":"180","E:\\bidboland\\src\\layout\\Events.js":"181","E:\\bidboland\\src\\layout\\MessagesNote.js":"182","E:\\bidboland\\src\\createUser\\CreateUserGroup\\SetAccessLevels.js":"183","E:\\bidboland\\src\\createUser\\CreateUserGroup\\delete.js":"184","E:\\bidboland\\src\\createUser\\CreateUserGroup\\add.js":"185","E:\\bidboland\\src\\Form\\CheckBox.js":"186","E:\\bidboland\\src\\createUser\\CreateUserGroup\\partArea.js":"187","E:\\bidboland\\src\\Form\\Location.js":"188","E:\\bidboland\\src\\Form\\Radio.js":"189","E:\\bidboland\\src\\Form\\MultiSelect.js":"190","E:\\bidboland\\src\\Form\\Upload.js":"191","E:\\bidboland\\src\\Form\\Select.js":"192","E:\\bidboland\\src\\Form\\Default.js":"193","E:\\bidboland\\src\\Form\\TextArea.js":"194","E:\\bidboland\\src\\Form\\Date.js":"195","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\ItemDoc.js":"196","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\ItemOffice.js":"197","E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\ItemProblem.js":"198","E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\CheckBox.js":"199","E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIAccessLevel.js":"200","E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\PurchaseRequest.js":"201","E:\\bidboland\\src\\Print\\NewTSR\\Sign\\ListSign.js":"202","E:\\bidboland\\src\\Print\\NewTSR\\Sign\\ItemSign.js":"203","E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\InstructionsHead.js":"204","E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\Implemented.js":"205","E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\MultiAttachment.js":"206","E:\\bidboland\\src\\Print\\NewTSR\\Attachment\\Attachment.js":"207","E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\TextAreaWithRotateMulti.js":"208","E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\ReviewResult.js":"209","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ItemInternal.js":"210","E:\\bidboland\\src\\tsrNew\\report\\lastStatusDiscipline\\index.js":"211","E:\\bidboland\\src\\table\\API.js":"212","E:\\bidboland\\src\\api\\index.js":"213","E:\\bidboland\\src\\tsrNew\\report\\generalInfo\\index.js":"214","E:\\bidboland\\src\\tsrNew\\report\\lastStatusOffice\\index.js":"215","E:\\bidboland\\src\\tsrNew\\report\\lastStatusForm\\index.js":"216","E:\\bidboland\\src\\ARP\\outputCorrective.js":"217","E:\\bidboland\\src\\createUser\\CreateUserGroup\\tab.js":"218","E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIAccess.js":"219","E:\\bidboland\\src\\createUser\\CreateUserGroup\\AccessLevel.js":"220","E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\ImplementedItem.js":"221","E:\\bidboland\\src\\Print\\NewTSR\\Attachment\\ItemAttach.js":"222","E:\\bidboland\\src\\tsrNew\\report\\switch.js":"223","E:\\bidboland\\src\\tsrNew\\report\\boxChart.js":"224","E:\\bidboland\\src\\Component\\situation\\box.js":"225","E:\\bidboland\\src\\Component\\chart\\pieChart.js":"226","E:\\bidboland\\src\\Component\\chart\\barChart.js":"227","E:\\bidboland\\src\\createUser\\CreateUserGroup\\tabAccsess.js":"228","E:\\bidboland\\src\\createUser\\CreateUserGroup\\subField.js":"229","E:\\bidboland\\src\\createUser\\CreateUserGroup\\selectAll.js":"230","E:\\bidboland\\src\\createUser\\CreateUserGroup\\Fields.js":"231","E:\\bidboland\\src\\CheckDownload.js":"232","E:\\bidboland\\src\\tsrNew\\ShowTsr\\DocumentInternal.js":"233","E:\\bidboland\\src\\createUser\\CreateUserGroup\\toogleBtn.js":"234","E:\\bidboland\\src\\createUser\\CreateUserGroup\\nameFields.js":"235","E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIFields.js":"236","E:\\bidboland\\src\\tsrNew\\ShowTsr\\BoxResultDocument.js":"237","E:\\bidboland\\src\\tsrNew\\index\\DraftListAction.js":"238","E:\\bidboland\\src\\tsrNew\\index\\DeterminantStatus.js":"239","E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\ShowItems.js":"240","E:\\bidboland\\src\\tsrNew\\index\\FetchApi.js":"241","E:\\bidboland\\src\\table\\HeaderTable.js":"242","E:\\bidboland\\src\\table\\BodyTable.js":"243","E:\\bidboland\\src\\tsrNew\\TSR7\\ListTab.js":"244","E:\\bidboland\\src\\tsrNew\\tsr1\\ButtonEdit.js":"245","E:\\bidboland\\src\\tsrNew\\tsr1\\API.js":"246","E:\\bidboland\\src\\tsrNew\\tsr1\\ButtonSubmit.js":"247","E:\\bidboland\\src\\tsrNew\\tsr1\\TypeRecovery.js":"248","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Foreign.js":"249","E:\\bidboland\\src\\tsrNew\\TOCC.js":"250","E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\TypeDocuments.js":"251","E:\\bidboland\\src\\tsrNew\\sign\\Sign.js":"252","E:\\bidboland\\src\\layout\\SideOpen.js":"253","E:\\bidboland\\src\\layout\\SideClose.js":"254","E:\\bidboland\\src\\notification\\NotificationCotainer.js":"255","E:\\bidboland\\src\\createUser\\CreateUserGroup\\Category.js":"256","E:\\bidboland\\src\\createUser\\CreateUserGroup\\UnitOffice.js":"257","E:\\bidboland\\src\\createUser\\CreateUserGroup\\SecondBox.js":"258","E:\\bidboland\\src\\createUser\\EditUserGroup\\UnitOffice.js":"259","E:\\bidboland\\src\\createUser\\EditUserGroup\\Category.js":"260","E:\\bidboland\\src\\createUser\\EditUserGroup\\SecondBox.js":"261","E:\\bidboland\\src\\createUser\\EditUserGroup\\access.js":"262","E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APICreate.js":"263","E:\\bidboland\\src\\Print\\TSR\\page8.js":"264","E:\\bidboland\\src\\Print\\TSR\\page6.js":"265","E:\\bidboland\\src\\Print\\TSR\\page9.js":"266","E:\\bidboland\\src\\Print\\TSR\\page7.js":"267","E:\\bidboland\\src\\Print\\TSR\\page5.js":"268","E:\\bidboland\\src\\Print\\TSR\\page4.js":"269","E:\\bidboland\\src\\Print\\TSR\\page2.js":"270","E:\\bidboland\\src\\Print\\TSR\\page3.js":"271","E:\\bidboland\\src\\Print\\TSR\\page1.js":"272","E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIEdit.js":"273","E:\\bidboland\\src\\Print\\ARP\\Form_3.js":"274","E:\\bidboland\\src\\Print\\ARP\\Form_1.js":"275","E:\\bidboland\\src\\Print\\ARP\\Form_4.js":"276","E:\\bidboland\\src\\Tools\\E-mail\\DeleteEmail.js":"277","E:\\bidboland\\src\\Print\\ARP\\Form_2.js":"278","E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\Drafts.js":"279","E:\\bidboland\\src\\Tools\\E-mail\\AddEmail.js":"280","E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\HeaderItem.js":"281","E:\\bidboland\\src\\tsrNew\\tsr1\\StaticList.js":"282","E:\\bidboland\\src\\table\\ItemBody.js":"283","E:\\bidboland\\src\\table\\LoadingTable.js":"284","E:\\bidboland\\src\\table\\ItemHeader.js":"285","E:\\bidboland\\src\\Tools\\E-mail\\header.js":"286","E:\\bidboland\\src\\Tools\\TaskManagement\\SideTask.js":"287","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ItemForeign.js":"288","E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\InBox.js":"289","E:\\bidboland\\src\\tsrNew\\tsr1\\listRecovery.js":"290","E:\\bidboland\\src\\tsrNew\\sign\\Rejected.js":"291","E:\\bidboland\\src\\tsrNew\\sign\\Accepted.js":"292","E:\\bidboland\\src\\tsrNew\\sign\\DefaultStatus.js":"293","E:\\bidboland\\src\\Print\\NewTSR\\TSR5\\TSR5.js":"294","E:\\bidboland\\src\\Print\\NewTSR\\TSR4\\TSR4.js":"295","E:\\bidboland\\src\\Tools\\Chat\\UserProfile.js":"296","E:\\bidboland\\src\\Tools\\Chat\\ContactsList.js":"297","E:\\bidboland\\src\\Tools\\Chat\\BoxChat.js":"298","E:\\bidboland\\src\\Print\\NewTSR\\API\\API.js":"299","E:\\bidboland\\src\\Print\\NewTSR\\TSR3\\TSR3.js":"300","E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\TSR1.js":"301","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\TSR2.js":"302","E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\SecondTotal.js":"303","E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\Total.js":"304","E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\RowItems.js":"305","E:\\bidboland\\src\\createUser\\EditUserGroup\\add.js":"306","E:\\bidboland\\src\\createUser\\EditUserGroup\\Submit.js":"307","E:\\bidboland\\src\\createUser\\EditUserGroup\\partArea.js":"308","E:\\bidboland\\src\\createUser\\EditUserGroup\\delete.js":"309","E:\\bidboland\\src\\createUser\\EditUserGroup\\SetAccessLevels.js":"310","E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIAccessLevel.js":"311","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\TransmittalDisabled.js":"312","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\ReplaySheet.js":"313","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\CommentSheet.js":"314","E:\\bidboland\\src\\Print\\ARP\\sign.js":"315","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\TransmittalDisabled.js":"316","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\CommentSheet.js":"317","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\ReplaySheet.js":"318","E:\\bidboland\\src\\Print\\ARP\\head.js":"319","E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\ContentDrafts.js":"320","E:\\bidboland\\src\\CheckEmail.js":"321","E:\\bidboland\\src\\Tools\\E-mail\\SideBar.js":"322","E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\ItemCheckBox.js":"323","E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\ContentInBox.js":"324","E:\\bidboland\\src\\tsrNew\\sign\\PopUpReject.js":"325","E:\\bidboland\\src\\Project\\Engineering\\dcc\\DocumentControlCenter\\DocumentControlCenter.js":"326","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\SubsidiaryIndex.js":"327","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\index-transmittal.js":"328","E:\\bidboland\\src\\Customization\\listLink.js":"329","E:\\bidboland\\src\\Project\\vendorTransmittal\\ConstructionEngineer.js":"330","E:\\bidboland\\src\\Project\\vendorTransmittal\\index-transmittal.js":"331","E:\\bidboland\\src\\Print\\NewTSR\\TSR5\\ReviewResult.js":"332","E:\\bidboland\\src\\Print\\NewTSR\\TSR4\\HSE_HAZOOP.js":"333","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\Responsible.js":"334","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\handleDescription.js":"335","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\RejectReasons.js":"336","E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\ImprovementType.js":"337","E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIAccess.js":"338","E:\\bidboland\\src\\createUser\\EditUserGroup\\tab.js":"339","E:\\bidboland\\src\\createUser\\EditUserGroup\\AccessLevel.js":"340","E:\\bidboland\\src\\Print\\NewTSR\\TSR3\\ReviewResult.js":"341","E:\\bidboland\\src\\tsrNew\\TSR10\\StaticList.js":"342","E:\\bidboland\\src\\Project\\TQ\\Moshaver.js":"343","E:\\bidboland\\src\\Project\\TQ\\create-show.js":"344","E:\\bidboland\\src\\Project\\TQ\\PeyMankarControl.js":"345","E:\\bidboland\\src\\Project\\TQ\\Karfarma.js":"346","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\NCM.js":"347","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\AN.js":"348","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\AP.js":"349","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\addReplay.js":"350","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\RJ.js":"351","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\CM.js":"352","E:\\bidboland\\src\\Project\\vendorTransmittal\\ReplaySheet.js":"353","E:\\bidboland\\src\\Project\\vendorTransmittal\\TransmittalDisabled.js":"354","E:\\bidboland\\src\\Project\\vendorTransmittal\\CommentSheet.js":"355","E:\\bidboland\\src\\Project\\TQ\\Creater.js":"356","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Title.js":"357","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\NCM.js":"358","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\addReplay.js":"359","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\AP.js":"360","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\RJ.js":"361","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\AN.js":"362","E:\\bidboland\\src\\tsrNew\\ShowTsr\\main.js":"363","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\CM.js":"364","E:\\bidboland\\src\\WBS\\API\\ItemForms.js":"365","E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\Reply.js":"366","E:\\bidboland\\src\\Tools\\E-mail\\HeaderContent.js":"367","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ListTab.js":"368","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ShowTab.js":"369","E:\\bidboland\\src\\tsrNew\\ShowTsr\\API.js":"370","E:\\bidboland\\src\\EngineeringManagement\\DocumentControlCenter\\DocumentControlCenter.js":"371","E:\\bidboland\\src\\RFQ\\TableRFQ.js":"372","E:\\bidboland\\src\\System-management\\city.js":"373","E:\\bidboland\\src\\System-management\\address.js":"374","E:\\bidboland\\src\\System-management\\province.js":"375","E:\\bidboland\\src\\daily-report\\Endorsement.js":"376","E:\\bidboland\\src\\daily-report\\ProjectActivities.js":"377","E:\\bidboland\\src\\daily-report\\Workforce.js":"378","E:\\bidboland\\src\\daily-report\\workshopStatus.js":"379","E:\\bidboland\\src\\daily-report\\GeneralInformation.js":"380","E:\\bidboland\\src\\library\\CheckIndex.js":"381","E:\\bidboland\\src\\layout\\BoxResult.js":"382","E:\\bidboland\\src\\library\\PopupLibrary.js":"383","E:\\bidboland\\src\\library\\tableLibrary.js":"384","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\ItemResponsible.js":"385","E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\ItemReject.js":"386","E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\ItemImprovementType.js":"387","E:\\bidboland\\src\\createUser\\EditUserGroup\\selectAll.js":"388","E:\\bidboland\\src\\createUser\\EditUserGroup\\Fields.js":"389","E:\\bidboland\\src\\createUser\\EditUserGroup\\tabAccsess.js":"390","E:\\bidboland\\src\\createUser\\EditUserGroup\\subField.js":"391","E:\\bidboland\\src\\tsrNew\\tsr2\\ListRejectReasons.js":"392","E:\\bidboland\\src\\Print\\NewTSR\\StaticList\\static.js":"393","E:\\bidboland\\src\\maskInput\\Masktedinput.js":"394","E:\\bidboland\\src\\Meeting-management\\ItemsProceedings.js":"395","E:\\bidboland\\src\\Meeting-management\\ProgressbarTime.js":"396","E:\\bidboland\\src\\Meeting-management\\ContentsProceedings.js":"397","E:\\bidboland\\src\\clock\\clock.js":"398","E:\\bidboland\\src\\Project\\vendorTransmittal\\addReplay.js":"399","E:\\bidboland\\src\\Project\\vendorTransmittal\\NCM.js":"400","E:\\bidboland\\src\\Project\\vendorTransmittal\\AN.js":"401","E:\\bidboland\\src\\Project\\vendorTransmittal\\AP.js":"402","E:\\bidboland\\src\\Project\\vendorTransmittal\\CM.js":"403","E:\\bidboland\\src\\tsrNew\\ShowTsr\\adminEditRequest.js":"404","E:\\bidboland\\src\\tsrNew\\ShowTsr\\EditBeforeRequest.js":"405","E:\\bidboland\\src\\tsrNew\\ShowTsr\\btnNote.js":"406","E:\\bidboland\\src\\Project\\vendorTransmittal\\RJ.js":"407","E:\\bidboland\\src\\tsrNew\\ShowTsr\\RejectHistor.js":"408","E:\\bidboland\\src\\tsrNew\\TSR7\\TSR7.js":"409","E:\\bidboland\\src\\tsrNew\\TSR10\\TSR10.js":"410","E:\\bidboland\\src\\mre\\attachments.js":"411","E:\\bidboland\\src\\mre\\mto.js":"412","E:\\bidboland\\src\\mre\\tagDesciption.js":"413","E:\\bidboland\\src\\mre\\information.js":"414","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Header.js":"415","E:\\bidboland\\src\\tsrNew\\tsr2\\TSR2.js":"416","E:\\bidboland\\src\\tsrNew\\TSR9\\TSR9.js":"417","E:\\bidboland\\src\\tsrNew\\TSR8\\TSR8.js":"418","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Message.js":"419","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Revisions.js":"420","E:\\bidboland\\src\\tsrNew\\TSR12\\TSR12.js":"421","E:\\bidboland\\src\\tsrNew\\TSR11\\TSR11.js":"422","E:\\bidboland\\src\\tsrNew\\TSR6\\TSR6.js":"423","E:\\bidboland\\src\\tsrNew\\tsr3\\tsr3.js":"424","E:\\bidboland\\src\\tsrNew\\tsr5\\TSR5.js":"425","E:\\bidboland\\src\\tsrNew\\tsr4\\TSR4.js":"426","E:\\bidboland\\src\\gallery\\PopUpGallery.js":"427","E:\\bidboland\\src\\layout\\BoxResultSearch.js":"428","E:\\bidboland\\src\\Customization\\filterSelect.js":"429","E:\\bidboland\\src\\list-user\\TableUser.js":"430","E:\\bidboland\\src\\createUser\\TableUserGroup.js":"431","E:\\bidboland\\src\\EngineeringManagement\\API\\FnsTables.js":"432","E:\\bidboland\\src\\dashboard\\ppc.js":"433","E:\\bidboland\\src\\dashboard\\rampco.js":"434","E:\\bidboland\\src\\dashboard\\bidboland.js":"435","E:\\bidboland\\src\\dashboard\\wellcome.js":"436","E:\\bidboland\\src\\dashboard\\pars.js":"437","E:\\bidboland\\src\\layout\\Attention.js":"438","E:\\bidboland\\src\\daily-report\\clock.js":"439","E:\\bidboland\\src\\library\\ItemPopupLibrary.js":"440","E:\\bidboland\\src\\library\\ActionLibrary.js":"441","E:\\bidboland\\src\\createUser\\EditUser.js":"442","E:\\bidboland\\src\\library\\DocumentRegistration.js":"443","E:\\bidboland\\src\\library\\LibraryManager.js":"444","E:\\bidboland\\src\\notification\\SendMessage.js":"445","E:\\bidboland\\src\\WBS\\AttachedDocumentsPurchasePackagesForm.js":"446","E:\\bidboland\\src\\WBS\\ListEngineeringDocumentsForm.js":"447","E:\\bidboland\\src\\WBS\\PurchasePackagesForm.js":"448","E:\\bidboland\\src\\WBS\\WorkFailureStructureForm.js":"449","E:\\bidboland\\src\\TechnicalArchive\\CreateCCS.js":"450","E:\\bidboland\\src\\TechnicalArchive\\EditCCS.js":"451","E:\\bidboland\\src\\TechnicalArchive\\InstrumentFormEdit.js":"452","E:\\bidboland\\src\\library\\API\\FnsTables.js":"453","E:\\bidboland\\src\\TechnicalArchive\\BuildFinalBookletForm.js":"454","E:\\bidboland\\src\\TechnicalArchive\\CCS.js":"455","E:\\bidboland\\src\\TechnicalArchive\\FinalEngineeringManualForm.js":"456","E:\\bidboland\\src\\TechnicalArchive\\InstrumentForm.js":"457","E:\\bidboland\\src\\TechnicalArchive\\3DModelForm.js":"458","E:\\bidboland\\src\\TechnicalArchive\\IsoMetricForm.js":"459","E:\\bidboland\\src\\TechnicalArchive\\3DModelFormEdit.js":"460","E:\\bidboland\\src\\TechnicalArchive\\IsoMetricFormEdit.js":"461","E:\\bidboland\\src\\TechnicalArchive\\LineListFormEdit.js":"462","E:\\bidboland\\src\\TechnicalArchive\\LineListForm.js":"463","E:\\bidboland\\src\\TechnicalArchive\\P&IDFormEdit.js":"464","E:\\bidboland\\src\\TechnicalArchive\\P&IDForm.js":"465","E:\\bidboland\\src\\TechnicalArchive\\PFDFormEdit.js":"466","E:\\bidboland\\src\\knowledgeManagement\\RegisteredForm.js":"467","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\EquipmentID.js":"468","E:\\bidboland\\src\\DaraBI\\ProductionCalculation.js":"469","E:\\bidboland\\src\\notification\\PanelNotification\\PanelNotification.js":"470","E:\\bidboland\\src\\knowledgeManagement\\AcceptedForm.js":"471","E:\\bidboland\\src\\TechnicalArchive\\PFDForm.js":"472","E:\\bidboland\\src\\knowledgeManagement\\knowledgeManagement.js":"473","E:\\bidboland\\src\\createUser\\EditUserGroup\\toogleBtn.js":"474","E:\\bidboland\\src\\createUser\\EditUserGroup\\nameFields.js":"475","E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\FinalEquipmentManualForm.js":"476","E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIFields.js":"477","E:\\bidboland\\src\\tsrNew\\note\\index.js":"478","E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineeringForm.js":"479","E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineeringFormEdit.js":"480","E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineeringFormEdit.js":"481","E:\\bidboland\\src\\TechnicalArchive\\BasicEngineeringForm.js":"482","E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineeringForm.js":"483","E:\\bidboland\\src\\TechnicalArchive\\BasicEngineeringFormEdit.js":"484","E:\\bidboland\\src\\layout\\ResultPage.js":"485","E:\\bidboland\\src\\WBS\\WBS.js":"486","E:\\bidboland\\src\\tsrNew\\ShowTsr\\BoxText.js":"487","E:\\bidboland\\src\\tsrNew\\TSR10\\buttonSubmitReviewResult.js":"488","E:\\bidboland\\src\\tsrNew\\TSR10\\ButtonEdit.js":"489","E:\\bidboland\\src\\tsrNew\\TSR10\\ButtonSubmit.js":"490","E:\\bidboland\\src\\dashboard-ppc\\dashboard.js":"491","E:\\bidboland\\src\\tsrNew\\TSR10\\ResetState.js":"492","E:\\bidboland\\src\\tsrNew\\tsr4\\ResetState.js":"493","E:\\bidboland\\src\\tsrNew\\tsr4\\ButtonSubmit.js":"494","E:\\bidboland\\src\\tsrNew\\tsr4\\ButtonEdit.js":"495","E:\\bidboland\\src\\tsrNew\\tsr4\\API.js":"496","E:\\bidboland\\src\\tsrNew\\tsr5\\ResetState.js":"497","E:\\bidboland\\src\\tsrNew\\Dispatch\\Dispatch.js":"498","E:\\bidboland\\src\\tsrNew\\tsr5\\ButtonSubmit.js":"499","E:\\bidboland\\src\\tsrNew\\tsr5\\ButtonsEdit.js":"500","E:\\bidboland\\src\\tsrNew\\tsr5\\API.js":"501","E:\\bidboland\\src\\tsrNew\\tsr3\\ResetState.js":"502","E:\\bidboland\\src\\tsrNew\\tsr3\\ButtonSubmit.js":"503","E:\\bidboland\\src\\tsrNew\\tsr3\\ButtonEdit.js":"504","E:\\bidboland\\src\\library\\ListManeger.js":"505","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\HeaderForm.js":"506","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation.js":"507","E:\\bidboland\\src\\table\\PopUpTable.js":"508","E:\\bidboland\\src\\TechnicalArchive\\TableCCS.js":"509","E:\\bidboland\\src\\knowledgeManagement\\Accepted.js":"510","E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\EquipmentManual.js":"511","E:\\bidboland\\src\\knowledgeManagement\\Registered.js":"512","E:\\bidboland\\src\\Customization\\MultiSelectBox.js":"513","E:\\bidboland\\src\\tsrNew\\tsr3\\API.js":"514","E:\\bidboland\\src\\tsrNew\\TSR6\\ButtonSubmit.js":"515","E:\\bidboland\\src\\tsrNew\\TSR6\\ButtonEdit.js":"516","E:\\bidboland\\src\\tsrNew\\TSR11\\ButtonSubmit.js":"517","E:\\bidboland\\src\\tsrNew\\TSR6\\ManageTab.js":"518","E:\\bidboland\\src\\tsrNew\\TSR6\\API.js":"519","E:\\bidboland\\src\\tsrNew\\TSR12\\StaticList.js":"520","E:\\bidboland\\src\\tsrNew\\note\\head.js":"521","E:\\bidboland\\src\\tsrNew\\TSR12\\ButtonSubmit.js":"522","E:\\bidboland\\src\\tsrNew\\TSR11\\API.js":"523","E:\\bidboland\\src\\tsrNew\\note\\HOC.js":"524","E:\\bidboland\\src\\tsrNew\\TSR8\\ResetState.js":"525","E:\\bidboland\\src\\tsrNew\\TSR12\\API.js":"526","E:\\bidboland\\src\\tsrNew\\TSR8\\ManageTab.js":"527","E:\\bidboland\\src\\tsrNew\\TSR8\\ButtonEdit.js":"528","E:\\bidboland\\src\\tsrNew\\TSR8\\ButtonSubmit.js":"529","E:\\bidboland\\src\\layout\\TableResultPage.js":"530","E:\\bidboland\\src\\WBS\\ProjectIdentify.js":"531","E:\\bidboland\\src\\WBS\\VirtualReality.js":"532","E:\\bidboland\\src\\TechnicalArchive\\API\\StaticList.js":"533","E:\\bidboland\\src\\TechnicalArchive\\API\\APIForm.js":"534","E:\\bidboland\\src\\WBS\\ListEngineeringDocuments.js":"535","E:\\bidboland\\src\\layout\\DetailResultPageTop.js":"536","E:\\bidboland\\src\\WBS\\WorkFailureStructure.js":"537","E:\\bidboland\\src\\dashboard-ppc\\StackedColumnChart100.js":"538","E:\\bidboland\\src\\WBS\\AttachedDocumentsPurchasePackages.js":"539","E:\\bidboland\\src\\WBS\\PurchasePackages.js":"540","E:\\bidboland\\src\\dashboard-ppc\\ClusteredBarChart.js":"541","E:\\bidboland\\src\\dashboard-ppc\\CylinderGauge.js":"542","E:\\bidboland\\src\\dashboard-ppc\\PieOfPie.js":"543","E:\\bidboland\\src\\dashboard-ppc\\LastSituationBox.js":"544","E:\\bidboland\\src\\tsrNew\\TSR8\\API.js":"545","E:\\bidboland\\src\\dashboard-ppc\\DataGrouping50KPoints.js":"546","E:\\bidboland\\src\\tsrNew\\TSR9\\ResetState.js":"547","E:\\bidboland\\src\\tsrNew\\TSR9\\SecondLevel.js":"548","E:\\bidboland\\src\\tsrNew\\TSR9\\FirstLevel.js":"549","E:\\bidboland\\src\\tsrNew\\TSR9\\API.js":"550","E:\\bidboland\\src\\tsrNew\\tsr2\\ManageTab.js":"551","E:\\bidboland\\src\\tsrNew\\tsr2\\ButtonSubmit.js":"552","E:\\bidboland\\src\\tsrNew\\tsr2\\ButtonEdit.js":"553","E:\\bidboland\\src\\tsrNew\\tsr2\\ResponsibleExpert.js":"554","E:\\bidboland\\src\\tsrNew\\TSR10\\API.js":"555","E:\\bidboland\\src\\tsrNew\\tsr2\\RejectReasonsItems.js":"556","E:\\bidboland\\src\\tsrNew\\tsr2\\API.js":"557","E:\\bidboland\\src\\tsrNew\\TSR10\\ManageTab.js":"558","E:\\bidboland\\src\\tsrNew\\TSR10\\ListProblems.js":"559","E:\\bidboland\\src\\tsrNew\\Dispatch\\History.js":"560","E:\\bidboland\\src\\tsrNew\\Dispatch\\ShowNameDispacht.js":"561","E:\\bidboland\\src\\tsrNew\\TSR7\\ResetState.js":"562","E:\\bidboland\\src\\tsrNew\\TSR7\\Building.js":"563","E:\\bidboland\\src\\tsrNew\\TSR7\\Instrument.js":"564","E:\\bidboland\\src\\tsrNew\\TSR7\\Electrical.js":"565","E:\\bidboland\\src\\tsrNew\\TSR7\\ButtonEdit.js":"566","E:\\bidboland\\src\\tsrNew\\TSR7\\ButtonSubmit.js":"567","E:\\bidboland\\src\\tsrNew\\TSR7\\ManageTab.js":"568","E:\\bidboland\\src\\tsrNew\\TSR7\\API.js":"569","E:\\bidboland\\src\\tsrNew\\TSR7\\Mechanical.js":"570","E:\\bidboland\\src\\layout\\GeneralSearch.js":"571","E:\\bidboland\\src\\FAQ\\IndexFAQ.js":"572","E:\\bidboland\\src\\FAQ\\Edit.js":"573","E:\\bidboland\\src\\Tools\\InternalPhonebook\\Create.js":"574","E:\\bidboland\\src\\FAQ\\Create.js":"575","E:\\bidboland\\src\\index-builder\\ListIndexes.js":"576","E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchive.js":"577","E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveBirthCertificate.js":"578","E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveFinalBooklet.js":"579","E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveEngineering.js":"580","E:\\bidboland\\src\\tsrNew\\note\\Show\\index.js":"581","E:\\bidboland\\src\\tsrNew\\note\\Create\\index.js":"582","E:\\bidboland\\src\\tsrNew\\note\\List\\index.js":"583","E:\\bidboland\\src\\ARP\\ShowArp.js":"584","E:\\bidboland\\src\\ARP\\ARP.js":"585","E:\\bidboland\\src\\ARP\\IndexARP.js":"586","E:\\bidboland\\src\\TSR\\ShowTSR.js":"587","E:\\bidboland\\src\\TechnicalArchive\\ActionCcs.js":"588","E:\\bidboland\\src\\TSR\\IndexTSR.js":"589","E:\\bidboland\\src\\TechnicalArchive\\API\\FnsTables.js":"590","E:\\bidboland\\src\\layout\\PopUPText.js":"591","E:\\bidboland\\src\\library\\IndexRequest.js":"592","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\FG.js":"593","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\ANALYZER.js":"594","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\TRANSMITTERGAUGE.js":"595","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\VALVES.js":"596","E:\\bidboland\\src\\Customization\\ItemMultiSelect.js":"597","E:\\bidboland\\src\\tsrNew\\TSR6\\Tab.js":"598","E:\\bidboland\\src\\tsrNew\\TSR6\\StaticList.js":"599","E:\\bidboland\\src\\tsrNew\\TSR11\\StaticList.js":"600","E:\\bidboland\\src\\tsrNew\\TSR11\\Offices.js":"601","E:\\bidboland\\src\\tsrNew\\TSR6\\ListTab.js":"602","E:\\bidboland\\src\\tsrNew\\TSR11\\ManageDocument.js":"603","E:\\bidboland\\src\\tsrNew\\TSR8\\Tab.js":"604","E:\\bidboland\\src\\forgotPassword\\forgotPassword.js":"605","E:\\bidboland\\src\\WBS\\ActionProjectIdentify.js":"606","E:\\bidboland\\src\\WBS\\API\\FnsTables.js":"607","E:\\bidboland\\src\\tsrNew\\TSR8\\PurchaseRequests.js":"608","E:\\bidboland\\src\\tsrNew\\TSR8\\StaticList.js":"609","E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonEdit.js":"610","E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonSubmitFirst.js":"611","E:\\bidboland\\src\\tsrNew\\tsr2\\ListTab.js":"612","E:\\bidboland\\src\\tsrNew\\tsr2\\Tab.js":"613","E:\\bidboland\\src\\tsrNew\\TSR9\\EditReqFirst.js":"614","E:\\bidboland\\src\\tsrNew\\tsr2\\ItemResponsibleExpert.js":"615","E:\\bidboland\\src\\tsrNew\\TSR9\\ItemFirstLevel.js":"616","E:\\bidboland\\src\\tsrNew\\tsr2\\RejectReasons.js":"617","E:\\bidboland\\src\\tsrNew\\TSR10\\Tab.js":"618","E:\\bidboland\\src\\tsrNew\\TSR10\\ItemListProblems.js":"619","E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonSubmit.js":"620","E:\\bidboland\\src\\tsrNew\\TSR9\\ImplementedEng.js":"621","E:\\bidboland\\src\\tsrNew\\TSR9\\ManageTab.js":"622","E:\\bidboland\\src\\tsrNew\\TSR7\\StaticList.js":"623","E:\\bidboland\\src\\tsrNew\\TSR7\\Tab.js":"624","E:\\bidboland\\src\\FAQ\\ListFiled.js":"625","E:\\bidboland\\src\\FAQ\\TabeleFAQ.js":"626","E:\\bidboland\\src\\FAQ\\FormDrag.js":"627","E:\\bidboland\\src\\index-builder\\TableListIndexes.js":"628","E:\\bidboland\\src\\TechnicalArchive\\Instrument.js":"629","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\ANALYZERTable.js":"630","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\FGTable.js":"631","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\TRANSMITTERGAUGETable.js":"632","E:\\bidboland\\src\\TechnicalArchive\\PFD.js":"633","E:\\bidboland\\src\\TechnicalArchive\\BuildFinalBooklet.js":"634","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\VALVESTable.js":"635","E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\FinalEquipmentManual.js":"636","E:\\bidboland\\src\\TechnicalArchive\\3DModel.js":"637","E:\\bidboland\\src\\TechnicalArchive\\FinalEngineeringManual.js":"638","E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineering.js":"639","E:\\bidboland\\src\\tsrNew\\note\\Show\\API.js":"640","E:\\bidboland\\src\\tsrNew\\note\\Show\\Body.js":"641","E:\\bidboland\\src\\ARP\\tableARP.js":"642","E:\\bidboland\\src\\TSR\\EditBeforeRequest.js":"643","E:\\bidboland\\src\\TSR\\Revisions.js":"644","E:\\bidboland\\src\\TSR\\MapDelivery.js":"645","E:\\bidboland\\src\\TSR\\Effectiveness.js":"646","E:\\bidboland\\src\\TSR\\CheckEndWork.js":"647","E:\\bidboland\\src\\TSR\\tableTSRRecord.js":"648","E:\\bidboland\\src\\TSR\\AnnouncementEndWork.js":"649","E:\\bidboland\\src\\TSR\\tableTSR.js":"650","E:\\bidboland\\src\\TSR\\Inspector.js":"651","E:\\bidboland\\src\\tsrNew\\TSR11\\ItemOffice.js":"652","E:\\bidboland\\src\\TSR\\WorkOrder.js":"653","E:\\bidboland\\src\\TSR\\GeneralEngineering.js":"654","E:\\bidboland\\src\\TSR\\committee.js":"655","E:\\bidboland\\src\\library\\TableRequest.js":"656","E:\\bidboland\\src\\ARP\\Revisions.js":"657","E:\\bidboland\\src\\TSR\\PreliminaryReview.js":"658","E:\\bidboland\\src\\TSR\\HSE.js":"659","E:\\bidboland\\src\\TSR\\ProcessTsr.js":"660","E:\\bidboland\\src\\ARP\\TechnicalReport.js":"661","E:\\bidboland\\src\\TSR\\TechnicalServiceApplication.js":"662","E:\\bidboland\\src\\ARP\\CorrectiveActions.js":"663","E:\\bidboland\\src\\ARP\\ReviewReports.js":"664","E:\\bidboland\\src\\tsrNew\\note\\Create\\footer.js":"665","E:\\bidboland\\src\\ARP\\ReportVariousDisciplines.js":"666","E:\\bidboland\\src\\tsrNew\\note\\List\\API.js":"667","E:\\bidboland\\src\\tsrNew\\note\\Create\\API.js":"668","E:\\bidboland\\src\\tsrNew\\note\\Create\\Body.js":"669","E:\\bidboland\\src\\TechnicalArchive\\BasicEngineering.js":"670","E:\\bidboland\\src\\tsrNew\\TSR11\\ItemDoc.js":"671","E:\\bidboland\\src\\TechnicalArchive\\LineList.js":"672","E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineering.js":"673","E:\\bidboland\\src\\forgotPassword\\EnterNewPassword.js":"674","E:\\bidboland\\src\\TechnicalArchive\\IsoMetric.js":"675","E:\\bidboland\\src\\forgotPassword\\EnterCode.js":"676","E:\\bidboland\\src\\forgotPassword\\GetEmail.js":"677","E:\\bidboland\\src\\TechnicalArchive\\P&ID.js":"678","E:\\bidboland\\src\\tsrNew\\TSR8\\ItemPurchaseRequests.js":"679","E:\\bidboland\\src\\tsrNew\\TSR9\\Tab.js":"680","E:\\bidboland\\src\\tsrNew\\TSR9\\ImplementedEngItem.js":"681","E:\\bidboland\\src\\FAQ\\EditRow.js":"682","E:\\bidboland\\src\\TechnicalArchive\\ActionInstrument.js":"683","E:\\bidboland\\src\\TechnicalArchive\\ActionPfd.js":"684","E:\\bidboland\\src\\TechnicalArchive\\ActionDetailedEngineering.js":"685","E:\\bidboland\\src\\TechnicalArchive\\Action3DModel.js":"686","E:\\bidboland\\src\\TechnicalArchive\\ActionP&ID.js":"687","E:\\bidboland\\src\\TechnicalArchive\\ActionBuildersEngineering.js":"688","E:\\bidboland\\src\\TechnicalArchive\\ActionBasicEng.js":"689","E:\\bidboland\\src\\TechnicalArchive\\ActionLineList.js":"690","E:\\bidboland\\src\\tsrNew\\note\\Create\\files.js":"691","E:\\bidboland\\src\\TechnicalArchive\\ActionISO.js":"692","E:\\bidboland\\src\\ARP\\ListSign.js":"693","E:\\bidboland\\src\\ARP\\HeadTopFirst.js":"694","E:\\bidboland\\src\\ARP\\ReportItem.js":"695","E:\\bidboland\\src\\ARP\\HanldeToCC.js":"696","E:\\bidboland\\src\\ARP\\SignARP.js":"697","E:\\bidboland\\src\\ARP\\SimilarEvents.js":"698","E:\\bidboland\\src\\tsrNew\\note\\Create\\text.js":"699","E:\\bidboland\\src\\tsrNew\\note\\Create\\ToCC.js":"700","E:\\bidboland\\src\\TSR\\SignTSR.js":"701","E:\\bidboland\\src\\TSR\\AttachedDocument.js":"702","E:\\bidboland\\src\\TSR\\TOCC.js":"703","E:\\bidboland\\src\\TSR\\Dispatch.js":"704","E:\\bidboland\\src\\TSR\\listItems.js":"705","E:\\bidboland\\src\\TSR\\RequestBuy.js":"706","E:\\bidboland\\src\\TSR\\SubmitWorkOrder.js":"707","E:\\bidboland\\src\\TSR\\HandleTypeWork.js":"708","E:\\bidboland\\src\\TSR\\ConfirmReject.js":"709","E:\\bidboland\\src\\TSR\\DeterminantStatus.js":"710","E:\\bidboland\\src\\TSR\\AttachedDocumentWorkOrder.js":"711","E:\\bidboland\\src\\TSR\\EngineeringItems.js":"712","E:\\bidboland\\src\\TSR\\DistributionDocuments.js":"713","E:\\bidboland\\src\\TSR\\DifficultiesItems.js":"714","E:\\bidboland\\src\\TSR\\DocumentList.js":"715","E:\\bidboland\\src\\ARP\\Report.js":"716","E:\\bidboland\\src\\ARP\\ActionArp.js":"717","E:\\bidboland\\src\\tsrNew\\note\\Show\\files.js":"718","E:\\bidboland\\src\\ARP\\FetchApi.js":"719","E:\\bidboland\\src\\tsrNew\\note\\Show\\ToCC.js":"720","E:\\bidboland\\src\\tsrNew\\note\\Show\\text.js":"721","E:\\bidboland\\src\\Customization\\SecondBoxData.js":"722","E:\\bidboland\\src\\TechnicalArchive\\BoxVpis.js":"723","E:\\bidboland\\src\\ARP\\ExpertSelection.js":"724","E:\\bidboland\\src\\ARP\\Fns.js":"725","E:\\bidboland\\src\\ARP\\SelectUnitManager.js":"726","E:\\bidboland\\src\\ARP\\AttachFile.js":"727","E:\\bidboland\\src\\ARP\\SecretaryCommittee.js":"728","E:\\bidboland\\src\\ARP\\Location.js":"729","E:\\bidboland\\src\\ARP\\Participants.js":"730","E:\\bidboland\\src\\ARP\\PopUpReject.js":"731","E:\\bidboland\\src\\ARP\\SecondReject.js":"732","E:\\bidboland\\src\\ARP\\FirstReject.js":"733","E:\\bidboland\\src\\Customization\\SelectBoxSearchFormWorkOrder.js":"734","E:\\bidboland\\src\\TSR\\PopUpReject.js":"735","E:\\bidboland\\src\\Customization\\SelectBoxSearchForm.js":"736"},{"size":686,"mtime":1736934861087,"results":"737","hashOfConfig":"738"},{"size":191,"mtime":1736934860884,"results":"739","hashOfConfig":"738"},{"size":375,"mtime":1736934861102,"results":"740","hashOfConfig":"738"},{"size":12342,"mtime":1736934861102,"results":"741","hashOfConfig":"738"},{"size":1469,"mtime":1740641557284,"results":"742","hashOfConfig":"738"},{"size":43157,"mtime":1739346721574,"results":"743","hashOfConfig":"738"},{"size":44980,"mtime":1740040995017,"results":"744","hashOfConfig":"738"},{"size":9608,"mtime":1740038591881,"results":"745","hashOfConfig":"738"},{"size":4950,"mtime":1736936587344,"results":"746","hashOfConfig":"738"},{"size":8135,"mtime":1736934861056,"results":"747","hashOfConfig":"738"},{"size":18693,"mtime":1736934861040,"results":"748","hashOfConfig":"738"},{"size":1060,"mtime":1736934860868,"results":"749","hashOfConfig":"738"},{"size":20438,"mtime":1736934861056,"results":"750","hashOfConfig":"738"},{"size":8332,"mtime":1736934861102,"results":"751","hashOfConfig":"738"},{"size":2590,"mtime":1736934861118,"results":"752","hashOfConfig":"738"},{"size":38157,"mtime":1740252592422,"results":"753","hashOfConfig":"738"},{"size":27936,"mtime":1736934861056,"results":"754","hashOfConfig":"738"},{"size":40719,"mtime":1740252592423,"results":"755","hashOfConfig":"738"},{"size":10794,"mtime":1736934861071,"results":"756","hashOfConfig":"738"},{"size":12960,"mtime":1736934861102,"results":"757","hashOfConfig":"738"},{"size":28008,"mtime":1736934861024,"results":"758","hashOfConfig":"738"},{"size":42782,"mtime":1736934861024,"results":"759","hashOfConfig":"738"},{"size":43547,"mtime":1740252592420,"results":"760","hashOfConfig":"738"},{"size":24897,"mtime":1736934860899,"results":"761","hashOfConfig":"738"},{"size":24354,"mtime":1736934860899,"results":"762","hashOfConfig":"738"},{"size":10530,"mtime":1736934860899,"results":"763","hashOfConfig":"738"},{"size":26229,"mtime":1736934860899,"results":"764","hashOfConfig":"738"},{"size":46764,"mtime":1740252592419,"results":"765","hashOfConfig":"738"},{"size":4947,"mtime":1736934861102,"results":"766","hashOfConfig":"738"},{"size":33223,"mtime":1736934860899,"results":"767","hashOfConfig":"738"},{"size":26406,"mtime":1740064691907,"results":"768","hashOfConfig":"738"},{"size":15505,"mtime":1736934861102,"results":"769","hashOfConfig":"738"},{"size":11792,"mtime":1736934861087,"results":"770","hashOfConfig":"738"},{"size":15068,"mtime":1740252592341,"results":"771","hashOfConfig":"738"},{"size":19548,"mtime":1736934861024,"results":"772","hashOfConfig":"738"},{"size":11502,"mtime":1736934861024,"results":"773","hashOfConfig":"738"},{"size":7281,"mtime":1736934860978,"results":"774","hashOfConfig":"738"},{"size":12491,"mtime":1736934861024,"results":"775","hashOfConfig":"738"},{"size":15856,"mtime":1740252592418,"results":"776","hashOfConfig":"738"},{"size":13800,"mtime":1740252592416,"results":"777","hashOfConfig":"738"},{"size":7055,"mtime":1736934860978,"results":"778","hashOfConfig":"738"},{"size":10726,"mtime":1740252592416,"results":"779","hashOfConfig":"738"},{"size":8921,"mtime":1736934860978,"results":"780","hashOfConfig":"738"},{"size":8505,"mtime":1736934861102,"results":"781","hashOfConfig":"738"},{"size":11039,"mtime":1736934861071,"results":"782","hashOfConfig":"738"},{"size":14812,"mtime":1736934861071,"results":"783","hashOfConfig":"738"},{"size":9479,"mtime":1736934860884,"results":"784","hashOfConfig":"738"},{"size":9857,"mtime":1740252592376,"results":"785","hashOfConfig":"738"},{"size":15583,"mtime":1736934860884,"results":"786","hashOfConfig":"738"},{"size":2920,"mtime":1736934861118,"results":"787","hashOfConfig":"738"},{"size":10610,"mtime":1740252592373,"results":"788","hashOfConfig":"738"},{"size":2162,"mtime":1736934860962,"results":"789","hashOfConfig":"738"},{"size":14096,"mtime":1736934860962,"results":"790","hashOfConfig":"738"},{"size":26725,"mtime":1736934860962,"results":"791","hashOfConfig":"738"},{"size":57470,"mtime":1740252592383,"results":"792","hashOfConfig":"738"},{"size":56311,"mtime":1740252592382,"results":"793","hashOfConfig":"738"},{"size":39230,"mtime":1740252592406,"results":"794","hashOfConfig":"738"},{"size":40729,"mtime":1740252592407,"results":"795","hashOfConfig":"738"},{"size":23551,"mtime":1736934860962,"results":"796","hashOfConfig":"738"},{"size":9835,"mtime":1736934860962,"results":"797","hashOfConfig":"738"},{"size":31058,"mtime":1736934860962,"results":"798","hashOfConfig":"738"},{"size":48342,"mtime":1736934860931,"results":"799","hashOfConfig":"738"},{"size":25181,"mtime":1736934860931,"results":"800","hashOfConfig":"738"},{"size":37602,"mtime":1736934860931,"results":"801","hashOfConfig":"738"},{"size":16666,"mtime":1736934860946,"results":"802","hashOfConfig":"738"},{"size":18422,"mtime":1736934860946,"results":"803","hashOfConfig":"738"},{"size":57750,"mtime":1740252592401,"results":"804","hashOfConfig":"738"},{"size":14245,"mtime":1736934860946,"results":"805","hashOfConfig":"738"},{"size":58500,"mtime":1740252592401,"results":"806","hashOfConfig":"738"},{"size":58131,"mtime":1740252592396,"results":"807","hashOfConfig":"738"},{"size":57455,"mtime":1740252592395,"results":"808","hashOfConfig":"738"},{"size":20033,"mtime":1736934860946,"results":"809","hashOfConfig":"738"},{"size":10856,"mtime":1736934860946,"results":"810","hashOfConfig":"738"},{"size":18031,"mtime":1736934860931,"results":"811","hashOfConfig":"738"},{"size":8945,"mtime":1736934861024,"results":"812","hashOfConfig":"738"},{"size":10732,"mtime":1736934861009,"results":"813","hashOfConfig":"738"},{"size":2060,"mtime":1736934861009,"results":"814","hashOfConfig":"738"},{"size":2465,"mtime":1736934860915,"results":"815","hashOfConfig":"738"},{"size":3972,"mtime":1740047705317,"results":"816","hashOfConfig":"738"},{"size":13412,"mtime":1740041021506,"results":"817","hashOfConfig":"738"},{"size":9315,"mtime":1740045758604,"results":"818","hashOfConfig":"738"},{"size":1158,"mtime":1736934860884,"results":"819","hashOfConfig":"738"},{"size":5833,"mtime":1736934861087,"results":"820","hashOfConfig":"738"},{"size":4284,"mtime":1736934861024,"results":"821","hashOfConfig":"738"},{"size":2714,"mtime":1736934861024,"results":"822","hashOfConfig":"738"},{"size":7533,"mtime":1736934860899,"results":"823","hashOfConfig":"738"},{"size":6073,"mtime":1740252592416,"results":"824","hashOfConfig":"738"},{"size":15131,"mtime":1736934860931,"results":"825","hashOfConfig":"738"},{"size":3581,"mtime":1736934861040,"results":"826","hashOfConfig":"738"},{"size":2855,"mtime":1736934861040,"results":"827","hashOfConfig":"738"},{"size":8926,"mtime":1739346721580,"results":"828","hashOfConfig":"738"},{"size":1668,"mtime":1740046868527,"results":"829","hashOfConfig":"738"},{"size":5848,"mtime":1736934861087,"results":"830","hashOfConfig":"738"},{"size":8917,"mtime":1739346721650,"results":"831","hashOfConfig":"738"},{"size":1840,"mtime":1736934861118,"results":"832","hashOfConfig":"738"},{"size":5640,"mtime":1736934861071,"results":"833","hashOfConfig":"738"},{"size":6044,"mtime":1736934861102,"results":"834","hashOfConfig":"738"},{"size":807,"mtime":1736934861102,"results":"835","hashOfConfig":"738"},{"size":507,"mtime":1736934861071,"results":"836","hashOfConfig":"738"},{"size":24154,"mtime":1736934861071,"results":"837","hashOfConfig":"738"},{"size":3736,"mtime":1736934861071,"results":"838","hashOfConfig":"738"},{"size":18506,"mtime":1736934861102,"results":"839","hashOfConfig":"738"},{"size":9529,"mtime":1736934861071,"results":"840","hashOfConfig":"738"},{"size":5161,"mtime":1736934861071,"results":"841","hashOfConfig":"738"},{"size":2451,"mtime":1736934861087,"results":"842","hashOfConfig":"738"},{"size":18119,"mtime":1736934861024,"results":"843","hashOfConfig":"738"},{"size":1159,"mtime":1736934860884,"results":"844","hashOfConfig":"738"},{"size":455,"mtime":1740247497068,"results":"845","hashOfConfig":"738"},{"size":3413,"mtime":1736934861009,"results":"846","hashOfConfig":"738"},{"size":2233,"mtime":1736934861102,"results":"847","hashOfConfig":"738"},{"size":6178,"mtime":1736934861087,"results":"848","hashOfConfig":"738"},{"size":12467,"mtime":1736934860884,"results":"849","hashOfConfig":"738"},{"size":23568,"mtime":1740642925424,"results":"850","hashOfConfig":"738"},{"size":1500,"mtime":1736934861087,"results":"851","hashOfConfig":"738"},{"size":1841,"mtime":1736934861087,"results":"852","hashOfConfig":"738"},{"size":495,"mtime":1736934861071,"results":"853","hashOfConfig":"738"},{"size":696,"mtime":1736934861087,"results":"854","hashOfConfig":"738"},{"size":1666,"mtime":1736934860915,"results":"855","hashOfConfig":"738"},{"size":2894,"mtime":1736934860915,"results":"856","hashOfConfig":"738"},{"size":917,"mtime":1736934860915,"results":"857","hashOfConfig":"738"},{"size":386,"mtime":1736934860931,"results":"858","hashOfConfig":"738"},{"size":1241,"mtime":1736934860931,"results":"859","hashOfConfig":"738"},{"size":1827,"mtime":1740047696298,"results":"860","hashOfConfig":"738"},{"size":56313,"mtime":1740509030284,"results":"861","hashOfConfig":"738"},{"size":7819,"mtime":1739347230726,"results":"862","hashOfConfig":"738"},{"size":1906,"mtime":1736934861087,"results":"863","hashOfConfig":"738"},{"size":2973,"mtime":1736934860884,"results":"864","hashOfConfig":"738"},{"size":3064,"mtime":1736934860946,"results":"865","hashOfConfig":"738"},{"size":2141,"mtime":1736934860946,"results":"866","hashOfConfig":"738"},{"size":6018,"mtime":1736934860931,"results":"867","hashOfConfig":"738"},{"size":2484,"mtime":1740044224829,"results":"868","hashOfConfig":"738"},{"size":1093,"mtime":1736934860931,"results":"869","hashOfConfig":"738"},{"size":7960,"mtime":1740045930469,"results":"870","hashOfConfig":"738"},{"size":8799,"mtime":1736934861149,"results":"871","hashOfConfig":"738"},{"size":144,"mtime":1736934860884,"results":"872","hashOfConfig":"738"},{"size":8019,"mtime":1736934861149,"results":"873","hashOfConfig":"738"},{"size":1725,"mtime":1736934860915,"results":"874","hashOfConfig":"738"},{"size":8428,"mtime":1736934861024,"results":"875","hashOfConfig":"738"},{"size":5185,"mtime":1736934860899,"results":"876","hashOfConfig":"738"},{"size":15718,"mtime":1736934860931,"results":"877","hashOfConfig":"738"},{"size":15427,"mtime":1736934860931,"results":"878","hashOfConfig":"738"},{"size":21202,"mtime":1736934860931,"results":"879","hashOfConfig":"738"},{"size":1515,"mtime":1736934861040,"results":"880","hashOfConfig":"738"},{"size":16364,"mtime":1736934861087,"results":"881","hashOfConfig":"738"},{"size":13430,"mtime":1736934860978,"results":"882","hashOfConfig":"738"},{"size":1132,"mtime":1740642769741,"results":"883","hashOfConfig":"738"},{"size":16361,"mtime":1736934861102,"results":"884","hashOfConfig":"738"},{"size":707,"mtime":1736934860884,"results":"885","hashOfConfig":"738"},{"size":11221,"mtime":1736934861071,"results":"886","hashOfConfig":"738"},{"size":382,"mtime":1736934860884,"results":"887","hashOfConfig":"738"},{"size":445,"mtime":1736934861087,"results":"888","hashOfConfig":"738"},{"size":3379,"mtime":1736934861087,"results":"889","hashOfConfig":"738"},{"size":28860,"mtime":1739346721650,"results":"890","hashOfConfig":"738"},{"size":1754,"mtime":1736934860931,"results":"891","hashOfConfig":"738"},{"size":764,"mtime":1736934860915,"results":"892","hashOfConfig":"738"},{"size":1791,"mtime":1736934860915,"results":"893","hashOfConfig":"738"},{"size":1443,"mtime":1736934860915,"results":"894","hashOfConfig":"738"},{"size":1751,"mtime":1736934860915,"results":"895","hashOfConfig":"738"},{"size":923,"mtime":1736934860915,"results":"896","hashOfConfig":"738"},{"size":641,"mtime":1736934860915,"results":"897","hashOfConfig":"738"},{"size":1336,"mtime":1736934860915,"results":"898","hashOfConfig":"738"},{"size":2216,"mtime":1736934860931,"results":"899","hashOfConfig":"738"},{"size":2255,"mtime":1736934860931,"results":"900","hashOfConfig":"738"},{"size":669,"mtime":1736934860915,"results":"901","hashOfConfig":"738"},{"size":1520,"mtime":1740510237748,"results":"902","hashOfConfig":"738"},{"size":5808,"mtime":1736934861149,"results":"903","hashOfConfig":"738"},{"size":370,"mtime":1736934861134,"results":"904","hashOfConfig":"738"},{"size":1735,"mtime":1736934861118,"results":"905","hashOfConfig":"738"},{"size":1344,"mtime":1736934861118,"results":"906","hashOfConfig":"738"},{"size":9454,"mtime":1736934861118,"results":"907","hashOfConfig":"738"},{"size":1891,"mtime":1736934861149,"results":"908","hashOfConfig":"738"},{"size":1655,"mtime":1736934861149,"results":"909","hashOfConfig":"738"},{"size":2722,"mtime":1736934861149,"results":"910","hashOfConfig":"738"},{"size":3186,"mtime":1736934861149,"results":"911","hashOfConfig":"738"},{"size":6912,"mtime":1736934861102,"results":"912","hashOfConfig":"738"},{"size":896,"mtime":1736934860899,"results":"913","hashOfConfig":"738"},{"size":773,"mtime":1736934861040,"results":"914","hashOfConfig":"738"},{"size":867,"mtime":1736934861118,"results":"915","hashOfConfig":"738"},{"size":259,"mtime":1736934861118,"results":"916","hashOfConfig":"738"},{"size":9972,"mtime":1736934860884,"results":"917","hashOfConfig":"738"},{"size":1609,"mtime":1736934861087,"results":"918","hashOfConfig":"738"},{"size":2014,"mtime":1736934861087,"results":"919","hashOfConfig":"738"},{"size":1972,"mtime":1736934861040,"results":"920","hashOfConfig":"738"},{"size":579,"mtime":1736934861040,"results":"921","hashOfConfig":"738"},{"size":406,"mtime":1736934861040,"results":"922","hashOfConfig":"738"},{"size":1775,"mtime":1736934860899,"results":"923","hashOfConfig":"738"},{"size":1514,"mtime":1736934861040,"results":"924","hashOfConfig":"738"},{"size":1215,"mtime":1736934860899,"results":"925","hashOfConfig":"738"},{"size":3323,"mtime":1736934860899,"results":"926","hashOfConfig":"738"},{"size":1039,"mtime":1736934860899,"results":"927","hashOfConfig":"738"},{"size":3653,"mtime":1736934860899,"results":"928","hashOfConfig":"738"},{"size":2221,"mtime":1736934860899,"results":"929","hashOfConfig":"738"},{"size":1673,"mtime":1736934860899,"results":"930","hashOfConfig":"738"},{"size":1308,"mtime":1736934860899,"results":"931","hashOfConfig":"738"},{"size":2445,"mtime":1736934860899,"results":"932","hashOfConfig":"738"},{"size":625,"mtime":1736934860915,"results":"933","hashOfConfig":"738"},{"size":615,"mtime":1736934860915,"results":"934","hashOfConfig":"738"},{"size":677,"mtime":1736934860915,"results":"935","hashOfConfig":"738"},{"size":567,"mtime":1736934860931,"results":"936","hashOfConfig":"738"},{"size":6157,"mtime":1736934861040,"results":"937","hashOfConfig":"738"},{"size":1381,"mtime":1736934860931,"results":"938","hashOfConfig":"738"},{"size":27514,"mtime":1736934860915,"results":"939","hashOfConfig":"738"},{"size":2217,"mtime":1736934860915,"results":"940","hashOfConfig":"738"},{"size":1386,"mtime":1736934860931,"results":"941","hashOfConfig":"738"},{"size":1575,"mtime":1736934860931,"results":"942","hashOfConfig":"738"},{"size":1306,"mtime":1736934860915,"results":"943","hashOfConfig":"738"},{"size":2324,"mtime":1736934860899,"results":"944","hashOfConfig":"738"},{"size":3300,"mtime":1736934860915,"results":"945","hashOfConfig":"738"},{"size":1331,"mtime":1736934860915,"results":"946","hashOfConfig":"738"},{"size":5205,"mtime":1736941242587,"results":"947","hashOfConfig":"738"},{"size":2516,"mtime":1740646096742,"results":"948","hashOfConfig":"738"},{"size":1771,"mtime":1739347105082,"results":"949","hashOfConfig":"738"},{"size":906,"mtime":1740642606452,"results":"950","hashOfConfig":"738"},{"size":1607,"mtime":1740646463216,"results":"951","hashOfConfig":"738"},{"size":2364,"mtime":1740646336043,"results":"952","hashOfConfig":"738"},{"size":2710,"mtime":1740646378540,"results":"953","hashOfConfig":"738"},{"size":800,"mtime":1736934860884,"results":"954","hashOfConfig":"738"},{"size":640,"mtime":1736934861040,"results":"955","hashOfConfig":"738"},{"size":4136,"mtime":1736934861040,"results":"956","hashOfConfig":"738"},{"size":339,"mtime":1736934861040,"results":"957","hashOfConfig":"738"},{"size":1005,"mtime":1736934860931,"results":"958","hashOfConfig":"738"},{"size":1726,"mtime":1736934860915,"results":"959","hashOfConfig":"738"},{"size":1172,"mtime":1740645496690,"results":"960","hashOfConfig":"738"},{"size":651,"mtime":1740420616758,"results":"961","hashOfConfig":"738"},{"size":872,"mtime":1740644359525,"results":"962","hashOfConfig":"738"},{"size":1190,"mtime":1740508725690,"results":"963","hashOfConfig":"738"},{"size":1625,"mtime":1740418539559,"results":"964","hashOfConfig":"738"},{"size":586,"mtime":1736934861040,"results":"965","hashOfConfig":"738"},{"size":1433,"mtime":1736934861040,"results":"966","hashOfConfig":"738"},{"size":860,"mtime":1736934861040,"results":"967","hashOfConfig":"738"},{"size":948,"mtime":1736934861040,"results":"968","hashOfConfig":"738"},{"size":255,"mtime":1736934860884,"results":"969","hashOfConfig":"738"},{"size":3259,"mtime":1736934861118,"results":"970","hashOfConfig":"738"},{"size":1436,"mtime":1736934861040,"results":"971","hashOfConfig":"738"},{"size":999,"mtime":1736934861040,"results":"972","hashOfConfig":"738"},{"size":2866,"mtime":1736934861040,"results":"973","hashOfConfig":"738"},{"size":2112,"mtime":1736934861118,"results":"974","hashOfConfig":"738"},{"size":1359,"mtime":1736934861149,"results":"975","hashOfConfig":"738"},{"size":3779,"mtime":1736934861149,"results":"976","hashOfConfig":"738"},{"size":1636,"mtime":1736934860915,"results":"977","hashOfConfig":"738"},{"size":12633,"mtime":1736934861149,"results":"978","hashOfConfig":"738"},{"size":545,"mtime":1736934861102,"results":"979","hashOfConfig":"738"},{"size":697,"mtime":1736934861102,"results":"980","hashOfConfig":"738"},{"size":324,"mtime":1736934861134,"results":"981","hashOfConfig":"738"},{"size":4476,"mtime":1736934861165,"results":"982","hashOfConfig":"738"},{"size":9462,"mtime":1739347634661,"results":"983","hashOfConfig":"738"},{"size":5277,"mtime":1736934861165,"results":"984","hashOfConfig":"738"},{"size":2217,"mtime":1736934861165,"results":"985","hashOfConfig":"738"},{"size":1266,"mtime":1736934861118,"results":"986","hashOfConfig":"738"},{"size":4097,"mtime":1736934861118,"results":"987","hashOfConfig":"738"},{"size":791,"mtime":1736934860915,"results":"988","hashOfConfig":"738"},{"size":1953,"mtime":1736934861149,"results":"989","hashOfConfig":"738"},{"size":10493,"mtime":1736934861087,"results":"990","hashOfConfig":"738"},{"size":4357,"mtime":1736934861087,"results":"991","hashOfConfig":"738"},{"size":471,"mtime":1736934861102,"results":"992","hashOfConfig":"738"},{"size":1645,"mtime":1736934861040,"results":"993","hashOfConfig":"738"},{"size":2414,"mtime":1736934861040,"results":"994","hashOfConfig":"738"},{"size":6626,"mtime":1736934861040,"results":"995","hashOfConfig":"738"},{"size":2414,"mtime":1736934861040,"results":"996","hashOfConfig":"738"},{"size":1646,"mtime":1736934861040,"results":"997","hashOfConfig":"738"},{"size":6626,"mtime":1736934861040,"results":"998","hashOfConfig":"738"},{"size":1631,"mtime":1736934861040,"results":"999","hashOfConfig":"738"},{"size":6814,"mtime":1736934861040,"results":"1000","hashOfConfig":"738"},{"size":13419,"mtime":1736934860931,"results":"1001","hashOfConfig":"738"},{"size":18526,"mtime":1736934860931,"results":"1002","hashOfConfig":"738"},{"size":17993,"mtime":1736934860931,"results":"1003","hashOfConfig":"738"},{"size":25989,"mtime":1736934860931,"results":"1004","hashOfConfig":"738"},{"size":14443,"mtime":1736934860931,"results":"1005","hashOfConfig":"738"},{"size":20210,"mtime":1736934860931,"results":"1006","hashOfConfig":"738"},{"size":15422,"mtime":1736934860931,"results":"1007","hashOfConfig":"738"},{"size":18607,"mtime":1736934860931,"results":"1008","hashOfConfig":"738"},{"size":15788,"mtime":1736934860931,"results":"1009","hashOfConfig":"738"},{"size":11457,"mtime":1736934861040,"results":"1010","hashOfConfig":"738"},{"size":5981,"mtime":1736934860899,"results":"1011","hashOfConfig":"738"},{"size":18930,"mtime":1736934860899,"results":"1012","hashOfConfig":"738"},{"size":5387,"mtime":1736934860899,"results":"1013","hashOfConfig":"738"},{"size":2140,"mtime":1736934861009,"results":"1014","hashOfConfig":"738"},{"size":8193,"mtime":1736934860899,"results":"1015","hashOfConfig":"738"},{"size":3573,"mtime":1736934861024,"results":"1016","hashOfConfig":"738"},{"size":3965,"mtime":1736934861009,"results":"1017","hashOfConfig":"738"},{"size":2582,"mtime":1736934860915,"results":"1018","hashOfConfig":"738"},{"size":425,"mtime":1736934861165,"results":"1019","hashOfConfig":"738"},{"size":1105,"mtime":1736934861102,"results":"1020","hashOfConfig":"738"},{"size":468,"mtime":1736934861102,"results":"1021","hashOfConfig":"738"},{"size":1917,"mtime":1736934861102,"results":"1022","hashOfConfig":"738"},{"size":5693,"mtime":1736934861024,"results":"1023","hashOfConfig":"738"},{"size":891,"mtime":1736934861024,"results":"1024","hashOfConfig":"738"},{"size":8204,"mtime":1736934861118,"results":"1025","hashOfConfig":"738"},{"size":5077,"mtime":1736934861024,"results":"1026","hashOfConfig":"738"},{"size":2507,"mtime":1736934861165,"results":"1027","hashOfConfig":"738"},{"size":1562,"mtime":1736934861149,"results":"1028","hashOfConfig":"738"},{"size":1560,"mtime":1736934861149,"results":"1029","hashOfConfig":"738"},{"size":3052,"mtime":1736934861149,"results":"1030","hashOfConfig":"738"},{"size":1519,"mtime":1736934860915,"results":"1031","hashOfConfig":"738"},{"size":2327,"mtime":1736934860915,"results":"1032","hashOfConfig":"738"},{"size":1735,"mtime":1736934861009,"results":"1033","hashOfConfig":"738"},{"size":2612,"mtime":1736934861009,"results":"1034","hashOfConfig":"738"},{"size":5465,"mtime":1736934861009,"results":"1035","hashOfConfig":"738"},{"size":17593,"mtime":1736941242836,"results":"1036","hashOfConfig":"738"},{"size":2207,"mtime":1736934860915,"results":"1037","hashOfConfig":"738"},{"size":3839,"mtime":1736934860915,"results":"1038","hashOfConfig":"738"},{"size":1901,"mtime":1736934860915,"results":"1039","hashOfConfig":"738"},{"size":566,"mtime":1736934860946,"results":"1040","hashOfConfig":"738"},{"size":2787,"mtime":1736934860946,"results":"1041","hashOfConfig":"738"},{"size":1778,"mtime":1736934860946,"results":"1042","hashOfConfig":"738"},{"size":406,"mtime":1736934861040,"results":"1043","hashOfConfig":"738"},{"size":816,"mtime":1736934861040,"results":"1044","hashOfConfig":"738"},{"size":1514,"mtime":1736934861040,"results":"1045","hashOfConfig":"738"},{"size":579,"mtime":1736934861040,"results":"1046","hashOfConfig":"738"},{"size":1972,"mtime":1736934861040,"results":"1047","hashOfConfig":"738"},{"size":6975,"mtime":1736934861040,"results":"1048","hashOfConfig":"738"},{"size":18110,"mtime":1736934860946,"results":"1049","hashOfConfig":"738"},{"size":27012,"mtime":1740252592392,"results":"1050","hashOfConfig":"738"},{"size":39266,"mtime":1736934860946,"results":"1051","hashOfConfig":"738"},{"size":1584,"mtime":1736934860899,"results":"1052","hashOfConfig":"738"},{"size":22898,"mtime":1736934860946,"results":"1053","hashOfConfig":"738"},{"size":39681,"mtime":1736934860946,"results":"1054","hashOfConfig":"738"},{"size":27696,"mtime":1740252592402,"results":"1055","hashOfConfig":"738"},{"size":3489,"mtime":1736934860899,"results":"1056","hashOfConfig":"738"},{"size":4058,"mtime":1736934861024,"results":"1057","hashOfConfig":"738"},{"size":262,"mtime":1736934860884,"results":"1058","hashOfConfig":"738"},{"size":4131,"mtime":1736934861024,"results":"1059","hashOfConfig":"738"},{"size":1541,"mtime":1736934860915,"results":"1060","hashOfConfig":"738"},{"size":4105,"mtime":1736934861024,"results":"1061","hashOfConfig":"738"},{"size":3574,"mtime":1736934861149,"results":"1062","hashOfConfig":"738"},{"size":215,"mtime":1736934860931,"results":"1063","hashOfConfig":"738"},{"size":47195,"mtime":1736934860946,"results":"1064","hashOfConfig":"738"},{"size":49589,"mtime":1736934860946,"results":"1065","hashOfConfig":"738"},{"size":1353,"mtime":1736934860884,"results":"1066","hashOfConfig":"738"},{"size":36324,"mtime":1736934860962,"results":"1067","hashOfConfig":"738"},{"size":51418,"mtime":1736934860962,"results":"1068","hashOfConfig":"738"},{"size":1315,"mtime":1736934860915,"results":"1069","hashOfConfig":"738"},{"size":2654,"mtime":1736934860915,"results":"1070","hashOfConfig":"738"},{"size":881,"mtime":1736934860915,"results":"1071","hashOfConfig":"738"},{"size":1250,"mtime":1736934860915,"results":"1072","hashOfConfig":"738"},{"size":1864,"mtime":1736934860915,"results":"1073","hashOfConfig":"738"},{"size":746,"mtime":1736934860915,"results":"1074","hashOfConfig":"738"},{"size":2719,"mtime":1736934861040,"results":"1075","hashOfConfig":"738"},{"size":640,"mtime":1736934861056,"results":"1076","hashOfConfig":"738"},{"size":339,"mtime":1736934861040,"results":"1077","hashOfConfig":"738"},{"size":1380,"mtime":1736934860915,"results":"1078","hashOfConfig":"738"},{"size":1588,"mtime":1736934861118,"results":"1079","hashOfConfig":"738"},{"size":20171,"mtime":1740252592390,"results":"1080","hashOfConfig":"738"},{"size":32088,"mtime":1736934860962,"results":"1081","hashOfConfig":"738"},{"size":22659,"mtime":1740252592389,"results":"1082","hashOfConfig":"738"},{"size":19397,"mtime":1740252592390,"results":"1083","hashOfConfig":"738"},{"size":8755,"mtime":1740252592392,"results":"1084","hashOfConfig":"738"},{"size":8791,"mtime":1740252592397,"results":"1085","hashOfConfig":"738"},{"size":8751,"mtime":1740252592396,"results":"1086","hashOfConfig":"738"},{"size":9929,"mtime":1736934860946,"results":"1087","hashOfConfig":"738"},{"size":8811,"mtime":1740252592394,"results":"1088","hashOfConfig":"738"},{"size":12322,"mtime":1740252592392,"results":"1089","hashOfConfig":"738"},{"size":39698,"mtime":1740252592384,"results":"1090","hashOfConfig":"738"},{"size":22013,"mtime":1736934860962,"results":"1091","hashOfConfig":"738"},{"size":50519,"mtime":1736934860962,"results":"1092","hashOfConfig":"738"},{"size":53261,"mtime":1740252592391,"results":"1093","hashOfConfig":"738"},{"size":1916,"mtime":1736934861118,"results":"1094","hashOfConfig":"738"},{"size":8769,"mtime":1740252592401,"results":"1095","hashOfConfig":"738"},{"size":9964,"mtime":1736934860946,"results":"1096","hashOfConfig":"738"},{"size":8779,"mtime":1740252592403,"results":"1097","hashOfConfig":"738"},{"size":8825,"mtime":1740252592404,"results":"1098","hashOfConfig":"738"},{"size":8856,"mtime":1740252592404,"results":"1099","hashOfConfig":"738"},{"size":4279,"mtime":1740047507831,"results":"1100","hashOfConfig":"738"},{"size":12371,"mtime":1740252592397,"results":"1101","hashOfConfig":"738"},{"size":6285,"mtime":1736934861024,"results":"1102","hashOfConfig":"738"},{"size":3290,"mtime":1736934861024,"results":"1103","hashOfConfig":"738"},{"size":1235,"mtime":1736934861024,"results":"1104","hashOfConfig":"738"},{"size":2210,"mtime":1736934861118,"results":"1105","hashOfConfig":"738"},{"size":3344,"mtime":1736934861118,"results":"1106","hashOfConfig":"738"},{"size":41235,"mtime":1736934861118,"results":"1107","hashOfConfig":"738"},{"size":9205,"mtime":1736934860884,"results":"1108","hashOfConfig":"738"},{"size":16761,"mtime":1736934860978,"results":"1109","hashOfConfig":"738"},{"size":16579,"mtime":1736934860978,"results":"1110","hashOfConfig":"738"},{"size":18902,"mtime":1736934860978,"results":"1111","hashOfConfig":"738"},{"size":14570,"mtime":1736934860978,"results":"1112","hashOfConfig":"738"},{"size":3718,"mtime":1736934861056,"results":"1113","hashOfConfig":"738"},{"size":11591,"mtime":1736934861056,"results":"1114","hashOfConfig":"738"},{"size":7586,"mtime":1736934861056,"results":"1115","hashOfConfig":"738"},{"size":10623,"mtime":1736934861056,"results":"1116","hashOfConfig":"738"},{"size":27273,"mtime":1736934861056,"results":"1117","hashOfConfig":"738"},{"size":406,"mtime":1736934861087,"results":"1118","hashOfConfig":"738"},{"size":674,"mtime":1736934861087,"results":"1119","hashOfConfig":"738"},{"size":5017,"mtime":1736934861087,"results":"1120","hashOfConfig":"738"},{"size":6433,"mtime":1736934861102,"results":"1121","hashOfConfig":"738"},{"size":471,"mtime":1736934860915,"results":"1122","hashOfConfig":"738"},{"size":821,"mtime":1736934860915,"results":"1123","hashOfConfig":"738"},{"size":1310,"mtime":1736934860915,"results":"1124","hashOfConfig":"738"},{"size":886,"mtime":1736934861040,"results":"1125","hashOfConfig":"738"},{"size":948,"mtime":1736934861040,"results":"1126","hashOfConfig":"738"},{"size":586,"mtime":1736934861056,"results":"1127","hashOfConfig":"738"},{"size":1903,"mtime":1736934861056,"results":"1128","hashOfConfig":"738"},{"size":2107,"mtime":1736934861165,"results":"1129","hashOfConfig":"738"},{"size":4835,"mtime":1736934860915,"results":"1130","hashOfConfig":"738"},{"size":479,"mtime":1736934861102,"results":"1131","hashOfConfig":"738"},{"size":20621,"mtime":1736934860899,"results":"1132","hashOfConfig":"738"},{"size":4316,"mtime":1736934860899,"results":"1133","hashOfConfig":"738"},{"size":22753,"mtime":1736934860899,"results":"1134","hashOfConfig":"738"},{"size":1513,"mtime":1736934861024,"results":"1135","hashOfConfig":"738"},{"size":11026,"mtime":1736934860962,"results":"1136","hashOfConfig":"738"},{"size":13004,"mtime":1740252592382,"results":"1137","hashOfConfig":"738"},{"size":13029,"mtime":1740252592384,"results":"1138","hashOfConfig":"738"},{"size":13051,"mtime":1740252592379,"results":"1139","hashOfConfig":"738"},{"size":17963,"mtime":1740252592381,"results":"1140","hashOfConfig":"738"},{"size":738,"mtime":1736934861118,"results":"1141","hashOfConfig":"738"},{"size":789,"mtime":1736934861118,"results":"1142","hashOfConfig":"738"},{"size":536,"mtime":1736934861118,"results":"1143","hashOfConfig":"738"},{"size":13060,"mtime":1740252592382,"results":"1144","hashOfConfig":"738"},{"size":3158,"mtime":1736934861118,"results":"1145","hashOfConfig":"738"},{"size":4289,"mtime":1736934861134,"results":"1146","hashOfConfig":"738"},{"size":4140,"mtime":1736934861118,"results":"1147","hashOfConfig":"738"},{"size":7335,"mtime":1736934861102,"results":"1148","hashOfConfig":"738"},{"size":16200,"mtime":1736934861102,"results":"1149","hashOfConfig":"738"},{"size":7095,"mtime":1736934861102,"results":"1150","hashOfConfig":"738"},{"size":14232,"mtime":1736934861102,"results":"1151","hashOfConfig":"738"},{"size":908,"mtime":1736934861118,"results":"1152","hashOfConfig":"738"},{"size":5444,"mtime":1736934861165,"results":"1153","hashOfConfig":"738"},{"size":3728,"mtime":1736934861149,"results":"1154","hashOfConfig":"738"},{"size":4741,"mtime":1736934861134,"results":"1155","hashOfConfig":"738"},{"size":3473,"mtime":1736934861118,"results":"1156","hashOfConfig":"738"},{"size":4171,"mtime":1736934861118,"results":"1157","hashOfConfig":"738"},{"size":3822,"mtime":1736934861134,"results":"1158","hashOfConfig":"738"},{"size":3541,"mtime":1736934861134,"results":"1159","hashOfConfig":"738"},{"size":4007,"mtime":1736934861134,"results":"1160","hashOfConfig":"738"},{"size":6562,"mtime":1736934861165,"results":"1161","hashOfConfig":"738"},{"size":6172,"mtime":1736934861165,"results":"1162","hashOfConfig":"738"},{"size":7112,"mtime":1736934861165,"results":"1163","hashOfConfig":"738"},{"size":10533,"mtime":1736934861071,"results":"1164","hashOfConfig":"738"},{"size":1604,"mtime":1736934861087,"results":"1165","hashOfConfig":"738"},{"size":1689,"mtime":1736934860884,"results":"1166","hashOfConfig":"738"},{"size":26280,"mtime":1736934861102,"results":"1167","hashOfConfig":"738"},{"size":22768,"mtime":1736934861056,"results":"1168","hashOfConfig":"738"},{"size":16330,"mtime":1736934860884,"results":"1169","hashOfConfig":"738"},{"size":6983,"mtime":1736934861056,"results":"1170","hashOfConfig":"738"},{"size":5826,"mtime":1736934861056,"results":"1171","hashOfConfig":"738"},{"size":6997,"mtime":1736936556878,"results":"1172","hashOfConfig":"738"},{"size":3616,"mtime":1736934861056,"results":"1173","hashOfConfig":"738"},{"size":6794,"mtime":1736934861056,"results":"1174","hashOfConfig":"738"},{"size":4584,"mtime":1736934861087,"results":"1175","hashOfConfig":"738"},{"size":872,"mtime":1736934861056,"results":"1176","hashOfConfig":"738"},{"size":1231,"mtime":1736934861087,"results":"1177","hashOfConfig":"738"},{"size":654,"mtime":1736934861087,"results":"1178","hashOfConfig":"738"},{"size":19675,"mtime":1736934861040,"results":"1179","hashOfConfig":"738"},{"size":11828,"mtime":1740252592421,"results":"1180","hashOfConfig":"738"},{"size":3796,"mtime":1736934861087,"results":"1181","hashOfConfig":"738"},{"size":3451,"mtime":1736934861102,"results":"1182","hashOfConfig":"738"},{"size":3333,"mtime":1736934861024,"results":"1183","hashOfConfig":"738"},{"size":3732,"mtime":1736934861024,"results":"1184","hashOfConfig":"738"},{"size":7217,"mtime":1736934861024,"results":"1185","hashOfConfig":"738"},{"size":3728,"mtime":1736934861024,"results":"1186","hashOfConfig":"738"},{"size":11723,"mtime":1740252592413,"results":"1187","hashOfConfig":"738"},{"size":13503,"mtime":1740252592409,"results":"1188","hashOfConfig":"738"},{"size":10359,"mtime":1736934861009,"results":"1189","hashOfConfig":"738"},{"size":17715,"mtime":1736941242837,"results":"1190","hashOfConfig":"738"},{"size":5817,"mtime":1740252592409,"results":"1191","hashOfConfig":"738"},{"size":9137,"mtime":1739346746781,"results":"1192","hashOfConfig":"738"},{"size":5863,"mtime":1740252592409,"results":"1193","hashOfConfig":"738"},{"size":11395,"mtime":1740252592409,"results":"1194","hashOfConfig":"738"},{"size":8355,"mtime":1740252592413,"results":"1195","hashOfConfig":"738"},{"size":9638,"mtime":1740252592410,"results":"1196","hashOfConfig":"738"},{"size":10199,"mtime":1740252592413,"results":"1197","hashOfConfig":"738"},{"size":11854,"mtime":1740252592411,"results":"1198","hashOfConfig":"738"},{"size":11295,"mtime":1736934861009,"results":"1199","hashOfConfig":"738"},{"size":12169,"mtime":1740252592411,"results":"1200","hashOfConfig":"738"},{"size":8030,"mtime":1736934861009,"results":"1201","hashOfConfig":"738"},{"size":8892,"mtime":1740252592413,"results":"1202","hashOfConfig":"738"},{"size":7978,"mtime":1736934861009,"results":"1203","hashOfConfig":"738"},{"size":4092,"mtime":1736934861087,"results":"1204","hashOfConfig":"738"},{"size":2445,"mtime":1736934860993,"results":"1205","hashOfConfig":"738"},{"size":8287,"mtime":1736934860884,"results":"1206","hashOfConfig":"738"},{"size":25486,"mtime":1736934861102,"results":"1207","hashOfConfig":"738"},{"size":3689,"mtime":1736934861087,"results":"1208","hashOfConfig":"738"},{"size":8709,"mtime":1740252592413,"results":"1209","hashOfConfig":"738"},{"size":12396,"mtime":1736934861087,"results":"1210","hashOfConfig":"738"},{"size":1436,"mtime":1736934861056,"results":"1211","hashOfConfig":"738"},{"size":1273,"mtime":1736934861040,"results":"1212","hashOfConfig":"738"},{"size":7473,"mtime":1740252592416,"results":"1213","hashOfConfig":"738"},{"size":2323,"mtime":1736934861040,"results":"1214","hashOfConfig":"738"},{"size":901,"mtime":1736934861149,"results":"1215","hashOfConfig":"738"},{"size":17988,"mtime":1740252592408,"results":"1216","hashOfConfig":"738"},{"size":6423,"mtime":1736934860993,"results":"1217","hashOfConfig":"738"},{"size":20282,"mtime":1740252592408,"results":"1218","hashOfConfig":"738"},{"size":8644,"mtime":1740252592413,"results":"1219","hashOfConfig":"738"},{"size":6231,"mtime":1736934860993,"results":"1220","hashOfConfig":"738"},{"size":9471,"mtime":1740252592407,"results":"1221","hashOfConfig":"738"},{"size":28435,"mtime":1736934861087,"results":"1222","hashOfConfig":"738"},{"size":21669,"mtime":1736934861024,"results":"1223","hashOfConfig":"738"},{"size":1360,"mtime":1736934861118,"results":"1224","hashOfConfig":"738"},{"size":893,"mtime":1736934861118,"results":"1225","hashOfConfig":"738"},{"size":1080,"mtime":1736934861118,"results":"1226","hashOfConfig":"738"},{"size":1038,"mtime":1736934861118,"results":"1227","hashOfConfig":"738"},{"size":22327,"mtime":1736934861056,"results":"1228","hashOfConfig":"738"},{"size":491,"mtime":1736934861118,"results":"1229","hashOfConfig":"738"},{"size":649,"mtime":1736934861165,"results":"1230","hashOfConfig":"738"},{"size":1038,"mtime":1736934861165,"results":"1231","hashOfConfig":"738"},{"size":1071,"mtime":1736934861165,"results":"1232","hashOfConfig":"738"},{"size":16097,"mtime":1740252592379,"results":"1233","hashOfConfig":"738"},{"size":625,"mtime":1736934861165,"results":"1234","hashOfConfig":"738"},{"size":7590,"mtime":1736934861118,"results":"1235","hashOfConfig":"738"},{"size":1038,"mtime":1736934861165,"results":"1236","hashOfConfig":"738"},{"size":1074,"mtime":1736934861165,"results":"1237","hashOfConfig":"738"},{"size":14236,"mtime":1740252592376,"results":"1238","hashOfConfig":"738"},{"size":607,"mtime":1736934861165,"results":"1239","hashOfConfig":"738"},{"size":1038,"mtime":1736934861165,"results":"1240","hashOfConfig":"738"},{"size":1073,"mtime":1736934861165,"results":"1241","hashOfConfig":"738"},{"size":3412,"mtime":1736934861087,"results":"1242","hashOfConfig":"738"},{"size":3171,"mtime":1736934860993,"results":"1243","hashOfConfig":"738"},{"size":3140,"mtime":1740252592415,"results":"1244","hashOfConfig":"738"},{"size":1228,"mtime":1736934861118,"results":"1245","hashOfConfig":"738"},{"size":8266,"mtime":1739346746781,"results":"1246","hashOfConfig":"738"},{"size":23367,"mtime":1736934861087,"results":"1247","hashOfConfig":"738"},{"size":789,"mtime":1736934861009,"results":"1248","hashOfConfig":"738"},{"size":24081,"mtime":1736934861087,"results":"1249","hashOfConfig":"738"},{"size":2948,"mtime":1736934860884,"results":"1250","hashOfConfig":"738"},{"size":15562,"mtime":1740252592379,"results":"1251","hashOfConfig":"738"},{"size":1044,"mtime":1736934861134,"results":"1252","hashOfConfig":"738"},{"size":1077,"mtime":1736934861134,"results":"1253","hashOfConfig":"738"},{"size":1265,"mtime":1736934861134,"results":"1254","hashOfConfig":"738"},{"size":764,"mtime":1736934861134,"results":"1255","hashOfConfig":"738"},{"size":24391,"mtime":1740252592379,"results":"1256","hashOfConfig":"738"},{"size":258,"mtime":1736934861134,"results":"1257","hashOfConfig":"738"},{"size":1118,"mtime":1736934861149,"results":"1258","hashOfConfig":"738"},{"size":1265,"mtime":1736934861134,"results":"1259","hashOfConfig":"738"},{"size":14972,"mtime":1740252592379,"results":"1260","hashOfConfig":"738"},{"size":404,"mtime":1736934861149,"results":"1261","hashOfConfig":"738"},{"size":3909,"mtime":1736934861134,"results":"1262","hashOfConfig":"738"},{"size":13906,"mtime":1740252592378,"results":"1263","hashOfConfig":"738"},{"size":766,"mtime":1736934861134,"results":"1264","hashOfConfig":"738"},{"size":1072,"mtime":1736934861134,"results":"1265","hashOfConfig":"738"},{"size":1038,"mtime":1736934861134,"results":"1266","hashOfConfig":"738"},{"size":20869,"mtime":1736934861087,"results":"1267","hashOfConfig":"738"},{"size":7002,"mtime":1736934861024,"results":"1268","hashOfConfig":"738"},{"size":6487,"mtime":1736934861024,"results":"1269","hashOfConfig":"738"},{"size":5234,"mtime":1736934860993,"results":"1270","hashOfConfig":"738"},{"size":21133,"mtime":1736934860993,"results":"1271","hashOfConfig":"738"},{"size":6716,"mtime":1736934861024,"results":"1272","hashOfConfig":"738"},{"size":4112,"mtime":1736934861087,"results":"1273","hashOfConfig":"738"},{"size":6644,"mtime":1736934861024,"results":"1274","hashOfConfig":"738"},{"size":3939,"mtime":1736934861056,"results":"1275","hashOfConfig":"738"},{"size":6496,"mtime":1736934861024,"results":"1276","hashOfConfig":"738"},{"size":6480,"mtime":1736934861024,"results":"1277","hashOfConfig":"738"},{"size":3307,"mtime":1736934861056,"results":"1278","hashOfConfig":"738"},{"size":3438,"mtime":1736934861056,"results":"1279","hashOfConfig":"738"},{"size":6018,"mtime":1736934861056,"results":"1280","hashOfConfig":"738"},{"size":4507,"mtime":1736934861056,"results":"1281","hashOfConfig":"738"},{"size":19230,"mtime":1740252592376,"results":"1282","hashOfConfig":"738"},{"size":2052,"mtime":1736934861056,"results":"1283","hashOfConfig":"738"},{"size":6296,"mtime":1736934861149,"results":"1284","hashOfConfig":"738"},{"size":2190,"mtime":1736934861149,"results":"1285","hashOfConfig":"738"},{"size":3716,"mtime":1736934861134,"results":"1286","hashOfConfig":"738"},{"size":33491,"mtime":1740252592376,"results":"1287","hashOfConfig":"738"},{"size":764,"mtime":1736934861165,"results":"1288","hashOfConfig":"738"},{"size":1032,"mtime":1736934861165,"results":"1289","hashOfConfig":"738"},{"size":1129,"mtime":1736934861165,"results":"1290","hashOfConfig":"738"},{"size":1758,"mtime":1736934861165,"results":"1291","hashOfConfig":"738"},{"size":17631,"mtime":1736934861118,"results":"1292","hashOfConfig":"738"},{"size":2354,"mtime":1736934861165,"results":"1293","hashOfConfig":"738"},{"size":11826,"mtime":1736934861165,"results":"1294","hashOfConfig":"738"},{"size":776,"mtime":1736934861118,"results":"1295","hashOfConfig":"738"},{"size":1931,"mtime":1736934861118,"results":"1296","hashOfConfig":"738"},{"size":1699,"mtime":1736934861118,"results":"1297","hashOfConfig":"738"},{"size":1321,"mtime":1736934861118,"results":"1298","hashOfConfig":"738"},{"size":2959,"mtime":1736934861134,"results":"1299","hashOfConfig":"738"},{"size":1040,"mtime":1736934861134,"results":"1300","hashOfConfig":"738"},{"size":1044,"mtime":1736934861134,"results":"1301","hashOfConfig":"738"},{"size":1044,"mtime":1736934861134,"results":"1302","hashOfConfig":"738"},{"size":1072,"mtime":1736934861134,"results":"1303","hashOfConfig":"738"},{"size":1044,"mtime":1736934861134,"results":"1304","hashOfConfig":"738"},{"size":766,"mtime":1736934861134,"results":"1305","hashOfConfig":"738"},{"size":17357,"mtime":1740252592378,"results":"1306","hashOfConfig":"738"},{"size":1044,"mtime":1736934861134,"results":"1307","hashOfConfig":"738"},{"size":5366,"mtime":1736934861087,"results":"1308","hashOfConfig":"738"},{"size":7802,"mtime":1736934860884,"results":"1309","hashOfConfig":"738"},{"size":9694,"mtime":1736934860884,"results":"1310","hashOfConfig":"738"},{"size":3855,"mtime":1736934861024,"results":"1311","hashOfConfig":"738"},{"size":8284,"mtime":1736934860884,"results":"1312","hashOfConfig":"738"},{"size":8509,"mtime":1736934861071,"results":"1313","hashOfConfig":"738"},{"size":23164,"mtime":1740251810827,"results":"1314","hashOfConfig":"738"},{"size":14649,"mtime":1736934861009,"results":"1315","hashOfConfig":"738"},{"size":18362,"mtime":1739347013260,"results":"1316","hashOfConfig":"738"},{"size":21654,"mtime":1736934861009,"results":"1317","hashOfConfig":"738"},{"size":287,"mtime":1736934861149,"results":"1318","hashOfConfig":"738"},{"size":494,"mtime":1736934861149,"results":"1319","hashOfConfig":"738"},{"size":2637,"mtime":1736934861149,"results":"1320","hashOfConfig":"738"},{"size":14167,"mtime":1736934860884,"results":"1321","hashOfConfig":"738"},{"size":6212,"mtime":1736934860868,"results":"1322","hashOfConfig":"738"},{"size":7667,"mtime":1736934860868,"results":"1323","hashOfConfig":"738"},{"size":33255,"mtime":1736934860978,"results":"1324","hashOfConfig":"738"},{"size":579,"mtime":1739346746781,"results":"1325","hashOfConfig":"738"},{"size":17492,"mtime":1736934860978,"results":"1326","hashOfConfig":"738"},{"size":24743,"mtime":1740253305229,"results":"1327","hashOfConfig":"738"},{"size":1392,"mtime":1736934861087,"results":"1328","hashOfConfig":"738"},{"size":8380,"mtime":1736934861087,"results":"1329","hashOfConfig":"738"},{"size":4348,"mtime":1736934861009,"results":"1330","hashOfConfig":"738"},{"size":4530,"mtime":1736934861009,"results":"1331","hashOfConfig":"738"},{"size":3825,"mtime":1736934861009,"results":"1332","hashOfConfig":"738"},{"size":4631,"mtime":1736934861009,"results":"1333","hashOfConfig":"738"},{"size":2347,"mtime":1736934860884,"results":"1334","hashOfConfig":"738"},{"size":2287,"mtime":1736934861134,"results":"1335","hashOfConfig":"738"},{"size":1921,"mtime":1736934861134,"results":"1336","hashOfConfig":"738"},{"size":671,"mtime":1736934861134,"results":"1337","hashOfConfig":"738"},{"size":1331,"mtime":1736934861134,"results":"1338","hashOfConfig":"738"},{"size":324,"mtime":1736934861134,"results":"1339","hashOfConfig":"738"},{"size":1409,"mtime":1736934861134,"results":"1340","hashOfConfig":"738"},{"size":2050,"mtime":1736934861134,"results":"1341","hashOfConfig":"738"},{"size":4589,"mtime":1736934861056,"results":"1342","hashOfConfig":"738"},{"size":489,"mtime":1736934861024,"results":"1343","hashOfConfig":"738"},{"size":13901,"mtime":1736941242833,"results":"1344","hashOfConfig":"738"},{"size":1442,"mtime":1736934861134,"results":"1345","hashOfConfig":"738"},{"size":2117,"mtime":1736934861134,"results":"1346","hashOfConfig":"738"},{"size":1080,"mtime":1736934861134,"results":"1347","hashOfConfig":"738"},{"size":1009,"mtime":1736934861134,"results":"1348","hashOfConfig":"738"},{"size":285,"mtime":1736934861165,"results":"1349","hashOfConfig":"738"},{"size":2050,"mtime":1736934861165,"results":"1350","hashOfConfig":"738"},{"size":680,"mtime":1736934861134,"results":"1351","hashOfConfig":"738"},{"size":3274,"mtime":1736934861165,"results":"1352","hashOfConfig":"738"},{"size":1848,"mtime":1736934861149,"results":"1353","hashOfConfig":"738"},{"size":2172,"mtime":1736934861165,"results":"1354","hashOfConfig":"738"},{"size":2200,"mtime":1736934861118,"results":"1355","hashOfConfig":"738"},{"size":8364,"mtime":1736934861118,"results":"1356","hashOfConfig":"738"},{"size":1123,"mtime":1736934861134,"results":"1357","hashOfConfig":"738"},{"size":1348,"mtime":1736934861149,"results":"1358","hashOfConfig":"738"},{"size":776,"mtime":1736934861149,"results":"1359","hashOfConfig":"738"},{"size":1967,"mtime":1736934861134,"results":"1360","hashOfConfig":"738"},{"size":2050,"mtime":1736934861134,"results":"1361","hashOfConfig":"738"},{"size":2414,"mtime":1736934860884,"results":"1362","hashOfConfig":"738"},{"size":18415,"mtime":1736934860899,"results":"1363","hashOfConfig":"738"},{"size":3549,"mtime":1736934860884,"results":"1364","hashOfConfig":"738"},{"size":20262,"mtime":1736934861071,"results":"1365","hashOfConfig":"738"},{"size":8106,"mtime":1736934861009,"results":"1366","hashOfConfig":"738"},{"size":18323,"mtime":1736934861009,"results":"1367","hashOfConfig":"738"},{"size":18046,"mtime":1736934861009,"results":"1368","hashOfConfig":"738"},{"size":18210,"mtime":1736934861009,"results":"1369","hashOfConfig":"738"},{"size":6895,"mtime":1740251494014,"results":"1370","hashOfConfig":"738"},{"size":6924,"mtime":1736934860993,"results":"1371","hashOfConfig":"738"},{"size":18765,"mtime":1736934861009,"results":"1372","hashOfConfig":"738"},{"size":6699,"mtime":1736934861009,"results":"1373","hashOfConfig":"738"},{"size":6635,"mtime":1736934860993,"results":"1374","hashOfConfig":"738"},{"size":6917,"mtime":1736941385866,"results":"1375","hashOfConfig":"738"},{"size":11872,"mtime":1736934860993,"results":"1376","hashOfConfig":"738"},{"size":270,"mtime":1736934861149,"results":"1377","hashOfConfig":"738"},{"size":459,"mtime":1736934861149,"results":"1378","hashOfConfig":"738"},{"size":9205,"mtime":1736934860884,"results":"1379","hashOfConfig":"738"},{"size":1858,"mtime":1736934860978,"results":"1380","hashOfConfig":"738"},{"size":3334,"mtime":1736934860978,"results":"1381","hashOfConfig":"738"},{"size":19732,"mtime":1740252592373,"results":"1382","hashOfConfig":"738"},{"size":21093,"mtime":1736934860978,"results":"1383","hashOfConfig":"738"},{"size":16904,"mtime":1740252592373,"results":"1384","hashOfConfig":"738"},{"size":26793,"mtime":1736934860993,"results":"1385","hashOfConfig":"738"},{"size":23547,"mtime":1740252592373,"results":"1386","hashOfConfig":"738"},{"size":28301,"mtime":1736934860993,"results":"1387","hashOfConfig":"738"},{"size":22670,"mtime":1740252592369,"results":"1388","hashOfConfig":"738"},{"size":3786,"mtime":1736934861134,"results":"1389","hashOfConfig":"738"},{"size":28779,"mtime":1740252592372,"results":"1390","hashOfConfig":"738"},{"size":22664,"mtime":1740252592369,"results":"1391","hashOfConfig":"738"},{"size":23765,"mtime":1740252592369,"results":"1392","hashOfConfig":"738"},{"size":18315,"mtime":1739346746786,"results":"1393","hashOfConfig":"738"},{"size":3241,"mtime":1736934860868,"results":"1394","hashOfConfig":"738"},{"size":22898,"mtime":1736934860978,"results":"1395","hashOfConfig":"738"},{"size":26297,"mtime":1740252592369,"results":"1396","hashOfConfig":"738"},{"size":28813,"mtime":1740252592371,"results":"1397","hashOfConfig":"738"},{"size":40983,"mtime":1740252592421,"results":"1398","hashOfConfig":"738"},{"size":45641,"mtime":1740252592371,"results":"1399","hashOfConfig":"738"},{"size":18963,"mtime":1740252592421,"results":"1400","hashOfConfig":"738"},{"size":22942,"mtime":1736934860868,"results":"1401","hashOfConfig":"738"},{"size":1515,"mtime":1736934861149,"results":"1402","hashOfConfig":"738"},{"size":9612,"mtime":1736934860868,"results":"1403","hashOfConfig":"738"},{"size":1569,"mtime":1736934861149,"results":"1404","hashOfConfig":"738"},{"size":4449,"mtime":1740252592379,"results":"1405","hashOfConfig":"738"},{"size":411,"mtime":1736934861149,"results":"1406","hashOfConfig":"738"},{"size":10889,"mtime":1740248588518,"results":"1407","hashOfConfig":"738"},{"size":6558,"mtime":1736934861134,"results":"1408","hashOfConfig":"738"},{"size":8686,"mtime":1740251987144,"results":"1409","hashOfConfig":"738"},{"size":10168,"mtime":1740248496633,"results":"1410","hashOfConfig":"738"},{"size":4933,"mtime":1736934861056,"results":"1411","hashOfConfig":"738"},{"size":7139,"mtime":1740252059273,"results":"1412","hashOfConfig":"738"},{"size":4098,"mtime":1736934861056,"results":"1413","hashOfConfig":"738"},{"size":3432,"mtime":1736934861056,"results":"1414","hashOfConfig":"738"},{"size":6915,"mtime":1740251689054,"results":"1415","hashOfConfig":"738"},{"size":4225,"mtime":1736934861134,"results":"1416","hashOfConfig":"738"},{"size":2050,"mtime":1736934861149,"results":"1417","hashOfConfig":"738"},{"size":9190,"mtime":1736934861149,"results":"1418","hashOfConfig":"738"},{"size":2666,"mtime":1736934860884,"results":"1419","hashOfConfig":"738"},{"size":583,"mtime":1736934860993,"results":"1420","hashOfConfig":"738"},{"size":569,"mtime":1736934860993,"results":"1421","hashOfConfig":"738"},{"size":3993,"mtime":1740248446519,"results":"1422","hashOfConfig":"738"},{"size":586,"mtime":1736934860993,"results":"1423","hashOfConfig":"738"},{"size":573,"mtime":1736934860993,"results":"1424","hashOfConfig":"738"},{"size":1137,"mtime":1736934860993,"results":"1425","hashOfConfig":"738"},{"size":497,"mtime":1736934860993,"results":"1426","hashOfConfig":"738"},{"size":590,"mtime":1736934860993,"results":"1427","hashOfConfig":"738"},{"size":1531,"mtime":1736934861149,"results":"1428","hashOfConfig":"738"},{"size":581,"mtime":1736934860993,"results":"1429","hashOfConfig":"738"},{"size":5766,"mtime":1736934860868,"results":"1430","hashOfConfig":"738"},{"size":14887,"mtime":1736934860868,"results":"1431","hashOfConfig":"738"},{"size":7197,"mtime":1740252592421,"results":"1432","hashOfConfig":"738"},{"size":2774,"mtime":1736934860868,"results":"1433","hashOfConfig":"738"},{"size":6589,"mtime":1736934860884,"results":"1434","hashOfConfig":"738"},{"size":5366,"mtime":1736934860884,"results":"1435","hashOfConfig":"738"},{"size":677,"mtime":1736934861149,"results":"1436","hashOfConfig":"738"},{"size":1658,"mtime":1736934861149,"results":"1437","hashOfConfig":"738"},{"size":7766,"mtime":1736934860978,"results":"1438","hashOfConfig":"738"},{"size":16014,"mtime":1736934860978,"results":"1439","hashOfConfig":"738"},{"size":2563,"mtime":1736934860978,"results":"1440","hashOfConfig":"738"},{"size":5633,"mtime":1736934860978,"results":"1441","hashOfConfig":"738"},{"size":5004,"mtime":1736934860993,"results":"1442","hashOfConfig":"738"},{"size":4618,"mtime":1736934860978,"results":"1443","hashOfConfig":"738"},{"size":5590,"mtime":1736934860978,"results":"1444","hashOfConfig":"738"},{"size":6864,"mtime":1736934860978,"results":"1445","hashOfConfig":"738"},{"size":4210,"mtime":1736934860978,"results":"1446","hashOfConfig":"738"},{"size":3724,"mtime":1736934860978,"results":"1447","hashOfConfig":"738"},{"size":15360,"mtime":1736934860978,"results":"1448","hashOfConfig":"738"},{"size":7835,"mtime":1736934860978,"results":"1449","hashOfConfig":"738"},{"size":2769,"mtime":1736934860978,"results":"1450","hashOfConfig":"738"},{"size":5561,"mtime":1736934860978,"results":"1451","hashOfConfig":"738"},{"size":7005,"mtime":1736934860978,"results":"1452","hashOfConfig":"738"},{"size":3541,"mtime":1736934860868,"results":"1453","hashOfConfig":"738"},{"size":1317,"mtime":1736934860868,"results":"1454","hashOfConfig":"738"},{"size":1286,"mtime":1736934861149,"results":"1455","hashOfConfig":"738"},{"size":16727,"mtime":1736934860868,"results":"1456","hashOfConfig":"738"},{"size":2611,"mtime":1736934861149,"results":"1457","hashOfConfig":"738"},{"size":462,"mtime":1736934861149,"results":"1458","hashOfConfig":"738"},{"size":5830,"mtime":1736941242838,"results":"1459","hashOfConfig":"738"},{"size":1572,"mtime":1736934860993,"results":"1460","hashOfConfig":"738"},{"size":2163,"mtime":1736934860868,"results":"1461","hashOfConfig":"738"},{"size":13599,"mtime":1736934860868,"results":"1462","hashOfConfig":"738"},{"size":3625,"mtime":1736934860884,"results":"1463","hashOfConfig":"738"},{"size":6829,"mtime":1736934860868,"results":"1464","hashOfConfig":"738"},{"size":2658,"mtime":1736934860884,"results":"1465","hashOfConfig":"738"},{"size":7174,"mtime":1736934860868,"results":"1466","hashOfConfig":"738"},{"size":2417,"mtime":1736934860868,"results":"1467","hashOfConfig":"738"},{"size":4298,"mtime":1736934860868,"results":"1468","hashOfConfig":"738"},{"size":751,"mtime":1736934860868,"results":"1469","hashOfConfig":"738"},{"size":1798,"mtime":1736934860868,"results":"1470","hashOfConfig":"738"},{"size":1280,"mtime":1736934860884,"results":"1471","hashOfConfig":"738"},{"size":4313,"mtime":1736934860978,"results":"1472","hashOfConfig":"738"},{"size":1156,"mtime":1736934860884,"results":"1473","hashOfConfig":"738"},{"filePath":"1474","messages":"1475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},"1v4hkz1",{"filePath":"1477","messages":"1478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1479","messages":"1480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1481","messages":"1482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1483","messages":"1484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1485","messages":"1486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1487","messages":"1488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1489","messages":"1490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1491","messages":"1492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1493","messages":"1494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1495","messages":"1496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1497","messages":"1498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1499","messages":"1500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1501","messages":"1502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1503","messages":"1504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1505","messages":"1506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1507","messages":"1508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1509","messages":"1510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1511","messages":"1512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1513","messages":"1514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1515","messages":"1516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1517","messages":"1518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1519","messages":"1520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1521","usedDeprecatedRules":"1476"},{"filePath":"1522","messages":"1523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1524","messages":"1525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1526","messages":"1527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1528","messages":"1529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1530","messages":"1531","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1532","usedDeprecatedRules":"1476"},{"filePath":"1533","messages":"1534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1535","messages":"1536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1537","messages":"1538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1539","messages":"1540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1541","messages":"1542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1543","messages":"1544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1545","messages":"1546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1547","messages":"1548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1549","messages":"1550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1551","messages":"1552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1553","messages":"1554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1555","messages":"1556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1557","messages":"1558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1559","messages":"1560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1561","messages":"1562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1563","messages":"1564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1565","messages":"1566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1567","messages":"1568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1569","messages":"1570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1571","usedDeprecatedRules":"1476"},{"filePath":"1572","messages":"1573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1574","messages":"1575","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1576","usedDeprecatedRules":"1476"},{"filePath":"1577","messages":"1578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1579","messages":"1580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1581","messages":"1582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1583","messages":"1584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1585","usedDeprecatedRules":"1476"},{"filePath":"1586","messages":"1587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1588","messages":"1589","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1590","usedDeprecatedRules":"1476"},{"filePath":"1591","messages":"1592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1593","messages":"1594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1595","messages":"1596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1597","messages":"1598","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1599","usedDeprecatedRules":"1476"},{"filePath":"1600","messages":"1601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1602","messages":"1603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1604","messages":"1605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1606","usedDeprecatedRules":"1476"},{"filePath":"1607","messages":"1608","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1609","usedDeprecatedRules":"1476"},{"filePath":"1610","messages":"1611","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1612","usedDeprecatedRules":"1476"},{"filePath":"1613","messages":"1614","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1615","usedDeprecatedRules":"1476"},{"filePath":"1616","messages":"1617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1618","messages":"1619","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1620","usedDeprecatedRules":"1476"},{"filePath":"1621","messages":"1622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1623","messages":"1624","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1625","usedDeprecatedRules":"1476"},{"filePath":"1626","messages":"1627","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1628","usedDeprecatedRules":"1476"},{"filePath":"1629","messages":"1630","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1631","usedDeprecatedRules":"1476"},{"filePath":"1632","messages":"1633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1634","messages":"1635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1636","usedDeprecatedRules":"1476"},{"filePath":"1637","messages":"1638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1639","messages":"1640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1641","messages":"1642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1643","messages":"1644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1645","messages":"1646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1647","messages":"1648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1649","messages":"1650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1651","messages":"1652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1653","messages":"1654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1655","messages":"1656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1657","messages":"1658","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1659","usedDeprecatedRules":"1476"},{"filePath":"1660","messages":"1661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1662","messages":"1663","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1664","usedDeprecatedRules":"1476"},{"filePath":"1665","messages":"1666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1667","messages":"1668","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1669","usedDeprecatedRules":"1476"},{"filePath":"1670","messages":"1671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1672","messages":"1673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1674","messages":"1675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1676","messages":"1677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1678","messages":"1679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1680","messages":"1681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1682","messages":"1683","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1684","usedDeprecatedRules":"1476"},{"filePath":"1685","messages":"1686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1687","messages":"1688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1689","messages":"1690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1691","messages":"1692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1693","messages":"1694","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1695","usedDeprecatedRules":"1476"},{"filePath":"1696","messages":"1697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1698","messages":"1699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1700","messages":"1701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1702","messages":"1703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1704","messages":"1705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1706","messages":"1707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1708","messages":"1709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1710","messages":"1711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1712","messages":"1713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1714","messages":"1715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1716","messages":"1717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1718","messages":"1719","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1720","usedDeprecatedRules":"1476"},{"filePath":"1721","messages":"1722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1723","messages":"1724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1725","messages":"1726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1727","messages":"1728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1729","messages":"1730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1731","messages":"1732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1733","messages":"1734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1735","messages":"1736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1737","messages":"1738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1739","messages":"1740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1741","messages":"1742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1743","messages":"1744","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1745","usedDeprecatedRules":"1476"},{"filePath":"1746","messages":"1747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1748","messages":"1749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1750","messages":"1751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1752","messages":"1753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1754","messages":"1755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1756","messages":"1757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1758","messages":"1759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1760","messages":"1761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1762","messages":"1763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1764","messages":"1765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1766","messages":"1767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1768","messages":"1769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1770","messages":"1771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1772","messages":"1773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1774","messages":"1775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1776","messages":"1777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1778","messages":"1779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1780","messages":"1781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1782","messages":"1783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1784","messages":"1785","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1786","usedDeprecatedRules":"1476"},{"filePath":"1787","messages":"1788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1789","messages":"1790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1791","messages":"1792","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1793","usedDeprecatedRules":"1476"},{"filePath":"1794","messages":"1795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1796","messages":"1797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1798","messages":"1799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1800","messages":"1801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1802","messages":"1803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1804","messages":"1805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1806","messages":"1807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1808","messages":"1809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1810","messages":"1811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1812","messages":"1813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1814","messages":"1815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1816","messages":"1817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1818","messages":"1819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1820","messages":"1821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1822","messages":"1823","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1824","usedDeprecatedRules":"1476"},{"filePath":"1825","messages":"1826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1827","messages":"1828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1829","messages":"1830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1831","messages":"1832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1833","messages":"1834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1835","messages":"1836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1837","messages":"1838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1839","messages":"1840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1841","messages":"1842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1843","messages":"1844","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1845","usedDeprecatedRules":"1476"},{"filePath":"1846","messages":"1847","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1848","usedDeprecatedRules":"1476"},{"filePath":"1849","messages":"1850","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1851","usedDeprecatedRules":"1476"},{"filePath":"1852","messages":"1853","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1854","usedDeprecatedRules":"1476"},{"filePath":"1855","messages":"1856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1857","messages":"1858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1859","messages":"1860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1861","messages":"1862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1863","messages":"1864","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1865","usedDeprecatedRules":"1476"},{"filePath":"1866","messages":"1867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1868","messages":"1869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1870","messages":"1871","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1872","usedDeprecatedRules":"1476"},{"filePath":"1873","messages":"1874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1875","messages":"1876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1877","messages":"1878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1879","messages":"1880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1881","messages":"1882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1883","messages":"1884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1885","messages":"1886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1887","messages":"1888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1889","messages":"1890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1891","messages":"1892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1893","messages":"1894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1895","messages":"1896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1897","messages":"1898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1899","messages":"1900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1901","messages":"1902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1903","messages":"1904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1905","messages":"1906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1907","messages":"1908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1909","messages":"1910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1911","messages":"1912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1913","messages":"1914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1915","messages":"1916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1917","messages":"1918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1919","messages":"1920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1921","messages":"1922","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1923","usedDeprecatedRules":"1476"},{"filePath":"1924","messages":"1925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1926","messages":"1927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1928","messages":"1929","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1930","usedDeprecatedRules":"1476"},{"filePath":"1931","messages":"1932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1933","messages":"1934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1935","messages":"1936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1937","messages":"1938","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1939","usedDeprecatedRules":"1476"},{"filePath":"1940","messages":"1941","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1942","usedDeprecatedRules":"1476"},{"filePath":"1943","messages":"1944","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1945","messages":"1946","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1947","messages":"1948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1949","messages":"1950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1951","messages":"1952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1953","messages":"1954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1955","messages":"1956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1957","messages":"1958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1959","messages":"1960","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1961","messages":"1962","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1963","usedDeprecatedRules":"1476"},{"filePath":"1964","messages":"1965","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1966","usedDeprecatedRules":"1476"},{"filePath":"1967","messages":"1968","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1969","usedDeprecatedRules":"1476"},{"filePath":"1970","messages":"1971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1972","messages":"1973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1974","messages":"1975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1976","messages":"1977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1978","messages":"1979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1980","messages":"1981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1982","messages":"1983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1984","messages":"1985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1986","messages":"1987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1988","messages":"1989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1990","messages":"1991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1992","messages":"1993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1994","messages":"1995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1996","messages":"1997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"1998","messages":"1999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2000","messages":"2001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2002","messages":"2003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2004","messages":"2005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2006","messages":"2007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2008","messages":"2009","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2010","usedDeprecatedRules":"1476"},{"filePath":"2011","messages":"2012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2013","messages":"2014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2015","messages":"2016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2017","messages":"2018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2019","messages":"2020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2021","messages":"2022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2023","messages":"2024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2025","messages":"2026","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2027","messages":"2028","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2029","messages":"2030","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2031","messages":"2032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2033","messages":"2034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2035","messages":"2036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2037","messages":"2038","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2039","usedDeprecatedRules":"1476"},{"filePath":"2040","messages":"2041","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2042","messages":"2043","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2044","messages":"2045","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2046","messages":"2047","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2048","messages":"2049","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2050","messages":"2051","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2052","messages":"2053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2054","messages":"2055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2056","messages":"2057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2058","messages":"2059","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2060","messages":"2061","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2062","messages":"2063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2064","messages":"2065","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2066","messages":"2067","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2068","messages":"2069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2070","messages":"2071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2072","messages":"2073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2074","messages":"2075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2076","messages":"2077","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2078","messages":"2079","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2080","messages":"2081","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2082","messages":"2083","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2084","messages":"2085","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2086","usedDeprecatedRules":"1476"},{"filePath":"2087","messages":"2088","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2089","messages":"2090","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2091","messages":"2092","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2093","messages":"2094","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2095","messages":"2096","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2097","messages":"2098","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2099","messages":"2100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2101","messages":"2102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2103","messages":"2104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2105","messages":"2106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2107","messages":"2108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2109","messages":"2110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2111","messages":"2112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2113","messages":"2114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2115","usedDeprecatedRules":"1476"},{"filePath":"2116","messages":"2117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2118","messages":"2119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2120","messages":"2121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2122","messages":"2123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2124","messages":"2125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2126","messages":"2127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2128","messages":"2129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2130","messages":"2131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2132","messages":"2133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2134","messages":"2135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2136","messages":"2137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1872","usedDeprecatedRules":"1476"},{"filePath":"2138","messages":"2139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2140","messages":"2141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2142","usedDeprecatedRules":"1476"},{"filePath":"2143","messages":"2144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2145","messages":"2146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2147","messages":"2148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2149","usedDeprecatedRules":"1476"},{"filePath":"2150","messages":"2151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2152","messages":"2153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2154","messages":"2155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2156","messages":"2157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2158","messages":"2159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2160","usedDeprecatedRules":"1476"},{"filePath":"2161","messages":"2162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2163","usedDeprecatedRules":"1476"},{"filePath":"2164","messages":"2165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2166","messages":"2167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2168","usedDeprecatedRules":"1476"},{"filePath":"2169","messages":"2170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2171","usedDeprecatedRules":"1476"},{"filePath":"2172","messages":"2173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2174","messages":"2175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2176","usedDeprecatedRules":"1476"},{"filePath":"2177","messages":"2178","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2179","usedDeprecatedRules":"1476"},{"filePath":"2180","messages":"2181","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2182","usedDeprecatedRules":"1476"},{"filePath":"2183","messages":"2184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2185","usedDeprecatedRules":"1476"},{"filePath":"2186","messages":"2187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2188","messages":"2189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2190","messages":"2191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2192","messages":"2193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2194","messages":"2195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2196","messages":"2197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2198","messages":"2199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2200","messages":"2201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2202","messages":"2203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2204","messages":"2205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2206","messages":"2207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2208","messages":"2209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2210","messages":"2211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2212","messages":"2213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2214","messages":"2215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2216","messages":"2217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2218","messages":"2219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2220","messages":"2221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2222","messages":"2223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2224","messages":"2225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2226","messages":"2227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2228","messages":"2229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2230","messages":"2231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2232","messages":"2233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2234","messages":"2235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2236","messages":"2237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2238","usedDeprecatedRules":"1476"},{"filePath":"2239","messages":"2240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2241","messages":"2242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2243","messages":"2244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2245","messages":"2246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2247","messages":"2248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2249","messages":"2250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2251","messages":"2252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2253","messages":"2254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2255","messages":"2256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2257","messages":"2258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2259","messages":"2260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2261","messages":"2262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2263","messages":"2264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2265","messages":"2266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2267","usedDeprecatedRules":"1476"},{"filePath":"2268","messages":"2269","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"2270","usedDeprecatedRules":"1476"},{"filePath":"2271","messages":"2272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2273","messages":"2274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2275","messages":"2276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2277","messages":"2278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2279","messages":"2280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2281","messages":"2282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2283","messages":"2284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2285","messages":"2286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2287","messages":"2288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2289","messages":"2290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2291","messages":"2292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2293","messages":"2294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2295","messages":"2296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2297","usedDeprecatedRules":"1476"},{"filePath":"2298","messages":"2299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2300","messages":"2301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2302","messages":"2303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2304","messages":"2305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2306","messages":"2307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2308","messages":"2309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2310","messages":"2311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1969","usedDeprecatedRules":"1476"},{"filePath":"2312","messages":"2313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2314","messages":"2315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2316","messages":"2317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2318","messages":"2319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2320","messages":"2321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2322","usedDeprecatedRules":"1476"},{"filePath":"2323","messages":"2324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2325","messages":"2326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2327","messages":"2328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2329","messages":"2330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2331","messages":"2332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2333","messages":"2334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2335","messages":"2336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2337","messages":"2338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2339","messages":"2340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2341","messages":"2342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2343","messages":"2344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2345","messages":"2346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2347","messages":"2348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2349","messages":"2350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2351","messages":"2352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2353","messages":"2354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2355","messages":"2356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2357","usedDeprecatedRules":"1476"},{"filePath":"2358","messages":"2359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2360","messages":"2361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2362","usedDeprecatedRules":"1476"},{"filePath":"2363","messages":"2364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2365","messages":"2366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2367","messages":"2368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2369","messages":"2370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2371","messages":"2372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2373","messages":"2374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2375","usedDeprecatedRules":"1476"},{"filePath":"2376","messages":"2377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2378","messages":"2379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2380","messages":"2381","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2382","usedDeprecatedRules":"1476"},{"filePath":"2383","messages":"2384","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2385","usedDeprecatedRules":"1476"},{"filePath":"2386","messages":"2387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2388","messages":"2389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2390","messages":"2391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2392","messages":"2393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2394","messages":"2395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2396","messages":"2397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2398","messages":"2399","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2400","usedDeprecatedRules":"1476"},{"filePath":"2401","messages":"2402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2403","messages":"2404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2405","messages":"2406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2407","messages":"2408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2409","messages":"2410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2411","messages":"2412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2413","messages":"2414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2415","messages":"2416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2417","messages":"2418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2419","messages":"2420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2421","messages":"2422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2423","messages":"2424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2425","usedDeprecatedRules":"1476"},{"filePath":"2426","messages":"2427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2428","messages":"2429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2430","usedDeprecatedRules":"1476"},{"filePath":"2431","messages":"2432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2433","messages":"2434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2435","messages":"2436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2437","messages":"2438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2439","messages":"2440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2441","usedDeprecatedRules":"1476"},{"filePath":"2442","messages":"2443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2444","messages":"2445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2446","messages":"2447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2448","messages":"2449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2450","messages":"2451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2452","messages":"2453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2454","messages":"2455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2456","messages":"2457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2458","messages":"2459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2460","messages":"2461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2462","messages":"2463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2464","messages":"2465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2466","messages":"2467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2468","messages":"2469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2470","messages":"2471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2472","messages":"2473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2474","messages":"2475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2476","messages":"2477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2478","messages":"2479","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2480","usedDeprecatedRules":"1476"},{"filePath":"2481","messages":"2482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2483","messages":"2484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2485","messages":"2486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2487","messages":"2488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2489","messages":"2490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2491","messages":"2492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2493","messages":"2494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2495","messages":"2496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2497","messages":"2498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2499","messages":"2500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2501","messages":"2502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2503","messages":"2504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2505","messages":"2506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2507","messages":"2508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2509","messages":"2510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2511","messages":"2512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2513","messages":"2514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2515","messages":"2516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2517","messages":"2518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2519","messages":"2520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2521","messages":"2522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2523","messages":"2524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2525","messages":"2526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2527","messages":"2528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2529","messages":"2530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2531","messages":"2532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2533","messages":"2534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2535","usedDeprecatedRules":"1476"},{"filePath":"2536","messages":"2537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2538","messages":"2539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2540","usedDeprecatedRules":"1476"},{"filePath":"2541","messages":"2542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2543","messages":"2544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2545","messages":"2546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2547","messages":"2548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2549","messages":"2550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2551","messages":"2552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2553","messages":"2554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2555","messages":"2556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2557","messages":"2558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2559","messages":"2560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2561","messages":"2562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2563","messages":"2564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2565","messages":"2566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2567","messages":"2568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2569","messages":"2570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2571","usedDeprecatedRules":"1476"},{"filePath":"2572","messages":"2573","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2574","usedDeprecatedRules":"1476"},{"filePath":"2575","messages":"2576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2577","messages":"2578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2579","messages":"2580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2581","messages":"2582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2583","messages":"2584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2585","messages":"2586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2587","messages":"2588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2589","messages":"2590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2591","messages":"2592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2593","messages":"2594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2595","messages":"2596","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2597","usedDeprecatedRules":"1476"},{"filePath":"2598","messages":"2599","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2600","usedDeprecatedRules":"1476"},{"filePath":"2601","messages":"2602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2603","messages":"2604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2605","messages":"2606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2607","messages":"2608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2609","messages":"2610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2611","messages":"2612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2613","messages":"2614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2615","messages":"2616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2617","messages":"2618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2619","messages":"2620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2621","messages":"2622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2623","messages":"2624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2625","messages":"2626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2627","messages":"2628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2629","messages":"2630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2631","messages":"2632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2633","messages":"2634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2635","messages":"2636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2637","messages":"2638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2639","messages":"2640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2641","messages":"2642","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2643","usedDeprecatedRules":"1476"},{"filePath":"2644","messages":"2645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2646","messages":"2647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2648","messages":"2649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2650","messages":"2651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2652","messages":"2653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2654","messages":"2655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2656","messages":"2657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2658","messages":"2659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2660","messages":"2661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2662","messages":"2663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2664","usedDeprecatedRules":"1476"},{"filePath":"2665","messages":"2666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2667","messages":"2668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2669","messages":"2670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2671","messages":"2672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2673","messages":"2674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2675","messages":"2676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2677","messages":"2678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2679","messages":"2680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2681","messages":"2682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2683","messages":"2684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2685","messages":"2686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2687","messages":"2688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2689","usedDeprecatedRules":"1476"},{"filePath":"2690","messages":"2691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2692","messages":"2693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2694","messages":"2695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2696","messages":"2697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2698","messages":"2699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2700","messages":"2701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2702","messages":"2703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2704","messages":"2705","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2706","usedDeprecatedRules":"1476"},{"filePath":"2707","messages":"2708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2709","messages":"2710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2711","messages":"2712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2713","messages":"2714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2715","messages":"2716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2717","messages":"2718","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2719","usedDeprecatedRules":"1476"},{"filePath":"2720","messages":"2721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2722","messages":"2723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2724","messages":"2725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2726","messages":"2727","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2728","usedDeprecatedRules":"1476"},{"filePath":"2729","messages":"2730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2731","messages":"2732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2733","messages":"2734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2735","messages":"2736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2737","messages":"2738","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2739","usedDeprecatedRules":"1476"},{"filePath":"2740","messages":"2741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2742","messages":"2743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2744","messages":"2745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2746","messages":"2747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2748","messages":"2749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2750","messages":"2751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2752","messages":"2753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2754","messages":"2755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2756","messages":"2757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2758","messages":"2759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2760","messages":"2761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2762","messages":"2763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2764","messages":"2765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2766","messages":"2767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2768","messages":"2769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2770","messages":"2771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2772","messages":"2773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2774","messages":"2775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2776","messages":"2777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2778","messages":"2779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2780","messages":"2781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2782","messages":"2783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2784","messages":"2785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2786","messages":"2787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2788","messages":"2789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2790","messages":"2791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2792","messages":"2793","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2794","usedDeprecatedRules":"1476"},{"filePath":"2795","messages":"2796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2797","messages":"2798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2799","messages":"2800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2801","messages":"2802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2803","messages":"2804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2805","messages":"2806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2807","messages":"2808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2809","messages":"2810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2811","messages":"2812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2813","messages":"2814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2815","messages":"2816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2817","messages":"2818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2819","messages":"2820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2821","messages":"2822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2823","messages":"2824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2825","messages":"2826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2827","messages":"2828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2829","messages":"2830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2831","messages":"2832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2833","messages":"2834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2835","messages":"2836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2837","messages":"2838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2839","messages":"2840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2841","messages":"2842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2843","messages":"2844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2845","messages":"2846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2847","messages":"2848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2849","messages":"2850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2851","messages":"2852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2853","messages":"2854","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2855","usedDeprecatedRules":"1476"},{"filePath":"2856","messages":"2857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2858","messages":"2859","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2860","usedDeprecatedRules":"1476"},{"filePath":"2861","messages":"2862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2863","messages":"2864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2865","messages":"2866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2867","messages":"2868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2869","messages":"2870","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2871","usedDeprecatedRules":"1476"},{"filePath":"2872","messages":"2873","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2874","usedDeprecatedRules":"1476"},{"filePath":"2875","messages":"2876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2877","messages":"2878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2879","messages":"2880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2881","messages":"2882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2883","messages":"2884","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2885","usedDeprecatedRules":"1476"},{"filePath":"2886","messages":"2887","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2888","usedDeprecatedRules":"1476"},{"filePath":"2889","messages":"2890","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2891","usedDeprecatedRules":"1476"},{"filePath":"2892","messages":"2893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2894","messages":"2895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2896","messages":"2897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2898","messages":"2899","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2900","usedDeprecatedRules":"1476"},{"filePath":"2901","messages":"2902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2903","messages":"2904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2905","messages":"2906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2907","messages":"2908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2909","messages":"2910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2911","messages":"2912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2913","messages":"2914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2915","messages":"2916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2917","messages":"2918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2919","messages":"2920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2921","messages":"2922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2923","messages":"2924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2925","messages":"2926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2927","messages":"2928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2929","messages":"2930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2931","messages":"2932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2933","messages":"2934","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2935","usedDeprecatedRules":"1476"},{"filePath":"2936","messages":"2937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2938","messages":"2939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2940","messages":"2941","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2942","usedDeprecatedRules":"1476"},{"filePath":"2943","messages":"2944","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2945","messages":"2946","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2947","messages":"2948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2949","messages":"2950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2951","messages":"2952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2953","messages":"2954","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2955","usedDeprecatedRules":"1476"},{"filePath":"2956","messages":"2957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2958","messages":"2959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2960","messages":"2961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2962","messages":"2963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2964","messages":"2965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2966","messages":"2967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2968","messages":"2969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2970","messages":"2971","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2972","usedDeprecatedRules":"1476"},{"filePath":"2973","messages":"2974","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2975","messages":"2976","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2977","usedDeprecatedRules":"1476"},{"filePath":"2978","messages":"2979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2980","messages":"2981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2982","messages":"2983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2984","messages":"2985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2986","messages":"2987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2988","messages":"2989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2990","messages":"2991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2992","messages":"2993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2994","messages":"2995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2996","messages":"2997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"2998","messages":"2999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3000","messages":"3001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3002","messages":"3003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3004","messages":"3005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3006","messages":"3007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3008","messages":"3009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3010","messages":"3011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3012","messages":"3013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3014","messages":"3015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3016","messages":"3017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3018","messages":"3019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3020","messages":"3021","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3022","usedDeprecatedRules":"1476"},{"filePath":"3023","messages":"3024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3025","messages":"3026","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3027","messages":"3028","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3029","messages":"3030","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3031","messages":"3032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3033","messages":"3034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3035","messages":"3036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3037","messages":"3038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3039","messages":"3040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},{"filePath":"3041","messages":"3042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1476"},"E:\\bidboland\\src\\index.js",[],["3043","3044"],"E:\\bidboland\\src\\App.js",[],"E:\\bidboland\\src\\reportWebVitals.js",[],"E:\\bidboland\\src\\rampco.js",[],"E:\\bidboland\\src\\staticData.js",[],"E:\\bidboland\\src\\PARS.js",[],"E:\\bidboland\\src\\bidboland.js",[],"E:\\bidboland\\src\\login\\Login.js",[],"E:\\bidboland\\src\\dashboard\\Dashboard.js",[],"E:\\bidboland\\src\\createUser\\IndexUserGroup.js",[],"E:\\bidboland\\src\\createUser\\CreateUser.js",[],"E:\\bidboland\\src\\404\\404.js",[],"E:\\bidboland\\src\\edit-profile\\EditProfile.js",[],"E:\\bidboland\\src\\list-user\\userlist.js",[],"E:\\bidboland\\src\\table\\table.js",[],"E:\\bidboland\\src\\gallery\\Create.js",[],"E:\\bidboland\\src\\gallery\\Gallery.js",[],"E:\\bidboland\\src\\gallery\\Edit.js",[],"E:\\bidboland\\src\\gallery\\archive.js",[],"E:\\bidboland\\src\\mre\\Mre.js",[],"E:\\bidboland\\src\\avl\\index-Avl.js",[],"E:\\bidboland\\src\\avl\\Avl.js",[],"E:\\bidboland\\src\\Meeting-management\\Create.js",["3045"],"import React, { Component } from 'react'\r\nimport Menu from '../layout/menu'\r\nimport Sidebar from '../layout/sidebar'\r\nimport StaticData from '../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport DatePicker from 'react-datepicker2'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder'\r\nimport Clock from '../clock/clock'\r\nimport PeopleIcon from '@material-ui/icons/People'\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport DateRangeIcon from '@material-ui/icons/DateRange'\r\nimport moment from 'moment-jalaali'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport MaskedInput from '../maskInput/Masktedinput'\r\nimport handleString from '../handleString'\r\nimport handleCheckText from '../handleCheckText'\r\nexport default class CreateMeeting extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.startHourOpen = null\r\n    this.endHourOpen = null\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      foucs: '',\r\n      startHour: '',\r\n      endHour: '',\r\n      subjectMeeting: '',\r\n      redirect: false,\r\n      date: undefined,\r\n      keywords: [],\r\n      keywordsSelected: [],\r\n      wbs: [],\r\n      wbsSelected: '',\r\n      userDetail: {\r\n        first_name: '',\r\n        last_name: '',\r\n        sign: ''\r\n      },\r\n      address: [],\r\n      addressSelected: '',\r\n      attendees: [],\r\n      attendeesSelected: [],\r\n      meetingType: [],\r\n      meetingTypeSelected: '',\r\n      leader: [],\r\n      leaderSelected: '',\r\n      meetingOrders: [\r\n        {\r\n          description: '',\r\n          attachment: [],\r\n          attachmentName: [],\r\n          responsible: '',\r\n          duration: ''\r\n        }\r\n      ],\r\n      popUp: false,\r\n      disabled: false,\r\n      periodTime: '',\r\n      linkAdress: '',\r\n      sumTime: '',\r\n      subjectSuggestion: [],\r\n      yesteday: moment().subtract(1, 'day')\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - ایجاد جلسه`\r\n    this.fetchData()\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs.startHourOpen &&\r\n      !this.refs.startHourOpen.contains(event.target)\r\n    ) {\r\n      if (this.startHourOpen) {\r\n        this.startHourOpen(false)\r\n      }\r\n    }\r\n    if (\r\n      this.refs.endHourOpen &&\r\n      !this.refs.endHourOpen.contains(event.target)\r\n    ) {\r\n      if (this.endHourOpen) {\r\n        this.endHourOpen(false)\r\n      }\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    if (this.state.token) {\r\n      axios\r\n        .get(`${StaticData.domainIp}/meeting/getFirstDetail`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            response.data.content['userDetail'] = response.data.userDetail\r\n            await this.setState(response.data.content)\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = e => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  GetTime = async (name, time) => {\r\n    await this.setState({ [name]: time })\r\n    if (name === 'startHour') {\r\n      this.setState({ endHour: '', periodTime: '' })\r\n    } else if (name === 'endHour') {\r\n      let beginningTime = moment(this.state.startHour, 'h:mma')\r\n      let endTime = moment(this.state.endHour, 'h:mma')\r\n      if (!beginningTime.isBefore(endTime)) {\r\n        this.setState({\r\n          startHour: '',\r\n          endHour: '',\r\n          periodTime: ''\r\n        })\r\n        this.ResetAllMasked()\r\n        Notification.notify(Message.text(911), 'warning')\r\n      } else {\r\n        let first = moment.duration(this.state.startHour)\r\n        let end = moment.duration(this.state.endHour)\r\n        let b = end.subtract(first)\r\n        this.setState({\r\n          periodTime: moment.utc(b.as('milliseconds')).format('HH:mm')\r\n        })\r\n      }\r\n    }\r\n  }\r\n  AddOrder = () => {\r\n    let obj = {\r\n      description: '',\r\n      attachment: [],\r\n      attachmentName: [],\r\n      responsible: '',\r\n      duration: ''\r\n    }\r\n    this.setState({\r\n      meetingOrders: [...this.state.meetingOrders, obj]\r\n    })\r\n  }\r\n  handleChangeList = e => {\r\n    let array = this.state.meetingOrders\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let name = e.target.name.split('_')[0]\r\n    let obj = array[key]\r\n    obj[name] = handleString(e.target.value)\r\n    if (name === 'duration') {\r\n      this.MaskedInputBlur()\r\n    }\r\n    this.setState({ meetingOrders: array })\r\n  }\r\n  MaskedInputBlur = () => {\r\n    this.setState({ foucs: '' })\r\n    const any = Object.keys(this.state.meetingOrders).map(_ => {\r\n      return parseInt(this.state.meetingOrders[_].duration)\r\n    })\r\n    const sum = any.reduce((a, b) => a + b)\r\n    if (sum) {\r\n      let time = moment.duration(sum, 'minutes')\r\n      let beginningTime = moment(\r\n        `${time._data.hours}:${time._data.minutes}`,\r\n        'h:mma'\r\n      )\r\n      this.setState({\r\n        sumTime: `${time._data.hours}:${time._data.minutes}`\r\n      })\r\n      let endTime = moment(this.state.periodTime, 'h:mma')\r\n      if (!beginningTime.isBefore(endTime)) {\r\n        this.ResetAllMasked()\r\n        Notification.notify(Message.text(913), 'warning')\r\n      }\r\n    }\r\n  }\r\n  ResetAllMasked = () => {\r\n    let newList = Object.keys(this.state.meetingOrders).map(_ => {\r\n      this.state.meetingOrders[_].duration = ''\r\n      return this.state.meetingOrders[_]\r\n    })\r\n    this.setState({ meetingOrders: newList, foucs: '', sumTime: '' })\r\n  }\r\n  deleteFile = async (key, num, files, names) => {\r\n    let Document = await this.state.meetingOrders\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await this.setState({ meetingOrders: Document })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        key,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.meetingOrders[key][nameState],\r\n      arrayName = this.state.meetingOrders[key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/meeting`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let Document = await this.state.meetingOrders\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ meetingOrders: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleDate = date => {\r\n    if (date === undefined || date === null) {\r\n      return undefined\r\n    } else {\r\n      return moment(`${date}`, 'jYYYY/jM/jD')\r\n    }\r\n  }\r\n  getDateList = (key, name, date) => {\r\n    let list = this.state.meetingOrders\r\n    let obj = list[key]\r\n    obj[name] = getCustomFormat(date, false)\r\n    this.setState({ meetingOrders: list })\r\n  }\r\n  handleSubmit = async () => {\r\n    const meetingType =\r\n      this.state.meetingTypeSelected === 'مجازی'\r\n        ? true\r\n        : this.state.addressSelected !== '' &&\r\n          this.state.meetingTypeSelected !== ''\r\n    const check =\r\n      this.state.subjectMeeting !== '' &&\r\n      this.state.date &&\r\n      meetingType === true &&\r\n      this.state.attendeesSelected.length > 0 &&\r\n      this.state.startHour !== '' &&\r\n      this.state.endHour !== '' &&\r\n      this.state.leaderSelected !== ''\r\n    let meetingOrders = this.state.meetingOrders\r\n    let i = 0\r\n    let order = false\r\n    while (i < meetingOrders.length) {\r\n      order =\r\n        meetingOrders[i].description !== '' &&\r\n        meetingOrders[i].responsible !== '' &&\r\n        meetingOrders[i].duration !== ''\r\n      if (!order) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    if (check && order) {\r\n      let result = Object.assign(\r\n        {},\r\n        Object.keys(meetingOrders).map(_ => {\r\n          meetingOrders[_].attachment = Object.assign(\r\n            {},\r\n            meetingOrders[_].attachment\r\n          )\r\n          return meetingOrders[_]\r\n        })\r\n      )\r\n      const attendeesSelected = Object.keys(this.state.attendeesSelected).map(\r\n        data => {\r\n          return this.state.attendeesSelected[data].value\r\n        }\r\n      )\r\n      const keywordsSelected = Object.keys(this.state.keywordsSelected).map(\r\n        data => {\r\n          return this.state.keywordsSelected[data].value\r\n        }\r\n      )\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      let datareg = new FormData()\r\n      datareg.append('subject', this.state.subjectMeeting.value)\r\n      datareg.append(\r\n        'holdingTime',\r\n        getCustomFormat(this.state.date, false)\r\n          ? getCustomFormat(this.state.date, false)\r\n          : ''\r\n      )\r\n      datareg.append('startHour', this.state.startHour)\r\n      datareg.append('endHour', this.state.endHour)\r\n      datareg.append('leader', this.state.leaderSelected)\r\n      datareg.append('meetingType', this.state.meetingTypeSelected)\r\n      datareg.append('attendees', attendeesSelected.join(','))\r\n      datareg.append(\r\n        'address',\r\n        this.state.meetingTypeSelected === 'مجازی'\r\n          ? this.state.linkAdress\r\n          : this.state.addressSelected\r\n      )\r\n      datareg.append('meetingOrders', JSON.stringify(result))\r\n      datareg.append('keywords', keywordsSelected.join(','))\r\n      datareg.append(\r\n        'wbs',\r\n        this.state.wbsSelected.value ? this.state.wbsSelected.value : ''\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/meeting/insert`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(905), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({\r\n                redirect: true,\r\n                disabled: false\r\n              })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return <Redirect to='/index-metting' />\r\n      } else\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu nameRole='' nameUrl={this.props.nameUrl} />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>ایجاد جلسه</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='form row justify-content-start'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className='field-form selectBox'>\r\n                                <CreatableSelect\r\n                                  value={this.state.subjectMeeting}\r\n                                  onChange={newValue =>\r\n                                    this.setState({ subjectMeeting: newValue })\r\n                                  }\r\n                                  options={this.state.subjectSuggestion}\r\n                                  placeholder={\r\n                                    <label>\r\n                                      موضوع جلسه\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    </label>\r\n                                  }\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.foucs === `date` ||\r\n                                  (this.state.date && this.state.date !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    زمان برگزاری\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <DatePicker\r\n                                    persianDigits={true}\r\n                                    isGregorian={false}\r\n                                    timePicker={false}\r\n                                    onChange={date => this.setState({ date })}\r\n                                    value={this.state.date}\r\n                                    min={this.state.yesteday}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form clock persian ${\r\n                                  this.state.foucs === `startHour` ||\r\n                                  (this.state.startHour &&\r\n                                    this.state.startHour !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                ref='startHourOpen'\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <QueryBuilderIcon />\r\n                                </div>\r\n                                <div className='col p-0 ltr'>\r\n                                  <label>ساعت شروع</label>\r\n                                  <Clock\r\n                                    getTime={(name, time) =>\r\n                                      this.GetTime(name, time)\r\n                                    }\r\n                                    name='startHour'\r\n                                    value={this.state.startHour}\r\n                                    getFocus={e => (this.startHourOpen = e)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form clock persian ${\r\n                                  this.state.foucs === `endHour` ||\r\n                                  (this.state.endHour &&\r\n                                    this.state.endHour !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                ref='endHourOpen'\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <QueryBuilderIcon />\r\n                                </div>\r\n                                <div className='col p-0 ltr'>\r\n                                  <label>ساعت خاتمه</label>\r\n                                  {this.state.startHour !== '' && (\r\n                                    <Clock\r\n                                      getTime={(name, time) =>\r\n                                        this.GetTime(name, time)\r\n                                      }\r\n                                      name='endHour'\r\n                                      value={this.state.endHour}\r\n                                      getFocus={e => (this.endHourOpen = e)}\r\n                                    />\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `leaderSelected` ||\r\n                                  this.state.leaderSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  دبیر جلسه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <select\r\n                                  name={`leaderSelected`}\r\n                                  value={this.state.leaderSelected}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.leader.map((data3, index2) => (\r\n                                    <option key={index2} value={data3.value}>\r\n                                      {data3.label}\r\n                                    </option>\r\n                                  ))}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `meetingTypeSelected` ||\r\n                                  this.state.meetingTypeSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  نحوه برگزاری\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <select\r\n                                  name={`meetingTypeSelected`}\r\n                                  value={this.state.meetingTypeSelected}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={e => {\r\n                                    this.handleChange(e)\r\n                                    this.setState({\r\n                                      addressSelected: '',\r\n                                      linkAdress: '',\r\n                                      foucs: ''\r\n                                    })\r\n                                  }}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.meetingType.map(\r\n                                    (data2, index1) => (\r\n                                      <option key={index1} value={data2.value}>\r\n                                        {data2.label}\r\n                                      </option>\r\n                                    )\r\n                                  )}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className='field-form selectBox'>\r\n                                <div className='icon-field'>\r\n                                  <PeopleIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <CreatableSelect\r\n                                    value={this.state.attendeesSelected}\r\n                                    onChange={newValue => {\r\n                                      this.setState({\r\n                                        attendeesSelected: newValue\r\n                                      })\r\n                                    }}\r\n                                    isMulti\r\n                                    options={this.state.attendees}\r\n                                    placeholder={\r\n                                      <label>\r\n                                        حاضرین\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `addressSelected` ||\r\n                                  this.state.foucs === 'linkAdress' ||\r\n                                  this.state.addressSelected !== '' ||\r\n                                  this.state.linkAdress !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <LocationOnIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    آدرس\r\n                                    {this.state.meetingTypeSelected ===\r\n                                    'مجازی' ? (\r\n                                      ''\r\n                                    ) : (\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    )}\r\n                                  </label>\r\n                                  {this.state.meetingTypeSelected ===\r\n                                  'مجازی' ? (\r\n                                    <input\r\n                                      className='text-right'\r\n                                      name='linkAdress'\r\n                                      value={handleString(\r\n                                        this.state.linkAdress\r\n                                      )}\r\n                                      readOnly={false}\r\n                                      onChange={this.handleChange}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                    />\r\n                                  ) : (\r\n                                    <select\r\n                                      name={`addressSelected`}\r\n                                      value={this.state.addressSelected}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                      onChange={this.handleChange}\r\n                                    >\r\n                                      <option className='d-none'></option>\r\n                                      {this.state.address.map((data, key) => (\r\n                                        <option key={key} value={data.value}>\r\n                                          {data.label}\r\n                                        </option>\r\n                                      ))}\r\n                                    </select>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='title-password col-12'>\r\n                              <h2 className='IranSans_Bold'>دستورات جلسه</h2>\r\n                              <div className='line'></div>\r\n                            </div>\r\n                            {this.state.meetingOrders.map((metting, _index) => (\r\n                              <div className='w-100 row m-0' key={_index}>\r\n                                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian textarea ${\r\n                                      this.state.foucs ===\r\n                                        `description_${_index}` ||\r\n                                      handleCheckText(metting.description)\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <div className='col p-0'>\r\n                                      <label className='textarea'>\r\n                                        دستور جلسه\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                      <textarea\r\n                                        className='w-100'\r\n                                        type='text'\r\n                                        name={`description_${_index}`}\r\n                                        onFocus={e =>\r\n                                          this.OnFocus(e.target.name)\r\n                                        }\r\n                                        onBlur={this.OnBlur}\r\n                                        onChange={this.handleChangeList}\r\n                                        value={handleString(\r\n                                          metting.description\r\n                                        )}\r\n                                      ></textarea>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                  <div className={`field-form persian`}>\r\n                                    <label>تصویر پیوست</label>\r\n                                    <div className='allName col row m-0 justify-content-end'>\r\n                                      {metting.attachmentName.map(\r\n                                        (name, key) => (\r\n                                          <span key={key}>\r\n                                            <CloseRoundedIcon\r\n                                              onClick={() =>\r\n                                                this.deleteFile(\r\n                                                  _index,\r\n                                                  key,\r\n                                                  `attachment`,\r\n                                                  `attachmentName`\r\n                                                )\r\n                                              }\r\n                                            />\r\n                                            {handleString(name)}\r\n                                          </span>\r\n                                        )\r\n                                      )}\r\n                                    </div>\r\n                                    <input\r\n                                      className='d-none'\r\n                                      type='file'\r\n                                      id={`attachment_${_index}`}\r\n                                      multiple\r\n                                      onChange={e =>\r\n                                        this.handleUpload(\r\n                                          e,\r\n                                          `attachment_${_index}`,\r\n                                          `attachmentName_${_index}`\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    <label\r\n                                      className='upload-label'\r\n                                      htmlFor={`attachment_${_index}`}\r\n                                    >\r\n                                      {this.state.loading ===\r\n                                      `attachment_${_index}` ? (\r\n                                        <Loading className='form-loader w-auto' />\r\n                                      ) : (\r\n                                        <AttachFileIcon />\r\n                                      )}\r\n                                      فایل پیوست\r\n                                    </label>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian ${\r\n                                      this.state.foucs ===\r\n                                        `responsible_${_index}` ||\r\n                                      handleCheckText(metting.responsible)\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <label>\r\n                                      مطرح کننده\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    </label>\r\n                                    <select\r\n                                      name={`responsible_${_index}`}\r\n                                      value={handleString(metting.responsible)}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                      onChange={this.handleChangeList}\r\n                                    >\r\n                                      <option className='d-none'></option>\r\n                                      <option value='کارفرما'>کارفرما</option>\r\n                                      <option value='مشارکت'>مشارکت</option>\r\n                                      <option value='مشاور'>مشاور</option>\r\n                                      <option value='سازنده'>سازنده</option>\r\n                                      <option value='شخص ثالث'>شخص ثالث</option>\r\n                                      <option value='پیمانکار فرعی'>\r\n                                        پیمانکار فرعی\r\n                                      </option>\r\n                                    </select>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian field-clock ${\r\n                                      this.state.foucs ===\r\n                                        `duration_${_index}` ||\r\n                                      (metting.duration &&\r\n                                        metting.duration !== '')\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <div className='icon-field'>\r\n                                      <DateRangeIcon />\r\n                                    </div>\r\n                                    <div className='col p-0'>\r\n                                      <label>\r\n                                        زمان تقریبی (بر حسب دقیقه)\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                      {this.state.periodTime !== '' && (\r\n                                        <MaskedInput\r\n                                          mask='999'\r\n                                          name={`duration_${_index}`}\r\n                                          value={metting.duration}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={() => this.MaskedInputBlur()}\r\n                                          onChange={this.handleChangeList}\r\n                                          maskChar=' '\r\n                                          _index={_index}\r\n                                        />\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-12'>\r\n                                  <div className='line'>\r\n                                    <hr />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            ))}\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.AddOrder}>\r\n                                <AddIcon />\r\n                                افزودن دستور جلسه بیشتر\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className='field-form selectBox'>\r\n                                <CreatableSelect\r\n                                  isMulti\r\n                                  onChange={newValue =>\r\n                                    this.setState({\r\n                                      keywordsSelected: newValue\r\n                                    })\r\n                                  }\r\n                                  options={this.state.keywords}\r\n                                  value={this.state.keywordsSelected}\r\n                                  placeholder='تخصیص تگ'\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `wbsSelected` ||\r\n                                  this.state.wbsSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>تخصیص سطح WBS</label>\r\n                                <select\r\n                                  name={`wbsSelected`}\r\n                                  value={\r\n                                    this.state.wbsSelected.value\r\n                                      ? this.state.wbsSelected.value\r\n                                      : ''\r\n                                  }\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.wbs.map((data, key) => (\r\n                                    <option key={key} value={data.value}>\r\n                                      {data.label}\r\n                                    </option>\r\n                                  ))}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form persian`}>\r\n                                <label>{`${this.state.userDetail.first_name}  ${this.state.userDetail.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label'\r\n                                  onClick={() => this.setState({ popUp: true })}\r\n                                >\r\n                                  امضا\r\n                                  <AttachFileIcon className='ml-0 mr-1' />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            {this.state.sumTime !== '' ? (\r\n                              <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                <div\r\n                                  className={`field-form value-span persian`}\r\n                                >\r\n                                  <label>زمان تقریبی جلسه :</label>\r\n                                  <span>{this.state.sumTime}</span>\r\n                                </div>\r\n                              </div>\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                            <div className='submit-form col-12'>\r\n                              <button\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ثبت اطلاعات\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.userDetail.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Meeting-management\\second-section.js",[],"E:\\bidboland\\src\\Meeting-management\\third-section.js",[],"E:\\bidboland\\src\\Meeting-management\\index-metting.js",[],"E:\\bidboland\\src\\Meeting-management\\edit-second.js",[],"E:\\bidboland\\src\\Meeting-management\\edit-metting.js",["3046"],"import React, { Component } from 'react'\r\nimport Menu from '../layout/menu'\r\nimport Sidebar from '../layout/sidebar'\r\nimport StaticData from '../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport DatePicker from 'react-datepicker2'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder'\r\nimport Clock from '../clock/clock'\r\nimport PeopleIcon from '@material-ui/icons/People'\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport DateRangeIcon from '@material-ui/icons/DateRange'\r\nimport moment from 'moment-jalaali'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport MaskedInput from '../maskInput/Masktedinput'\r\nimport handleString from '../handleString'\r\nimport handleCheckText from '../handleCheckText'\r\nexport default class EditMetting extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.startHourOpen = null\r\n    this.endHourOpen = null\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      foucs: '',\r\n      startHour: '',\r\n      endHour: '',\r\n      subjectMeeting: '',\r\n      redirect: false,\r\n      date: undefined,\r\n      keywords: [],\r\n      keywordsSelected: [],\r\n      wbs: [],\r\n      wbsSelected: '',\r\n      userDetail: {\r\n        first_name: '',\r\n        last_name: '',\r\n        sign: ''\r\n      },\r\n      address: [],\r\n      addressSelected: '',\r\n      attendees: [],\r\n      attendeesSelected: [],\r\n      meetingType: [],\r\n      meetingTypeSelected: '',\r\n      leader: [],\r\n      leaderSelected: '',\r\n      meetingOrders: [],\r\n      popUp: false,\r\n      disabled: false,\r\n      periodTime: '',\r\n      message: '',\r\n      status: '2',\r\n      linkAdress: '',\r\n      sumTime: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - ایجاد جلسه`\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    if (id) {\r\n      this.setState({ id: id })\r\n      this.fetchData(id)\r\n    }\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs.startHourOpen &&\r\n      !this.refs.startHourOpen.contains(event.target)\r\n    ) {\r\n      if (this.startHourOpen) {\r\n        this.startHourOpen(false)\r\n      }\r\n    }\r\n    if (\r\n      this.refs.endHourOpen &&\r\n      !this.refs.endHourOpen.contains(event.target)\r\n    ) {\r\n      if (this.endHourOpen) {\r\n        this.endHourOpen(false)\r\n      }\r\n    }\r\n  }\r\n  fetchData = id => {\r\n    if (this.state.token) {\r\n      axios\r\n        .get(`${StaticData.domainIp}/meeting/getPart1Detail/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              subjectMeeting: response.data.content.subject,\r\n              date: this.handleDate(response.data.content.holdingTime),\r\n              startHour: response.data.content.startHour,\r\n              endHour: response.data.content.endHour,\r\n              leaderSelected: response.data.content.leader.value,\r\n              leader: response.data.content.firstDetail.leader,\r\n              meetingTypeSelected: response.data.content.meetingType.value,\r\n              meetingType: response.data.content.firstDetail.meetingType,\r\n              attendeesSelected: response.data.content.attendees,\r\n              attendees: response.data.content.firstDetail.attendees,\r\n              addressSelected: response.data.content.address.value,\r\n              address: response.data.content.firstDetail.address,\r\n              meetingOrders: Object.keys(\r\n                response.data.content.meetingOrders\r\n              ).map(_ => {\r\n                response.data.content.meetingOrders[_].attachment = Object.keys(\r\n                  response.data.content.meetingOrders[_].attachment\r\n                ).map(data => {\r\n                  return response.data.content.meetingOrders[_].attachment[data]\r\n                })\r\n                return response.data.content.meetingOrders[_]\r\n              }),\r\n              keywordsSelected: response.data.content.keywords,\r\n              keywords: response.data.content.firstDetail.keywords,\r\n              wbsSelected: response.data.content.wbs.value,\r\n              userDetail: response.data.userDetail,\r\n              message: response.data.content.verify_message,\r\n              status: response.data.content.status\r\n            })\r\n            this.calculatePeriod()\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  calculatePeriod = () => {\r\n    let first = moment.duration(this.state.startHour)\r\n    let end = moment.duration(this.state.endHour)\r\n    let b = end.subtract(first)\r\n    const any = Object.keys(this.state.meetingOrders).map(_ => {\r\n      return parseInt(this.state.meetingOrders[_].duration)\r\n    })\r\n    const sum = any.reduce((a, b) => a + b)\r\n    let time = moment.duration(sum, 'minutes')\r\n    this.setState({\r\n      periodTime: moment.utc(b.as('milliseconds')).format('HH:mm'),\r\n      sumTime: `${time._data.hours}:${time._data.minutes}`\r\n    })\r\n  }\r\n  GetTime = async (name, time) => {\r\n    await this.setState({ [name]: time })\r\n    if (name === 'startHour') {\r\n      this.setState({ endHour: '', periodTime: '' })\r\n    } else if (name === 'endHour') {\r\n      let beginningTime = moment(this.state.startHour, 'h:mma')\r\n      let endTime = moment(this.state.endHour, 'h:mma')\r\n      if (!beginningTime.isBefore(endTime)) {\r\n        this.setState({\r\n          startHour: '',\r\n          endHour: '',\r\n          periodTime: ''\r\n        })\r\n        this.ResetAllMasked()\r\n        Notification.notify(Message.text(911), 'warning')\r\n      } else {\r\n        let first = moment.duration(this.state.startHour)\r\n        let end = moment.duration(this.state.endHour)\r\n        let b = end.subtract(first)\r\n        this.setState({\r\n          periodTime: moment.utc(b.as('milliseconds')).format('HH:mm')\r\n        })\r\n      }\r\n    }\r\n  }\r\n  AddOrder = () => {\r\n    let obj = {\r\n      description: '',\r\n      attachment: [],\r\n      attachmentName: [],\r\n      responsible: '',\r\n      duration: ''\r\n    }\r\n    this.setState({\r\n      meetingOrders: [...this.state.meetingOrders, obj]\r\n    })\r\n  }\r\n  handleChangeList = e => {\r\n    let array = this.state.meetingOrders\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let name = e.target.name.split('_')[0]\r\n    let obj = array[key]\r\n    obj[name] = handleString(e.target.value)\r\n    if (name === 'duration') {\r\n      this.MaskedInputBlur()\r\n    }\r\n    this.setState({ meetingOrders: array })\r\n  }\r\n  MaskedInputBlur = () => {\r\n    this.setState({ foucs: '' })\r\n    const any = Object.keys(this.state.meetingOrders).map(_ => {\r\n      return parseInt(this.state.meetingOrders[_].duration)\r\n    })\r\n    const sum = any.reduce((a, b) => a + b)\r\n    if (sum) {\r\n      let time = moment.duration(sum, 'minutes')\r\n      let beginningTime = moment(\r\n        `${time._data.hours}:${time._data.minutes}`,\r\n        'h:mma'\r\n      )\r\n      this.setState({\r\n        sumTime: `${time._data.hours}:${time._data.minutes}`\r\n      })\r\n      let endTime = moment(this.state.periodTime, 'h:mma')\r\n      if (!beginningTime.isBefore(endTime)) {\r\n        this.ResetAllMasked()\r\n        Notification.notify(Message.text(913), 'warning')\r\n      }\r\n    }\r\n  }\r\n  ResetAllMasked = () => {\r\n    let newList = Object.keys(this.state.meetingOrders).map(_ => {\r\n      this.state.meetingOrders[_].duration = ''\r\n      return this.state.meetingOrders[_]\r\n    })\r\n    this.setState({ meetingOrders: newList, foucs: '', sumTime: '' })\r\n  }\r\n  deleteFile = async (key, num, files, names) => {\r\n    let Document = await this.state.meetingOrders\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await this.setState({ meetingOrders: Document })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        key,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.meetingOrders[key][nameState],\r\n      arrayName = this.state.meetingOrders[key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/meeting`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let Document = await this.state.meetingOrders\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ meetingOrders: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleDate = date => {\r\n    if (date === undefined || date === null) {\r\n      return undefined\r\n    } else {\r\n      return moment(`${date}`, 'jYYYY/jM/jD')\r\n    }\r\n  }\r\n  getDateList = (key, name, date) => {\r\n    let list = this.state.meetingOrders\r\n    let obj = list[key]\r\n    obj[name] = getCustomFormat(date, false)\r\n    this.setState({ meetingOrders: list })\r\n  }\r\n  handleSubmit = async () => {\r\n    const meetingType =\r\n      this.state.meetingTypeSelected === 'مجازی'\r\n        ? true\r\n        : this.state.addressSelected !== '' &&\r\n          this.state.meetingTypeSelected !== ''\r\n    const check =\r\n      this.state.subjectMeeting !== '' &&\r\n      this.state.date &&\r\n      meetingType === true &&\r\n      this.state.attendeesSelected.length > 0 &&\r\n      this.state.startHour !== '' &&\r\n      this.state.endHour !== '' &&\r\n      this.state.leaderSelected !== ''\r\n    let meetingOrders = this.state.meetingOrders\r\n    let i = 0\r\n    let order = false\r\n    while (i < meetingOrders.length) {\r\n      order =\r\n        meetingOrders[i].description !== '' &&\r\n        meetingOrders[i].responsible !== '' &&\r\n        meetingOrders[i].duration !== ''\r\n      if (!order) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    if (check && order) {\r\n      const attendeesSelected = Object.keys(this.state.attendeesSelected).map(\r\n        data => {\r\n          return this.state.attendeesSelected[data].value\r\n        }\r\n      )\r\n      const keywordsSelected = Object.keys(this.state.keywordsSelected).map(\r\n        data => {\r\n          return this.state.keywordsSelected[data].value\r\n        }\r\n      )\r\n      const meetings = Object.assign(\r\n        {},\r\n        Object.keys(meetingOrders).map(data => {\r\n          meetingOrders[data].attachment = Object.assign(\r\n            {},\r\n            meetingOrders[data].attachment\r\n          )\r\n          return meetingOrders[data]\r\n        })\r\n      )\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      let datareg = new FormData()\r\n      datareg.append('id', this.state.id)\r\n      datareg.append('subject', this.state.subjectMeeting)\r\n      datareg.append(\r\n        'holdingTime',\r\n        getCustomFormat(this.state.date, false)\r\n          ? getCustomFormat(this.state.date, false)\r\n          : ''\r\n      )\r\n      datareg.append('startHour', this.state.startHour)\r\n      datareg.append('endHour', this.state.endHour)\r\n      datareg.append('leader', this.state.leaderSelected)\r\n      datareg.append('meetingType', this.state.meetingTypeSelected)\r\n      datareg.append('attendees', attendeesSelected.join(','))\r\n      datareg.append('address', this.state.addressSelected)\r\n      datareg.append('meetingOrders', JSON.stringify(meetings))\r\n      datareg.append('keywords', keywordsSelected.join(','))\r\n      datareg.append(\r\n        'wbs',\r\n        this.state.wbsSelected.value ? this.state.wbsSelected.value : ''\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/meeting/updateFirstStep`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(915), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect || this.state.status !== '2') {\r\n        return <Redirect to='/index-metting' />\r\n      } else\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu nameRole='Home' nameUrl={this.props.nameUrl} />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>ویرایش جلسه</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          {this.state.message ? (\r\n                            <div className='col-12'>\r\n                              <div className='message-error'>\r\n                                <label className='strong'>\r\n                                  صورت جلسه به دلیل زیر رد شد :{' '}\r\n                                </label>\r\n                                <p className='m-0'>{this.state.message}</p>\r\n                              </div>\r\n                            </div>\r\n                          ) : (\r\n                            ''\r\n                          )}\r\n                          <div className='form row justify-content-start'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.foucs === `subjectMeeting` ||\r\n                                  this.state.subjectMeeting !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  موضوع جلسه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-right'\r\n                                  name='subjectMeeting'\r\n                                  value={handleString(\r\n                                    this.state.subjectMeeting\r\n                                  )}\r\n                                  readOnly={false}\r\n                                  onChange={this.handleChange}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.foucs === `date` ||\r\n                                  (this.state.date && this.state.date !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    زمان برگزاری\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <DatePicker\r\n                                    persianDigits={true}\r\n                                    isGregorian={false}\r\n                                    timePicker={false}\r\n                                    onChange={date => this.setState({ date })}\r\n                                    value={this.state.date}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form clock persian ${\r\n                                  this.state.foucs === `startHour` ||\r\n                                  (this.state.startHour &&\r\n                                    this.state.startHour !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                ref='startHourOpen'\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <QueryBuilderIcon />\r\n                                </div>\r\n                                <div className='col p-0 ltr'>\r\n                                  <label>ساعت شروع</label>\r\n                                  <Clock\r\n                                    getTime={(name, time) =>\r\n                                      this.GetTime(name, time)\r\n                                    }\r\n                                    name='startHour'\r\n                                    value={this.state.startHour}\r\n                                    getFocus={e => (this.startHourOpen = e)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form clock persian ${\r\n                                  this.state.foucs === `endHour` ||\r\n                                  (this.state.endHour &&\r\n                                    this.state.endHour !== '')\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                ref='endHourOpen'\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <QueryBuilderIcon />\r\n                                </div>\r\n                                <div className='col p-0 ltr'>\r\n                                  <label>ساعت خاتمه</label>\r\n                                  {this.state.startHour !== '' && (\r\n                                    <Clock\r\n                                      getTime={(name, time) =>\r\n                                        this.GetTime(name, time)\r\n                                      }\r\n                                      name='endHour'\r\n                                      value={this.state.endHour}\r\n                                      getFocus={e => (this.endHourOpen = e)}\r\n                                    />\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `leaderSelected` ||\r\n                                  this.state.leaderSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  دبیر جلسه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <select\r\n                                  name={`leaderSelected`}\r\n                                  value={this.state.leaderSelected}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.leader.map((data3, index2) => (\r\n                                    <option key={index2} value={data3.value}>\r\n                                      {data3.label}\r\n                                    </option>\r\n                                  ))}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `meetingTypeSelected` ||\r\n                                  this.state.meetingTypeSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  نحوه برگزاری\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <select\r\n                                  name={`meetingTypeSelected`}\r\n                                  value={this.state.meetingTypeSelected}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={e => {\r\n                                    this.handleChange(e)\r\n                                    this.setState({\r\n                                      addressSelected: '',\r\n                                      linkAdress: '',\r\n                                      foucs: ''\r\n                                    })\r\n                                  }}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.meetingType.map(\r\n                                    (data2, index1) => (\r\n                                      <option key={index1} value={data2.value}>\r\n                                        {data2.label}\r\n                                      </option>\r\n                                    )\r\n                                  )}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className='field-form selectBox'>\r\n                                <div className='icon-field'>\r\n                                  <PeopleIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <CreatableSelect\r\n                                    value={this.state.attendeesSelected}\r\n                                    onChange={newValue => {\r\n                                      this.setState({\r\n                                        attendeesSelected: newValue\r\n                                      })\r\n                                    }}\r\n                                    isMulti\r\n                                    options={this.state.attendees}\r\n                                    placeholder={\r\n                                      <label>\r\n                                        حاضرین\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `addressSelected` ||\r\n                                  this.state.foucs === 'linkAdress' ||\r\n                                  this.state.addressSelected !== '' ||\r\n                                  this.state.linkAdress !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <LocationOnIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    آدرس\r\n                                    {this.state.meetingTypeSelected ===\r\n                                    'مجازی' ? (\r\n                                      ''\r\n                                    ) : (\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    )}\r\n                                  </label>\r\n                                  {this.state.meetingTypeSelected ===\r\n                                  'مجازی' ? (\r\n                                    <input\r\n                                      className='text-right'\r\n                                      name='linkAdress'\r\n                                      value={handleString(\r\n                                        this.state.linkAdress\r\n                                      )}\r\n                                      readOnly={false}\r\n                                      onChange={this.handleChange}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                    />\r\n                                  ) : (\r\n                                    <select\r\n                                      name={`addressSelected`}\r\n                                      value={this.state.addressSelected}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                      onChange={this.handleChange}\r\n                                    >\r\n                                      <option className='d-none'></option>\r\n                                      {this.state.address.map((data, key) => (\r\n                                        <option key={key} value={data.value}>\r\n                                          {data.label}\r\n                                        </option>\r\n                                      ))}\r\n                                    </select>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='title-password col-12'>\r\n                              <h2 className='IranSans_Bold'>دستورات جلسه</h2>\r\n                              <div className='line'></div>\r\n                            </div>\r\n                            {this.state.meetingOrders.map((metting, _index) => (\r\n                              <div className='w-100 row m-0' key={_index}>\r\n                                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian textarea ${\r\n                                      this.state.foucs ===\r\n                                        `description_${_index}` ||\r\n                                      handleCheckText(metting.description)\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <div className='col p-0'>\r\n                                      <label className='textarea'>\r\n                                        دستور جلسه\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                      <textarea\r\n                                        className='w-100'\r\n                                        type='text'\r\n                                        name={`description_${_index}`}\r\n                                        onFocus={e =>\r\n                                          this.OnFocus(e.target.name)\r\n                                        }\r\n                                        onBlur={this.OnBlur}\r\n                                        onChange={this.handleChangeList}\r\n                                        value={handleString(\r\n                                          metting.description\r\n                                        )}\r\n                                      ></textarea>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                  <div className={`field-form persian`}>\r\n                                    <label>تصویر پیوست</label>\r\n                                    <div className='allName col row m-0 justify-content-end'>\r\n                                      {metting.attachmentName &&\r\n                                      metting.attachmentName.length\r\n                                        ? metting.attachmentName.map(\r\n                                            (name, key) => (\r\n                                              <span key={key}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      _index,\r\n                                                      key,\r\n                                                      `attachment`,\r\n                                                      `attachmentName`\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )\r\n                                        : ''}\r\n                                    </div>\r\n                                    <input\r\n                                      className='d-none'\r\n                                      type='file'\r\n                                      id={`attachment_${_index}`}\r\n                                      multiple\r\n                                      onChange={e =>\r\n                                        this.handleUpload(\r\n                                          e,\r\n                                          `attachment_${_index}`,\r\n                                          `attachmentName_${_index}`\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    <label\r\n                                      className='upload-label'\r\n                                      htmlFor={`attachment_${_index}`}\r\n                                    >\r\n                                      {this.state.loading ===\r\n                                      `attachment_${_index}` ? (\r\n                                        <Loading className='form-loader w-auto' />\r\n                                      ) : (\r\n                                        <AttachFileIcon />\r\n                                      )}\r\n                                      فایل پیوست\r\n                                    </label>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian ${\r\n                                      this.state.foucs ===\r\n                                        `responsible_${_index}` ||\r\n                                      (metting.responsible &&\r\n                                        metting.responsible !== '')\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <label>\r\n                                      مطرح کننده\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    </label>\r\n                                    <select\r\n                                      name={`responsible_${_index}`}\r\n                                      value={metting.responsible}\r\n                                      onFocus={e => this.OnFocus(e.target.name)}\r\n                                      onBlur={this.OnBlur}\r\n                                      onChange={this.handleChangeList}\r\n                                    >\r\n                                      <option className='d-none'></option>\r\n                                      <option value='کارفرما'>کارفرما</option>\r\n                                      <option value='مشارکت'>مشارکت</option>\r\n                                      <option value='مشاور'>مشاور</option>\r\n                                      <option value='سازنده'>سازنده</option>\r\n                                      <option value='شخص ثالث'>شخص ثالث</option>\r\n                                      <option value='پیمانکار فرعی'>\r\n                                        پیمانکار فرعی\r\n                                      </option>\r\n                                    </select>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                  <div\r\n                                    className={`field-form persian field-clock ${\r\n                                      this.state.foucs ===\r\n                                        `duration_${_index}` ||\r\n                                      (metting.duration &&\r\n                                        metting.duration !== '')\r\n                                        ? 'active'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <div className='icon-field'>\r\n                                      <DateRangeIcon />\r\n                                    </div>\r\n                                    <div className='col p-0'>\r\n                                      <label>\r\n                                        زمان تقریبی (بر حسب دقیقه)\r\n                                        <span className='star IranSans_Bold'>\r\n                                          *\r\n                                        </span>\r\n                                      </label>\r\n                                      {this.state.periodTime !== '' && (\r\n                                        <MaskedInput\r\n                                          mask='999'\r\n                                          name={`duration_${_index}`}\r\n                                          value={metting.duration}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={() => this.MaskedInputBlur()}\r\n                                          onChange={this.handleChangeList}\r\n                                          maskChar=' '\r\n                                          _index={_index}\r\n                                        />\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                <div className='col-12'>\r\n                                  <div className='line'>\r\n                                    <hr />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            ))}\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.AddOrder}>\r\n                                <AddIcon />\r\n                                افزودن دستور جلسه بیشتر\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className='field-form selectBox'>\r\n                                <CreatableSelect\r\n                                  isMulti\r\n                                  onChange={newValue =>\r\n                                    this.setState({\r\n                                      keywordsSelected: newValue\r\n                                    })\r\n                                  }\r\n                                  options={this.state.keywords}\r\n                                  value={this.state.keywordsSelected}\r\n                                  placeholder='تخصیص تگ'\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian pl-1 ${\r\n                                  this.state.foucs === `wbsSelected` ||\r\n                                  this.state.wbsSelected !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>تخصیص سطح WBS</label>\r\n                                <select\r\n                                  name={`wbsSelected`}\r\n                                  value={\r\n                                    this.state.wbsSelected.value\r\n                                      ? this.state.wbsSelected\r\n                                      : ''\r\n                                  }\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                >\r\n                                  <option className='d-none'></option>\r\n                                  {this.state.wbs.map((data, key) => (\r\n                                    <option key={key} value={data.value}>\r\n                                      {data.label}\r\n                                    </option>\r\n                                  ))}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form persian`}>\r\n                                <label>{`${this.state.userDetail.first_name}  ${this.state.userDetail.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label'\r\n                                  onClick={() => this.setState({ popUp: true })}\r\n                                >\r\n                                  امضا\r\n                                  <AttachFileIcon className='ml-0 mr-1' />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            {this.state.sumTime !== '' ? (\r\n                              <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                <div\r\n                                  className={`field-form value-span persian`}\r\n                                >\r\n                                  <label>زمان تقریبی جلسه :</label>\r\n                                  <span>{this.state.sumTime}</span>\r\n                                </div>\r\n                              </div>\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                            <div className='submit-form col-12'>\r\n                              <button\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ثبت اطلاعات\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.userDetail.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\library\\library.js",[],"E:\\bidboland\\src\\Meeting-management\\ViewProceedings.js",[],"E:\\bidboland\\src\\library\\dashboard.js",[],"E:\\bidboland\\src\\library\\index-library.js",[],"E:\\bidboland\\src\\library\\StandardRequest.js",[],"E:\\bidboland\\src\\daily-report\\Daily-report.js",[],"E:\\bidboland\\src\\contact\\index-contact.js",[],"E:\\bidboland\\src\\contact\\create.js",[],"E:\\bidboland\\src\\System-management\\SystemManagement.js",[],"E:\\bidboland\\src\\contact\\edit.js",[],"E:\\bidboland\\src\\RFQ\\order.js",[],"E:\\bidboland\\src\\RFQ\\uploadFile.js",[],"E:\\bidboland\\src\\RFQ\\CommentSheet.js",[],"E:\\bidboland\\src\\RFQ\\UploadDocuments.js",[],"E:\\bidboland\\src\\RFQ\\RFQ.js",[],"E:\\bidboland\\src\\notification\\index-Notification.js",[],"E:\\bidboland\\src\\index-builder\\IndexBuilder.js",[],"E:\\bidboland\\src\\index-builder\\DynamicIndex.js",[],"E:\\bidboland\\src\\FAQ\\FAQ.js",["3047"],"import React, { Component } from 'react'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess'\r\nimport bidboland from '../bidboland'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nexport default class FAQ extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.ThisMenu = null\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      open: '',\r\n      height: 0,\r\n      nameUrl: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} -  راهنمایی`\r\n    const url = window.location.href\r\n    let nameUrl = url.split('-')[url.split('-').length - 1]\r\n    this.setState({ nameUrl: nameUrl })\r\n    this.FoundUrl(nameUrl)\r\n  }\r\n  componentDidUpdate () {\r\n    if (this.ThisMenu) {\r\n      this.ThisMenu.handleState('showFAQ', false)\r\n    }\r\n  }\r\n  handleOpenBox = (key, name) => {\r\n    let elm = this.refs[`box_${key}`]\r\n    if (elm) {\r\n      if (this.state.open === key) {\r\n        this.setState({\r\n          height: 0,\r\n          open: ''\r\n        })\r\n      } else {\r\n        this.setState({\r\n          height: elm.offsetHeight,\r\n          open: this.state.open === `${key}_${name}` ? '' : `${key}_${name}`\r\n        })\r\n      }\r\n    }\r\n  }\r\n  FoundUrl = nameUrl => {\r\n    let bd = bidboland\r\n    if (bd.props.children.props.children) {\r\n      // let listUrl = bd.props.children.props.children\r\n      // let previous = document.referrer\r\n      // if (this.props.location.state) {\r\n      // if (this.props.location.state.nameUrl) {\r\n      // const nameUrl = this.props.location.state.nameUrl\r\n      this.checkByName(nameUrl)\r\n      // }\r\n      // }\r\n    }\r\n  }\r\n  checkByName = async nameUrl => {\r\n    // let datareg = await new FormData()\r\n    // await datareg.append('name', nameUrl)\r\n    await axios({\r\n      method: 'get',\r\n      url: `${StaticData.domainIp}/FAQ/checkByName?name=${nameUrl}`,\r\n      // data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          let state = this.state\r\n          state['role'] = response.data.role\r\n          state['check'] = response.data.content\r\n          this.setState(state)\r\n          if (response.data.content) {\r\n            this.fetchData(nameUrl)\r\n          }\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  fetchData = async nameUrl => {\r\n    let url = `${StaticData.domainIp}/FAQ/getByName?name=${nameUrl}`\r\n    await axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          const content = response.data.content\r\n          if (content) {\r\n            this.setState(content)\r\n          }\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n        await this.setState({ loading: '' })\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleConvert = obj => {\r\n    let list = []\r\n    if (obj) {\r\n      list = Object.keys(obj).map(data => {\r\n        return obj[data]\r\n      })\r\n    }\r\n    return list\r\n  }\r\n  render () {\r\n    const { idiom_title, title, text, idiom_object, faq_object } = this.state\r\n    return (\r\n      <div className='main'>\r\n        <div className='col-12 p-0'>\r\n          <div className='row m-0'>\r\n            <Sidebar\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n            />\r\n            <div\r\n              className={`${\r\n                this.state._close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'\r\n              } dashboard`}\r\n            >\r\n              <Menu\r\n                nameRole=''\r\n                nameUrl={this.props.nameUrl}\r\n                ThisMenu={th => (this.ThisMenu = th)}\r\n              />\r\n              <div className='w-100 row m-0 main-box-dashboard'>\r\n                <div className='boxes-dashboard row m-0 p-0'>\r\n                  <div className='main-text'>\r\n                    <div className='main-title row mr-0 ml-0'>\r\n                      <div className='title col p-0'>\r\n                        <h2 className='IranSans_Bold_FA'>راهنمای ماژول</h2>\r\n                      </div>\r\n                      <div className='support'>\r\n                        <a href='#'>درخواست پشتیبانی</a>\r\n                      </div>\r\n                    </div>\r\n                    <div className='main-paragraph'>\r\n                      {title && (\r\n                        <div className='paragraph'>\r\n                          <h3 className='title-paragraph IranSans_Bold_FA'>\r\n                            {title}\r\n                          </h3>\r\n                          {/* <p className='text-paragraph'>{title}</p> */}\r\n                        </div>\r\n                      )}\r\n                      <div className='w-100'>\r\n                        <div className='paragraph'>\r\n                          {/* <h3 className='title-paragraph IranSans_Bold_FA'>{title}</h3> */}\r\n                          <p className='text-paragraph'>{text}</p>\r\n                        </div>\r\n                      </div>\r\n                      {idiom_title && (\r\n                        <div className='list-item-paragraph'>\r\n                          <div className='title-password w-100 my-2'>\r\n                            <h2 className='IranSans_Bold'>{idiom_title}</h2>\r\n                            <div className='line'></div>\r\n                          </div>\r\n                          <ul>\r\n                            {this.handleConvert(idiom_object).map(\r\n                              (data, key) => (\r\n                                <li key={key}>\r\n                                  <label className='IranSans_Bold_FA mb-0 ml-1'>\r\n                                    {data.title} :\r\n                                  </label>\r\n                                  <p className='mb-0'>{data.text}</p>\r\n                                </li>\r\n                              )\r\n                            )}\r\n                          </ul>\r\n                        </div>\r\n                      )}\r\n\r\n                      <div className='main-paragraph-box'>\r\n                        <div className='title-password w-100 mt-3 mb-3'>\r\n                          <h2 className='IranSans_Bold'>\r\n                            سوالات متداول کاربران\r\n                          </h2>\r\n                          <div className='line'></div>\r\n                        </div>\r\n                        {this.handleConvert(faq_object).map((data, key) => (\r\n                          <div\r\n                            className={`paragraph-box ${\r\n                              this.state.open === `${key}_faq_object`\r\n                                ? 'active'\r\n                                : ''\r\n                            }`}\r\n                            key={key}\r\n                            style={{\r\n                              height:\r\n                                this.state.open === `${key}_faq_object`\r\n                                  ? `calc(${this.state.height}px + 5em)`\r\n                                  : '5em'\r\n                            }}\r\n                          >\r\n                            <div className='title-box'>\r\n                              <div className='col p-0'>\r\n                                <h4 className='title-box-text'>\r\n                                  <span className='circle'></span>\r\n                                  {data.title}\r\n                                </h4>\r\n                              </div>\r\n                              <span\r\n                                className={`more-detail pointer ${\r\n                                  this.state.open === `${key}_faq_object`\r\n                                    ? 'IranSans_Bold_FA'\r\n                                    : ''\r\n                                }`}\r\n                                onClick={() =>\r\n                                  this.handleOpenBox(key, 'faq_object')\r\n                                }\r\n                              >\r\n                                جزئیات بیشتر\r\n                                <ExpandLessIcon />\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='paragraph-box-text'\r\n                              ref={`box_${key}`}\r\n                            >\r\n                              <p>{data.text}</p>\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\WBS\\ProjectIdentifyEdit.js",[],"E:\\bidboland\\src\\EngineeringManagement\\DCC.js",["3048","3049","3050","3051","3052"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../Customization/customization'\r\nimport StaticData from '../staticData'\r\nimport Permision from '../permision/permision'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport UploadInformation from '../Customization/UploadInformation'\r\nimport CounterTab from '../Customization/CounterTab'\r\nimport SearchTable from '../table/SearchTable'\r\nimport DocumentControlCenter from './DocumentControlCenter/DocumentControlCenter'\r\nexport default class EngineeringManagement extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.Search = null\r\n        this.Permision = new Permision()\r\n        this.Reset = null\r\n        this.FilterReset = null\r\n        this.state = {\r\n            token: Cookies.get('token'),\r\n            header: [],\r\n            selected: [],\r\n            open: false,\r\n            search: '',\r\n            select: 1,\r\n            accessTab: true,\r\n            defaultSelected: [],\r\n            num: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        document.title = `${StaticData.Title} - آرشیو فنی شناسنامه`\r\n        document.addEventListener('mousedown', this.handleClickOutside)\r\n        setTimeout(async () => {\r\n            this.state.header.forEach(head => {\r\n                if (!head.notDefault) {\r\n                    this.setState({\r\n                        [`_header_${head.name}`]: true,\r\n                        selected: [...this.state.selected, head.name]\r\n                    })\r\n                }\r\n            })\r\n        }, 50)\r\n    }\r\n    handleState = (obj) => {\r\n        this.setState(obj)\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside)\r\n    }\r\n    loadCheck = async () => {\r\n        await this.setState({ selected: [] })\r\n        await Object.keys(this.state).map(value => {\r\n            if (value.includes('_header_')) {\r\n                this.setState({ [value]: false })\r\n            }\r\n            return true\r\n        })\r\n        await this.state.header.forEach(head => {\r\n            if (!head.notDefault) {\r\n                this.setState({\r\n                    [`_header_${head.name}`]: true,\r\n                    selected: [...this.state.selected, head.name]\r\n                })\r\n            }\r\n        })\r\n    }\r\n    handleSelect = async (checked, name) => {\r\n        if (this.state.selected.length > 1 || checked) {\r\n            await this.setState({ [name]: checked })\r\n            let array = []\r\n            for (let value in this.state) {\r\n                if (value.includes('_header_')) {\r\n                    if (this.state[value]) {\r\n                        let _name = value.split('_header_')[1]\r\n                        array.push(_name)\r\n                    }\r\n                }\r\n            }\r\n            await this.setState({ selected: array })\r\n        }\r\n    }\r\n    handleButtonClick = () => {\r\n        this.setState(state => {\r\n            return {\r\n                open: !state.open\r\n            }\r\n        })\r\n    }\r\n    handleClickOutside = event => {\r\n        if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n            this.setState({\r\n                open: false\r\n            })\r\n        }\r\n    }\r\n    RemoveFilter = async () => {\r\n        let list = await []\r\n        await this.setState({ selected: [] })\r\n        await this.state.header.filter(head => {\r\n            if (!head.notDefault) {\r\n                list.push(head.name)\r\n            }\r\n        })\r\n        await this.setState({ selected: list, search: '' })\r\n        await Object.keys(this.state).map(value => {\r\n            if (value.includes('_header_')) {\r\n                this.setState({ [value]: false })\r\n            }\r\n            return true\r\n        })\r\n        await this.state.header.forEach(head => {\r\n            if (!head.notDefault) {\r\n                this.setState({\r\n                    [`_header_${head.name}`]: true,\r\n                    selected: [...this.state.selected, head.name]\r\n                })\r\n            }\r\n        })\r\n        if (this.Reset !== null && this.FilterReset !== null) {\r\n            await this.FilterReset()\r\n            await this.Reset()\r\n        }\r\n    }\r\n    HasNotRol = () => {\r\n        this.setState({ select: 0, accessTab: false, _404: true })\r\n    }\r\n    getRole = (response, status) => {\r\n        setTimeout(() => {\r\n            this.loadCheck()\r\n        }, 100)\r\n        const propsState = this.props.location.state || {}\r\n        const permision = (role, name) => this.Permision.handlePermision(role, name)\r\n        if (status === 'response') {\r\n            if (response.status === 200) {\r\n                this.setState({ role: response.data.role })\r\n                if (this.props.location && propsState) {\r\n                    if (propsState.select === 1) {\r\n                        if (permision(response.data.role, 'dcc')) {\r\n                            this.setState({ select: 1, accessTab: true })\r\n                        } else {\r\n                            this.HasNotRol()\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (permision(response.data.role, 'dcc')) {\r\n                        this.setState({ select: 1, accessTab: true })\r\n                    } else if (permision(response.data.role, 'p&id')) {\r\n                        this.setState({ select: 2, accessTab: true })\r\n                    } else {\r\n                        this.HasNotRol()\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.setState({ select: 0, accessTab: false })\r\n            if (response.response) {\r\n                Notification.notify(Message.text(response.response.status), 'error')\r\n            }\r\n        }\r\n    }\r\n    ChangeTab = async num => {\r\n        this.setState({ select: num, search: '' })\r\n        this.loadCheck()\r\n    }\r\n    handleShow = () => {\r\n        const { token, select } = this.state\r\n        if (token) {\r\n            switch (select) {\r\n                case 1:\r\n                    return <DocumentControlCenter {...this} selected={this.state.selected} />\r\n                default:\r\n                    return ''\r\n            }\r\n        }\r\n    }\r\n    handleShowTab = () => {\r\n        let list = [\r\n            {\r\n                name: 'مدیریت مهندسی',\r\n                value: 1,\r\n                access: this.Permision.handlePermision(this.state.role, 'dcc')\r\n            },\r\n\r\n        ]\r\n        return list\r\n    }\r\n    handleNameRole = () => {\r\n        const role = this.state.role\r\n        if (role['dcc'] || role === 'all') {\r\n            return 'dcc'\r\n        } else return ''\r\n    }\r\n    handleThis = (name, value) => {\r\n        this[name] = value\r\n    }\r\n    render() {\r\n        const { token, _404, _close, role, upload, accessTab, select, open } = this.state\r\n        if (!token) {\r\n            return <Redirect to='/Login' />\r\n        } else if (_404) {\r\n            return <Redirect to='/404' />\r\n        } else\r\n            return (\r\n                <div className='main'>\r\n                    <div className='col-12 p-0'>\r\n                        <div className='row m-0'>\r\n                            <Sidebar handleState={(name, value) => this.setState({ [name]: value })} />\r\n                            <div className={`${_close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'} dashboard`}>\r\n                                <Menu\r\n                                    nameRole={role ? this.handleNameRole() : 'Home'}\r\n                                    getRole={this.getRole}\r\n                                    nameUrl={this.props.nameUrl}\r\n                                />\r\n                                <div className='w-100 row m-0 main-box-dashboard'>\r\n                                    <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                                        <div className='col-12 header-index pr-0 pl-0'>\r\n                                            <div className='row m-0'>\r\n                                                <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                                                    <div className='icon-header'>\r\n                                                        <div className='icon'>\r\n                                                            <span\r\n                                                                className='item'\r\n                                                                onClick={this.RemoveFilter}\r\n                                                            >\r\n                                                                <RefreshIcon />\r\n                                                                <span>حذف فیلترها</span>\r\n                                                            </span>\r\n                                                        </div>\r\n                                                        <div\r\n                                                            className='icon position-relative justify-content-center'\r\n                                                            ref='container'\r\n                                                        >\r\n                                                            <span\r\n                                                                className='item'\r\n                                                                onClick={this.handleButtonClick}\r\n                                                            >\r\n                                                                <SettingsIcon />\r\n                                                                <span>سفارشی سازی</span>\r\n                                                            </span>\r\n                                                            {open && (\r\n                                                                <Customization\r\n                                                                    {...this}\r\n                                                                    handleSelect={this.handleSelect}\r\n                                                                />\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <SearchTable\r\n                                                    {...this}\r\n                                                    handleState={(name, value) =>\r\n                                                        this.setState({ [name]: value })\r\n                                                    }\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='tab-form rtl'>\r\n                                            <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start rtl'>\r\n                                                {accessTab &&\r\n                                                    this.handleShowTab().map(\r\n                                                        (tab, index) =>\r\n                                                            tab.access && (\r\n                                                                <div\r\n                                                                    className={`col-xl-3 col-lg-3 col mr-0 pr-3 pl-0`}\r\n                                                                    onClick={() => this.ChangeTab(tab.value)}\r\n                                                                    key={index}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        className={`item-tab rtl mr-0 w-100 p-0 col-12 ${select === tab.value\r\n                                                                            ? 'active IranSans_Bold'\r\n                                                                            : ''\r\n                                                                            }`}\r\n                                                                    >\r\n                                                                        <span>\r\n                                                                            <label\r\n                                                                                className={`${select === tab.value\r\n                                                                                    ? 'IranSans_Bold'\r\n                                                                                    : ''\r\n                                                                                    }`}\r\n                                                                            >\r\n                                                                                <CounterTab\r\n                                                                                    key={index}\r\n                                                                                    tafazol={\r\n                                                                                        this.handleShowTab().filter(\r\n                                                                                            item => !item.access\r\n                                                                                        ).length\r\n                                                                                    }\r\n                                                                                    data={tab}\r\n                                                                                />\r\n                                                                                .\r\n                                                                            </label>\r\n                                                                            {tab.name}\r\n                                                                        </span>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            )\r\n                                                    )}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                                            {this.handleShow()}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\ShowTsr\\ShowTsr.js",[],"E:\\bidboland\\src\\WBS\\ProjectIdentifyForm.js",[],"E:\\bidboland\\src\\Project\\TQ\\TqForm.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\ShowTransmittal.js",["3053"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport Menu from '../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../staticData'\r\nimport TransmittalDisabled from './TransmittalDisabled'\r\nimport CommnetSheet from './CommentSheet'\r\nimport axios from 'axios'\r\nimport Permision from '../../permision/permision'\r\nimport ReplaySheet from './ReplaySheet'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport PrintIcon from '@material-ui/icons/Print'\r\nimport CounterTab from '../../Customization/CounterTab'\r\n\r\nexport default class ShowTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      select: 1,\r\n      redirect: false,\r\n      id: '',\r\n      CheckVendor: true,\r\n      accessTab: false,\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    // if (this.props.location.state) {\r\n    //     if (this.props.location.state.status) {\r\n    //         this.setState({ select: this.props.location.state.status })\r\n    //     }\r\n    // }\r\n    document.title = `${StaticData.Title} -  مشاهده فرم ترنسمیتال`\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    if (id) {\r\n      this.setState({ id: id })\r\n      this.fetchData(id)\r\n    }\r\n  }\r\n  fetchData = id => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/vendorTransmittal/get/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        this.setState({ CheckVendor: response.data.role === 'vendor' })\r\n        if (response.status === 200) {\r\n          let state = response.data.content\r\n          state['roleName'] =\r\n            response.data.role === 'vendor' ? 'vendor' : 'user'\r\n          state['role'] = response.data.role\r\n          this.setState(state)\r\n          if (this.props.location && this.props.location.state) {\r\n            if (this.props.location.state.status === 1) {\r\n              if (\r\n                this.Permision.handlePermision(\r\n                  response.data.role,\r\n                  'builders_transmittal',\r\n                  true\r\n                )\r\n              ) {\r\n                this.setState({ select: 1, accessTab: true })\r\n              } else {\r\n                this.setState({ select: 0, accessTab: false, _404: true })\r\n              }\r\n            } else if (this.props.location.state.status === 2) {\r\n              if (\r\n                this.Permision.handlePermision(\r\n                  response.data.role,\r\n                  'vpis_comment_sheet',\r\n                  true\r\n                )\r\n              ) {\r\n                this.setState({ select: 2, accessTab: true })\r\n              } else {\r\n                this.setState({ select: 0, accessTab: false, _404: true })\r\n              }\r\n            } else if (this.props.location.state.status === 3) {\r\n              if (\r\n                this.Permision.handlePermision(\r\n                  response.data.role,\r\n                  'vpis_reply_sheet',\r\n                  true\r\n                )\r\n              ) {\r\n                this.setState({ select: 3, accessTab: true })\r\n              } else {\r\n                this.setState({ select: 0, accessTab: false, _404: true })\r\n              }\r\n            }\r\n          } else {\r\n            if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'builders_transmittal',\r\n                true\r\n              )\r\n            ) {\r\n              this.setState({ select: 1, accessTab: true })\r\n            } else if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'vpis_comment_sheet',\r\n                true\r\n              )\r\n            ) {\r\n              this.setState({ select: 2, accessTab: true })\r\n            } else if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'vpis_reply_sheet',\r\n                true\r\n              )\r\n            ) {\r\n              this.setState({ select: 3, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          }\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          if (err.response.status === 404) {\r\n            this.setState({ back: true })\r\n          }\r\n        }\r\n      })\r\n  }\r\n  handleShow = () => {\r\n    switch (this.state.select) {\r\n      case 1:\r\n        if (\r\n          this.Permision.handlePermision(\r\n            this.state.role,\r\n            'builders_transmittal',\r\n            true\r\n          )\r\n        ) {\r\n          return (\r\n            <TransmittalDisabled\r\n              {...this.state}\r\n              changeRedirect={e => this.setState({ redirect: e })}\r\n              CheckVendor={this.state.CheckVendor}\r\n            />\r\n          )\r\n        } else return ''\r\n      case 2:\r\n        if (\r\n          this.Permision.handlePermision(\r\n            this.state.role,\r\n            'vpis_comment_sheet',\r\n            true\r\n          )\r\n        ) {\r\n          return (\r\n            <CommnetSheet\r\n              {...this.state.commentSheet}\r\n              id={this.state.id}\r\n              CheckVendor={this.state.CheckVendor}\r\n              handleBack={e => this.setState({ back: e })}\r\n              changeRedirect={e => this.setState({ redirect: e })}\r\n              role={this.state.role}\r\n            />\r\n          )\r\n        } else return ''\r\n      case 3:\r\n        if (\r\n          this.Permision.handlePermision(\r\n            this.state.role,\r\n            'vpis_reply_sheet',\r\n            true\r\n          )\r\n        ) {\r\n          return (\r\n            <ReplaySheet\r\n              id={this.state.id}\r\n              handleBack={e => this.setState({ back: e })}\r\n              role={this.state.role}\r\n            />\r\n          )\r\n        } else return ''\r\n    }\r\n  }\r\n  handleShowTab = () => {\r\n    let listTab = [\r\n      {\r\n        name: 'Transmittal',\r\n        value: 1,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'builders_transmittal',\r\n          true\r\n        )\r\n      },\r\n      {\r\n        name: 'Comment Sheet',\r\n        value: 2,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'vpis_comment_sheet',\r\n          true\r\n        )\r\n      },\r\n      {\r\n        name: 'Reply Sheet',\r\n        value: 3,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'vpis_reply_sheet',\r\n          true\r\n        )\r\n      }\r\n    ]\r\n    return listTab\r\n  }\r\n  ChangeTab = num => {\r\n    this.setState({ select: num, search: '' })\r\n    // this.loadCheck()\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return <Redirect to={`/purchase-engineering`} />\r\n      } else {\r\n        if (this.state.back) {\r\n          return <Redirect to='/404' />\r\n        } else\r\n          return (\r\n            <div className='main'>\r\n              <div className='col-12 p-0'>\r\n                <div className='row m-0'>\r\n                  <Sidebar\r\n                    handleState={(name, value) =>\r\n                      this.setState({ [name]: value })\r\n                    }\r\n                  />\r\n                  <div\r\n                    className={`${\r\n                      this.state._close\r\n                        ? 'mainSideClose'\r\n                        : 'col-xl-10 col-lg-10 p-0'\r\n                    } dashboard`}\r\n                  >\r\n                    <Menu\r\n                      nameRole='builders_transmittal'\r\n                      vendor={true}\r\n                      nameUrl={this.props.nameUrl}\r\n                    />\r\n                    <div className='w-100 row m-0 main-box-dashboard'>\r\n                      <div className='boxes-dashboard row m-0 p-0'>\r\n                        <div className='main-form'>\r\n                          <div className='title-from'>\r\n                            <h2>انتقال سند - Document Transmittal</h2>\r\n                          </div>\r\n                          <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                            {this.state.status === '1' ||\r\n                            this.state.status === 1 ? (\r\n                              <div className='tab-form ltr'>\r\n                                <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start'>\r\n                                  {this.state.accessTab &&\r\n                                    this.handleShowTab().map(\r\n                                      (tab, index) =>\r\n                                        tab.access && (\r\n                                          <div\r\n                                            className={`item-tab ltr col-xl-4 ${\r\n                                              this.state.select === tab.value\r\n                                                ? 'active IranSans_Bold'\r\n                                                : ''\r\n                                            }`}\r\n                                            onClick={() =>\r\n                                              this.ChangeTab(tab.value)\r\n                                            }\r\n                                            key={index}\r\n                                          >\r\n                                            <span>\r\n                                              <label\r\n                                                className={`${\r\n                                                  this.state.select ===\r\n                                                  tab.value\r\n                                                    ? 'IranSans_Bold'\r\n                                                    : ''\r\n                                                }`}\r\n                                              >\r\n                                                <CounterTab\r\n                                                  key={index}\r\n                                                  tafazol={\r\n                                                    this.handleShowTab().filter(\r\n                                                      item => !item.access\r\n                                                    ).length\r\n                                                  }\r\n                                                  data={tab}\r\n                                                />\r\n                                                .\r\n                                              </label>\r\n                                              {tab.name}\r\n                                            </span>\r\n                                          </div>\r\n                                        )\r\n                                    )}\r\n                                </div>\r\n                              </div>\r\n                            ) : this.state.status === '0' ||\r\n                              this.state.status === 0 ? (\r\n                              <div className='col-12'>\r\n                                <div className='message-error'>\r\n                                  <label className='strong'>\r\n                                    ترنسمیتال به دلیل زیر رد شد :{' '}\r\n                                  </label>\r\n                                  <p className='m-0'>{this.state.message}</p>\r\n                                </div>\r\n                              </div>\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                            {this.handleShow()}\r\n                            {this.state.select === 1 ? (\r\n                              <div\r\n                                className={`col-12 mt-3 mb-3 main-print ${\r\n                                  this.state.status === '1' ||\r\n                                  this.state.status === 1\r\n                                    ? ''\r\n                                    : 'disabled'\r\n                                }`}\r\n                              >\r\n                                {(this.state.status === '1' ||\r\n                                  this.state.status === 1) &&\r\n                                this.Permision.handlePermision(\r\n                                  this.state.role,\r\n                                  'builders_transmittal',\r\n                                  true\r\n                                ) ? (\r\n                                  <a\r\n                                    href={`${StaticData.domainIp}/vendorTransmittal/print/${this.state.id}`}\r\n                                    target='_blank'\r\n                                    rel='noreferrer'\r\n                                    className='print-link'\r\n                                  >\r\n                                    <PrintIcon />\r\n                                    چاپ\r\n                                  </a>\r\n                                ) : (\r\n                                  <span className='print-link'>\r\n                                    <PrintIcon />\r\n                                    چاپ\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n      }\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\TQ\\TqTable.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\Transmital.js",["3054","3055"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport Menu from '../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../staticData'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../layout/loading'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport axios from 'axios'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n// import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Permision from '../../permision/permision'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport CancelButton from '../../layout/CancelButton'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nexport default class CreateVendorTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      counter: 1,\r\n      token: Cookies.get('token'),\r\n      Selected: 0,\r\n      SignFile: '',\r\n      SignName: '',\r\n      Transmittal_No: '',\r\n      last_Transmittal_NO: '',\r\n      Transmittal_Date: '',\r\n      contractNo: '',\r\n      From: '',\r\n      Letter_NO: '',\r\n      CC: '',\r\n      To: '',\r\n      approvedBy: {},\r\n      redirect: false,\r\n      checkPermision: false,\r\n      Document: [\r\n        {\r\n          disc: '',\r\n          DocumentNo: '',\r\n          DocClass: '',\r\n          DocumentDescription: '',\r\n          Rev: '',\r\n          doctype: '',\r\n          size: '',\r\n          NoPage: '',\r\n          POI: '',\r\n          NoCoples: '',\r\n          statuCopies: true,\r\n          PyvastPdf: [],\r\n          PyvastPdfName: [],\r\n          PeyvastFile: [],\r\n          PeyvastFileName: [],\r\n          readOnly: false,\r\n          error: '',\r\n          valueDocument: '',\r\n          replyAttachment: [],\r\n          replyAttachmentName: [],\r\n          needReply: false\r\n        }\r\n      ],\r\n      listDocuments: [],\r\n      disabled: false,\r\n      mreCode: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - فرم انتقال سند سازندگان`\r\n    if (this.state.token && Cookies.get('userDetail')) {\r\n      this.setState({ mreCode: JSON.parse(Cookies.get('userDetail')).MRECode })\r\n      this.fetchData()\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/vendorTransmittal/getFirstDetail`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          this.setState({\r\n            Transmittal_No: response.data.content.thisNumber,\r\n            last_Transmittal_NO: response.data.content.lastNumber,\r\n            Transmittal_Date: response.data.content.created_at,\r\n            contractNo: response.data.content.contractNo,\r\n            From: response.data.content.from,\r\n            To: response.data.content.to,\r\n            approvedBy: response.data.content.approvedBy,\r\n            CC: response.data.content.cc,\r\n            listDocuments: response.data.content.documents,\r\n            role: response.data.role\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  handleChangeADD = e => {\r\n    let Document = this.state.Document\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let obj = Document[key]\r\n    let name = e.target.name.split('_')[0]\r\n    obj[name] = e.target.value\r\n    Document[key] = obj\r\n    this.setState({ Document: Document })\r\n  }\r\n  DeleteDocument = async (num, row = false) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[num]\r\n    let DocumentNo = await obj.DocumentNo\r\n    if (DocumentNo === '') {\r\n      await Document.splice(num, 1)\r\n      await this.setState({ Document: Document })\r\n    } else {\r\n      let datareg = await new FormData()\r\n      await datareg.append('documentNumber', DocumentNo)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/vendorTransmittal/deleteDocument`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            if (!row) {\r\n              await Document.splice(num, 1)\r\n              await this.setState({\r\n                Document: Document,\r\n                Selected: this.state.Selected - 1\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  deleteFile = async (key, num, files, names) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await this.setState({ Document: Document })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        key,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.Document[key][nameState],\r\n      arrayName = this.state.Document[key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/vendorTransmittal`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let Document = await this.state.Document\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleAddDocument = async () => {\r\n    let obj = await this.state.Document[this.state.Document.length - 1]\r\n    const check =\r\n      (await obj.disc) !== '' &&\r\n      obj.DocumentNo !== '' &&\r\n      obj.DocClass !== '' &&\r\n      obj.DocumentDescription !== '' &&\r\n      obj.Rev !== '' &&\r\n      obj.doctype !== '' &&\r\n      obj.size !== '' &&\r\n      obj.NoPage !== '' &&\r\n      obj.POI !== '' &&\r\n      obj.PyvastPdf.length > 0 &&\r\n      obj.PyvastPdfName.length > 0 &&\r\n      obj.PeyvastFile.length > 0 &&\r\n      obj.PeyvastFileName.length > 0\r\n    if (check) {\r\n      let objPush = await {\r\n        disc: '',\r\n        DocumentNo: '',\r\n        DocClass: '',\r\n        DocumentDescription: '',\r\n        Rev: '',\r\n        doctype: '',\r\n        size: '',\r\n        NoPage: '',\r\n        POI: '',\r\n        NoCoples: '',\r\n        statuCopies: true,\r\n        PyvastPdf: [],\r\n        PyvastPdfName: [],\r\n        PeyvastFile: [],\r\n        PeyvastFileName: [],\r\n        readOnly: false,\r\n        error: '',\r\n        valueDocument: '',\r\n        replyAttachment: [],\r\n        replyAttachmentName: [],\r\n        needReply: false\r\n      }\r\n      await this.setState({\r\n        Document: [...this.state.Document, objPush],\r\n        Selected: this.state.Selected + 1\r\n      })\r\n    } else {\r\n      Notification.notify(Message.text(908), 'error')\r\n    }\r\n  }\r\n  SetDocument = async (nextValue, key) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let PreviousValue = await obj.DocumentNo\r\n    if (PreviousValue !== '') {\r\n      await this.DeleteDocument(key, true)\r\n    }\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/vendorTransmittal/getDocumentDetail?documentNumber=${nextValue.value}`,\r\n        {\r\n          data: nextValue.value,\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        // if (response.data.role === 'vendor') {\r\n        //     response.data.role = {\r\n        //         vendor: 1\r\n        //     }\r\n        // }\r\n        if (response.status === 200 && response.statusText === 'OK') {\r\n          obj.DocumentNo = nextValue.value\r\n          obj.disc = response.data.content.disc\r\n          obj.DocumentDescription = response.data.content.documentDescription\r\n          obj.doctype = response.data.content.docType\r\n          obj.POI = response.data.content.additionalDetail.poi\r\n          obj.Rev = response.data.content.additionalDetail.revision\r\n          obj.NoCoples = response.data.content.additionalDetail.hardCopy\r\n          obj.DocClass = response.data.content.class\r\n          obj.readOnly = true\r\n          obj.error = ''\r\n          obj.valueDocument = nextValue\r\n          obj.needReply = response.data.content.additionalDetail.needReply\r\n          this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n          // if (response.status === 312 || response.status === 313 || response.status === 314){\r\n          obj.disc = ''\r\n          obj.DocumentDescription = ''\r\n          obj.doctype = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          // if (err.response.status === 312 || err.response.status === 313 || err.response.status === 314){\r\n          obj.disc = ''\r\n          obj.DocumentDescription = ''\r\n          obj.doctype = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n  }\r\n  handleSubmit = async () => {\r\n    let result = await {}\r\n    let check = await false\r\n    let Document = this.state.Document\r\n    let i = 0\r\n    while (i < Document.length) {\r\n      let elm = Document[i]\r\n      check =\r\n        elm.DocumentNo !== '' &&\r\n        elm.DocumentDescription !== '' &&\r\n        elm.Rev !== '' &&\r\n        elm.size !== '' &&\r\n        elm.NoPage !== '' &&\r\n        elm.POI !== '' &&\r\n        elm.PyvastPdf.length > 0 &&\r\n        elm.PeyvastFile.length > 0\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    if (\r\n      check &&\r\n      this.state.Transmittal_No !== '' &&\r\n      this.state.last_Transmittal_NO !== '' &&\r\n      this.state.Transmittal_Date !== '' &&\r\n      this.state.contractNo !== '' &&\r\n      this.state.From !== '' &&\r\n      this.state.To !== ''\r\n    ) {\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      let a = []\r\n      Document.filter(e => {\r\n        e.PyvastPdf = Object.assign({}, e.PyvastPdf)\r\n        e.PeyvastFile = Object.assign({}, e.PeyvastFile)\r\n        a.push(e)\r\n      })\r\n      let result = await Object.assign({}, a)\r\n      let datareg = await new FormData()\r\n      await datareg.append('letterNo', this.state.Letter_NO)\r\n      await datareg.append('cc', this.state.CC)\r\n      await datareg.append('documentsObject', JSON.stringify(result))\r\n      await datareg.append('mre', this.state.mreCode)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/vendorTransmittal/create`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            await this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      this.setState({ loading: '' })\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.checkPermision) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/purchase-engineering`,\r\n            state: { select: 1 }\r\n          }}\r\n        />\r\n      )\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/purchase-engineering`,\r\n              state: { select: 1 }\r\n            }}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='builders_transmittal_create'\r\n                    vendor={true}\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>انتقال سند - Document Transmittal</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='form row justify-content-end'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.Transmittal_No)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Transmittal No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='Transmittal_No'\r\n                                  value={handleString(\r\n                                    this.state.Transmittal_No\r\n                                  )}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(\r\n                                    this.state.last_Transmittal_NO\r\n                                  )\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  last Transmittal NO.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='last_Transmittal_NO'\r\n                                  value={handleString(\r\n                                    this.state.last_Transmittal_NO\r\n                                  )}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form data ${\r\n                                  handleCheckText(this.state.Transmittal_Date)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    Transmittal Date.\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-left'\r\n                                    readOnly={true}\r\n                                    name='Transmittal_Date'\r\n                                    value={handleString(\r\n                                      this.state.Transmittal_Date\r\n                                    )}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.contractNo)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Contract No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  readOnly={true}\r\n                                  name='contractNo'\r\n                                  value={handleString(this.state.contractNo)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.From)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  From.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='From'\r\n                                  value={handleString(this.state.From)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.foucs === 'Letter_NO' ||\r\n                                  handleCheckText(this.state.Letter_NO)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>Letter NO.</label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  name='Letter_NO'\r\n                                  value={handleString(this.state.Letter_NO)}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.CC) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>CC.</label>\r\n                                <input\r\n                                  name='CC'\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  value={handleString(this.state.CC)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.To) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  To.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='To'\r\n                                  value={handleString(this.state.To)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              {this.state.Document.map((data, key) => (\r\n                                <div\r\n                                  className={`box-add row ${\r\n                                    this.state.Selected !== key\r\n                                      ? 'CloseBox'\r\n                                      : ''\r\n                                  }`}\r\n                                  key={key}\r\n                                >\r\n                                  <div className='title-box-add'>\r\n                                    <span\r\n                                      className={`col p-0 ${\r\n                                        this.state.Selected !== key\r\n                                          ? 'cursor'\r\n                                          : ''\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        this.state.Selected !== key\r\n                                          ? this.setState({\r\n                                              Selected:\r\n                                                this.state.Selected === key\r\n                                                  ? this.state.Document.length -\r\n                                                    1\r\n                                                  : key\r\n                                            })\r\n                                          : ''\r\n                                      }\r\n                                    >\r\n                                      مورد {key + 1}\r\n                                    </span>\r\n                                    {this.state.Selected !== key ? (\r\n                                      <div\r\n                                        className='delete-Document'\r\n                                        onClick={() => this.DeleteDocument(key)}\r\n                                      >\r\n                                        <span>\r\n                                          <DeleteIcon />\r\n                                          حذف\r\n                                        </span>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                  <div className='w-100 row m-0'>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `disc_${key}` ||\r\n                                          handleCheckText(data.disc)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>Discipline</label>\r\n                                        <input\r\n                                          name={`disc_${key}`}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                          value={handleString(data.disc)}\r\n                                          className='text-left'\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div className='field-form selectBox'>\r\n                                        <CreatableSelect\r\n                                          className='text-left ltr'\r\n                                          onChange={newValue =>\r\n                                            this.SetDocument(newValue, key)\r\n                                          }\r\n                                          options={this.state.listDocuments}\r\n                                          value={data.valueDocument}\r\n                                          placeholder={\r\n                                            <label>\r\n                                              Document No.\r\n                                              <span className='star IranSans_Bold'>\r\n                                                *\r\n                                              </span>\r\n                                            </label>\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `doctype_${key}` ||\r\n                                          handleCheckText(data.doctype)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>Doc. Type.</label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`doctype_${key}`}\r\n                                          value={handleString(data.doctype)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `DocumentDescription_${key}` ||\r\n                                          handleCheckText(\r\n                                            data.DocumentDescription\r\n                                          )\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Document Description\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`DocumentDescription_${key}`}\r\n                                          value={handleString(\r\n                                            data.DocumentDescription\r\n                                          )}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `Rev_${key}` ||\r\n                                          handleCheckText(data.Rev)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Rev.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`Rev_${key}`}\r\n                                          value={handleString(data.Rev)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `DocClass_${key}` ||\r\n                                          handleCheckText(data.DocClass)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>Doc. Class</label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`DocClass_${key}`}\r\n                                          value={handleString(data.DocClass)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `size_${key}` ||\r\n                                          handleCheckText(data.size)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Size\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`size_${key}`}\r\n                                          value={handleString(data.size)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='A4'>A4</option>\r\n                                          <option value='A3'>A3</option>\r\n                                          <option value='A2'>A2</option>\r\n                                          <option value='A1'>A1</option>\r\n                                          <option value='A0'>A0</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoPage_${key}` ||\r\n                                          handleCheckText(data.NoPage)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          NO. Of Page\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoPage_${key}`}\r\n                                          value={handleString(data.NoPage)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoCoples_${key}` ||\r\n                                          handleCheckText(data.NoCoples)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>No. Of Copies</label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoCoples_${key}`}\r\n                                          value={handleString(data.NoCoples)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `POI_${key}` ||\r\n                                          handleCheckText(data.POI)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          P.O.I\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`POI_${key}`}\r\n                                          value={handleString(data.POI)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='I'>\r\n                                            I (For Information)\r\n                                          </option>\r\n                                          <option value='R'>\r\n                                            R (For Review)\r\n                                          </option>\r\n                                          <option value='B'>\r\n                                            B (As Built)\r\n                                          </option>\r\n                                          <option value='C'>\r\n                                            C (for Construction)\r\n                                          </option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل PDF\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PyvastPdfName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PyvastPdf',\r\n                                                      'PyvastPdfName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PyvastPdf_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PyvastPdf_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PyvastPdf_${key}`,\r\n                                              `PyvastPdfName_${key}`\r\n                                            )\r\n                                          }\r\n                                          accept='application/pdf'\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PyvastPdf_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PyvastPdf_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل اصلی\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PeyvastFileName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PeyvastFile',\r\n                                                      'PeyvastFileName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PeyvastFile_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PeyvastFile_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PeyvastFile_${key}`,\r\n                                              `PeyvastFileName_${key}`\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PeyvastFile_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PeyvastFile_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    {data.needReply ? (\r\n                                      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                        <div className={`field-form persian`}>\r\n                                          <label>فایل ضمیمه reply</label>\r\n                                          <div className='allName col row m-0 justify-content-end'>\r\n                                            {data.replyAttachmentName.map(\r\n                                              (name, index) => (\r\n                                                <span key={index}>\r\n                                                  <CloseRoundedIcon\r\n                                                    onClick={() =>\r\n                                                      this.deleteFile(\r\n                                                        key,\r\n                                                        index,\r\n                                                        'replyAttachment',\r\n                                                        'replyAttachmentName'\r\n                                                      )\r\n                                                    }\r\n                                                  />\r\n                                                  {name}\r\n                                                </span>\r\n                                              )\r\n                                            )}\r\n                                          </div>\r\n                                          <input\r\n                                            name={`replyAttachment_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`replyAttachment_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `replyAttachment_${key}`,\r\n                                                `replyAttachmentName_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`replyAttachment_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `replyAttachment_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.handleAddDocument}>\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              <div className='guide'>\r\n                                <div className='row-guide'>\r\n                                  <label>Type:</label>\r\n                                  <p>\r\n                                    G: Original , P: Print , C: Compact Disk\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Purpose of Issue (P.O.I):</label>\r\n                                  <p>\r\n                                    I: For Information , R: For Review , B: As\r\n                                    Built , C: for Construction\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Class:</label>\r\n                                  <p>\r\n                                    Class A: Issue for Approval (AFC) , Class B:\r\n                                    Issue for Approval (Approved) , Class C:\r\n                                    Issue for Information\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form`}>\r\n                                <label>{`${this.state.approvedBy.first_name}  ${this.state.approvedBy.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label signEnglish'\r\n                                  onClick={() =>\r\n                                    this.state.approvedBy.sign\r\n                                      ? this.setState({ popUp: true })\r\n                                      : ''\r\n                                  }\r\n                                >\r\n                                  sign\r\n                                  <AttachFileIcon />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div className='submit-form col-12 mt-5'>\r\n                              <button\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ثبت اطلاعات\r\n                              </button>\r\n                              <CancelButton\r\n                                redirect='purchase-engineering'\r\n                                status={3}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.approvedBy.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\vendorTransmittal\\EditTransmittal.js",[],"E:\\bidboland\\src\\Project\\Mokatebat\\Mokatebat.js",[],"E:\\bidboland\\src\\Project\\Mokatebat\\Edit.js",[],"E:\\bidboland\\src\\Project\\Mokatebat\\MokatebatDisabled.js",["3056"],"import React, { Component } from 'react'\r\nimport Menu from '../../layout/menu'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport StaticData from '../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\nimport EmailIcon from '@material-ui/icons/Email'\r\nimport axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport { handleFilter } from '../../table/OutputFilter'\r\n\r\nexport default class MokatebatDisabled extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      projectCode: '',\r\n      letterNumber: '',\r\n      created_at: '',\r\n      type: 'in',\r\n      sender: '',\r\n      pictures: {},\r\n      attachments: {},\r\n      followUp: '',\r\n      externalReciever: 'no',\r\n      externalRecieverEmail: '',\r\n      keywords: '',\r\n      wbs: '',\r\n      subject: '',\r\n      date: '',\r\n      permissions: [],\r\n      redirect: false,\r\n      receivers: [],\r\n      id: '',\r\n      copies: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title}- مشاهده مکاتبات`\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    if (id) {\r\n      this.setState({ id: id })\r\n      this.fetchData(id)\r\n    }\r\n  }\r\n  fetchData = id => {\r\n    if (this.state.token) {\r\n      axios\r\n        .get(`${StaticData.domainIp}/correspondence/get/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(response => {\r\n          if (response.status === 200) {\r\n            this.setState(response.data.content)\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleConvert = object => {\r\n    let allData = []\r\n    for (let value in object) {\r\n      allData.push(object[value])\r\n    }\r\n    return allData\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return <Redirect to='correspondence' />\r\n      } else\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='correspondence'\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>مدیریت مکاتبات</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='form row justify-content-start'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.projectCode)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  کد پروژه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-right'\r\n                                  name='projectCode'\r\n                                  value={handleString(this.state.projectCode)}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.letterNumber)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  شماره نامه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-right'\r\n                                  name='letterNumber'\r\n                                  value={handleString(this.state.letterNumber)}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.date)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    تاریخ نامه\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-right'\r\n                                    name='date'\r\n                                    value={handleString(this.state.date)}\r\n                                    readOnly={true}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.created_at)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    تاریخ ثبت نامه\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    readOnly={true}\r\n                                    name='created_at'\r\n                                    value={handleString(this.state.created_at)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12 d-flex align-items-center'>\r\n                              <div className='field-radio w-100'>\r\n                                <label>\r\n                                  نوع نامه :\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <div className='main-radio'>\r\n                                  <div className='radio-button'>\r\n                                    <label>\r\n                                      {this.state.type === 'out' ? (\r\n                                        <RadioButtonCheckedIcon />\r\n                                      ) : (\r\n                                        <RadioButtonUncheckedIcon />\r\n                                      )}\r\n                                      صادره\r\n                                    </label>\r\n                                  </div>\r\n                                  <div className='radio-button'>\r\n                                    <label>\r\n                                      {this.state.type === 'in' ? (\r\n                                        <RadioButtonCheckedIcon />\r\n                                      ) : (\r\n                                        <RadioButtonUncheckedIcon />\r\n                                      )}\r\n                                      وارده\r\n                                    </label>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.sender)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  فرستنده\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  value={handleString(this.state.sender)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.subject)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='col p-0'>\r\n                                  <label className='textarea'>\r\n                                    موضوع\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='w-100'\r\n                                    type='text'\r\n                                    name='subject'\r\n                                    value={handleString(this.state.subject)}\r\n                                    readOnly={true}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.permissions.length > 0\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  سطح دسترسی\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='w-100'\r\n                                  value={handleString(\r\n                                    this.state.permissions.join(' - ')\r\n                                  )}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.receivers.length > 0\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  گیرندگان\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  value={handleString(\r\n                                    this.state.receivers.join(' - ')\r\n                                  )}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  this.state.copies.length > 0 ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  رو نوشت\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  value={handleString(this.state.copies.join(' - '))}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className={`field-form persian`}>\r\n                                <label>\r\n                                  تصویر نامه\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <div className='allName col row m-0 justify-content-end pl-2'>\r\n                                  {this.handleConvert(this.state.pictures).map(\r\n                                    (name, key) => (\r\n                                      <a\r\n                                        href={name}\r\n                                        target='_blank'\r\n                                        rel='noreferrer'\r\n                                      >\r\n                                        <span key={key}>{name}</span>\r\n                                      </a>\r\n                                    )\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div className={`field-form persian`}>\r\n                                <label>پیوست نامه</label>\r\n                                <div className='pl-2 allName col row m-0 justify-content-end'>\r\n                                  {this.handleConvert(\r\n                                    this.state.attachments\r\n                                  ).map((name, key) => (\r\n                                    <a\r\n                                      href={name}\r\n                                      target='_blank'\r\n                                      rel='noreferrer'\r\n                                    >\r\n                                      <span key={key}>{name}</span>\r\n                                    </a>\r\n                                  ))}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian textarea ${\r\n                                  handleCheckText(this.state.followUp)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='col p-0'>\r\n                                  <label className='textarea'>پیگیری</label>\r\n                                  <textarea\r\n                                    className='w-100'\r\n                                    type='text'\r\n                                    name='followUp'\r\n                                    value={handleString(this.state.followUp)}\r\n                                    readOnly={true}\r\n                                  ></textarea>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.keywords)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label className='textarea'>تخصیص تگ</label>\r\n                                <input\r\n                                  value={handleString(this.state.keywords)}\r\n                                  readOnly={true}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form persian ${\r\n                                  handleCheckText(this.state.wbs)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>تخصیص سطح WBS</label>\r\n                                <input value={handleString(this.state.wbs)} readOnly={true} />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12 d-flex align-items-center'>\r\n                              <div className='field-radio w-100'>\r\n                                <label>گیرنده خارج از سیستم :</label>\r\n                                <div className='main-radio'>\r\n                                  <div className='radio-button'>\r\n                                    <label>\r\n                                      {this.state.externalReciever === 'yes' ? (\r\n                                        <RadioButtonCheckedIcon />\r\n                                      ) : (\r\n                                        <RadioButtonUncheckedIcon />\r\n                                      )}\r\n                                      دارد\r\n                                    </label>\r\n                                  </div>\r\n                                  <div className='radio-button'>\r\n                                    <label>\r\n                                      {this.state.externalReciever === 'no' ? (\r\n                                        <RadioButtonCheckedIcon />\r\n                                      ) : (\r\n                                        <RadioButtonUncheckedIcon />\r\n                                      )}\r\n                                      ندارد\r\n                                    </label>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            {this.state.externalReciever === 'yes' ? (\r\n                              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                <div\r\n                                  className={`field-form persian ${\r\n                                    handleCheckText(\r\n                                      this.state.externalRecieverEmail\r\n                                    )\r\n                                      ? 'active'\r\n                                      : ''\r\n                                  }`}\r\n                                >\r\n                                  <div className='icon-field'>\r\n                                    <EmailIcon />\r\n                                  </div>\r\n                                  <div className='col p-0'>\r\n                                    <label>\r\n                                      ایمیل گیرنده\r\n                                      <span className='star IranSans_Bold'>\r\n                                        *\r\n                                      </span>\r\n                                    </label>\r\n                                    <input\r\n                                      className='text-right'\r\n                                      name='externalRecieverEmail'\r\n                                      value={handleString(this.state.externalRecieverEmail)}\r\n                                      readOnly={true}\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            ) : (\r\n                              ''\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\TQ\\complete.js",[],"E:\\bidboland\\src\\Project\\Mokatebat\\index-Mokatebat.js",[],"E:\\bidboland\\src\\Project\\Engineering\\commodityEngineering.js",["3057"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport Menu from '../../layout/menu'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport StaticData from '../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport SearchTable from '../../table/SearchTable'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport Permision from '../../permision/permision'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport CancelImage from '../../statusImage/cancel.svg'\r\nimport InfoImage from '../../statusImage/info.svg'\r\nimport SuccsesImage from '../../statusImage/succses.svg'\r\nimport NotFoundTable from '../../table/notFound'\r\nimport Loading from '../../layout/loading'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport ListLink from '../../Customization/listLink'\r\nimport Row from '../../table/Row'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../../Customization/customization'\r\nimport TransmitterManufacturers from '../vendorTransmittal/index-transmittal'\r\nimport ConstructionEngineer from '../vendorTransmittal/ConstructionEngineer'\r\nimport AdvanceSearch from '../../Customization/advancedSearch'\r\nimport OutputFilter from '../../table/OutputFilter'\r\nimport CounterTab from '../../Customization/CounterTab'\r\nimport handleString from '../../handleString'\r\nexport default class CommodityEngineering extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Fetch = null\r\n    this.FilterReset = null\r\n    this.Reset = null\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      select: 1,\r\n      nameTab: '',\r\n      openList: false,\r\n      header: [],\r\n      selected: [],\r\n      listCreate: [],\r\n      role: null,\r\n      open: false,\r\n      nameRole: undefined,\r\n      disabledCreate: false,\r\n      search: '',\r\n      accessTab: true\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - مهندسی خرید`\r\n    // if (this.props.location && this.props.location.state) {\r\n    //     this.setState({ select: this.props.location.state.select })\r\n    // }\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    setTimeout(async () => {\r\n      this.loadCheck()\r\n    }, 100)\r\n  }\r\n  RemoveFilter = () => {\r\n    let list = []\r\n    this.state.header.filter(head => list.push(head.name))\r\n    this.setState({ selected: list })\r\n    for (let value in this.state) {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: true })\r\n      }\r\n    }\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      this.FilterReset()\r\n      this.Reset()\r\n    }\r\n  }\r\n  loadCheck = async () => {\r\n    this.setState({ selected: [] })\r\n    await Object.keys(this.state).map(value => {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: false })\r\n      }\r\n    })\r\n    await this.state.header.forEach(head => {\r\n      this.setState({\r\n        [`_header_${head.name}`]: true,\r\n        selected: [...this.state.selected, head.name]\r\n      })\r\n    })\r\n  }\r\n  ChangeTab = num => {\r\n    this.setState({ select: num, search: '' })\r\n    this.loadCheck()\r\n  }\r\n  GetHead = e => {\r\n    this.setState({ header: e })\r\n    setTimeout(async () => {\r\n      this.state.header.forEach(head => {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      })\r\n    }, 50)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let name = value.split('_header_')[1]\r\n            array.push(name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.MainList && !this.refs.MainList.contains(event.target)) {\r\n      this.setState({\r\n        openList: false\r\n      })\r\n    }\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  // handleSearch = (e) => {\r\n  //     if (this.Search !== null) {\r\n  //         this.setState({ search: e.target.value })\r\n  //         this.Search(e.target.value)\r\n  //     }\r\n  // }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleShow = () => {\r\n    if (this.state.select === 1) {\r\n      if (\r\n        this.Permision.handlePermision(this.state.role, 'purchase_package', false)\r\n      ) {\r\n        return (\r\n          <Table\r\n            GetFunction={e => (this.Search = e)}\r\n            detail={{\r\n              select: this.state.select,\r\n              nameTab: this.state.nameTab\r\n            }}\r\n            getHeader={e => this.setState({ header: e })}\r\n            selected={this.state.selected}\r\n            getFetch={e => (this.Fetch = e)}\r\n            getRoleName={name => this.setState({ nameRole: name })}\r\n            Permision={this.Permision}\r\n            GetHead={this.GetHead}\r\n            getReset={e => (this.Reset = e)}\r\n            resetSearch={() => {\r\n              this.setState({ search: '' })\r\n            }}\r\n            FilterReset={remove => (this.FilterReset = remove)}\r\n          />\r\n        )\r\n      } else return ''\r\n    } else if (this.state.select === 2) {\r\n      if (this.Permision.handlePermision(this.state.role, 'vpis', true)) {\r\n        return (\r\n          <ConstructionEngineer\r\n            GetFunction={e => (this.Search = e)}\r\n            getHeader={e => this.setState({ header: e })}\r\n            GetHead={this.GetHead}\r\n            selected={this.state.selected}\r\n            getList={list => this.setState({ listCreate: list })}\r\n            getRoleName={name => this.setState({ nameRole: name })}\r\n            FilterReset={remove => (this.FilterReset = remove)}\r\n            getReset={e => (this.Reset = e)}\r\n            resetSearch={() => {\r\n              this.setState({ search: '' })\r\n            }}\r\n          />\r\n        )\r\n      } else return ''\r\n    } else if (this.state.select === 3) {\r\n      if (\r\n        this.Permision.handlePermision(\r\n          this.state.role,\r\n          'builders_transmittal',\r\n          true\r\n        )\r\n      ) {\r\n        return (\r\n          <TransmitterManufacturers\r\n            GetFunction={e => (this.Search = e)}\r\n            getHeader={e => this.setState({ header: e })}\r\n            GetHead={this.GetHead}\r\n            selected={this.state.selected}\r\n            resetSearch={() => this.setState({ search: '' })}\r\n            getReset={e => (this.Reset = e)}\r\n            getRoleName={name => this.setState({ nameRole: name })}\r\n            FilterReset={remove => (this.FilterReset = remove)}\r\n          />\r\n        )\r\n      }\r\n    } else return ''\r\n  }\r\n  handleShowLink = () => {\r\n    const { select, vendor, role, openList, listCreate } = this.state\r\n    if (select === 3) {\r\n      if (\r\n        vendor ||\r\n        this.Permision.handlePermision(role, 'builders_transmittal_create')\r\n      ) {\r\n        return (\r\n          <Link to={`${'/vendor-transmittal'}`}>\r\n            <AddCircleIcon />\r\n            <span>ایجاد کاربرگ</span>\r\n          </Link>\r\n        )\r\n      } else {\r\n        return (\r\n          <span className='item disabled'>\r\n            <AddCircleIcon />\r\n            <span>ایجاد کاربرگ</span>\r\n          </span>\r\n        )\r\n      }\r\n    } else if (select === 2) {\r\n      if (this.Permision.handlePermision(role, 'vpis_create', false)) {\r\n        return (\r\n          <React.Fragment>\r\n            <span\r\n              className='item'\r\n              onClick={() => this.setState({ openList: !openList })}\r\n            >\r\n              <AddCircleIcon />\r\n              <span>ایجاد کاربرگ</span>\r\n            </span>\r\n            {openList && <ListLink list={listCreate} />}\r\n          </React.Fragment>\r\n        )\r\n      } else {\r\n        return (\r\n          <span className='item disabled'>\r\n            <AddCircleIcon />\r\n            <span>ایجاد کاربرگ</span>\r\n          </span>\r\n        )\r\n      }\r\n    }\r\n  }\r\n  handleShowTab = () => {\r\n    let listTab = [\r\n      {\r\n        name: 'بسته‌های خرید',\r\n        value: 1,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'purchase_package',\r\n          false\r\n        )\r\n      },\r\n      {\r\n        name: 'مهندسی سازندگان',\r\n        value: 2,\r\n        access: this.Permision.handlePermision(this.state.role, 'vpis', true)\r\n      },\r\n      {\r\n        name: 'ترنسمیتال سازندگان',\r\n        value: 3,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'builders_transmittal',\r\n          true\r\n        )\r\n      }\r\n    ]\r\n    return listTab\r\n  }\r\n  getRole = (response, status) => {\r\n    if (status === 'response') {\r\n      if (response.status === 200) {\r\n        this.setState({\r\n          role: response.data.role,\r\n          vendor: response.data.role === 'vendor'\r\n        })\r\n        if (this.props.location && this.props.location.state) {\r\n          if (this.props.location.state.select === 1) {\r\n            if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'purchase_package',\r\n                false\r\n              )\r\n            ) {\r\n              this.setState({ select: 1, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          } else if (this.props.location.state.select === 2) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'vpis', true)\r\n            ) {\r\n              this.setState({ select: 2, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          } else if (this.props.location.state.select === 3) {\r\n            if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'builders_transmittal',\r\n                true\r\n              )\r\n            ) {\r\n              this.setState({ select: 3, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          }\r\n        } else {\r\n          if (\r\n            this.Permision.handlePermision(\r\n              response.data.role,\r\n              'purchase_package',\r\n              false\r\n            )\r\n          ) {\r\n            this.setState({ select: 1, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'vpis', true)\r\n          ) {\r\n            this.setState({ select: 2, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(\r\n              response.data.role,\r\n              'builders_transmittal',\r\n              true\r\n            )\r\n          ) {\r\n            this.setState({ select: 3, accessTab: true })\r\n          } else {\r\n            this.setState({ select: 0, accessTab: false, _404: true })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  handleNameRole = () => {\r\n    const role = this.state.role\r\n    if (role) {\r\n      if (role['purchase_package'] || role === 'all') {\r\n        return 'purchase_package'\r\n      } else if (role['vpis'] || role === 'all') {\r\n        return 'vpis'\r\n      } else return ''\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state._404) {\r\n      return <Redirect to='/404' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole={this.state.role ? this.handleNameRole() : 'Home'}\r\n                  vendor={true}\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                  getRole={this.getRole}\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            <div\r\n                              className={`icon justify-content-center `}\r\n                              ref='MainList'\r\n                            >\r\n                              {this.handleShowLink()}\r\n                            </div>\r\n                            <div className='icon disabled'>\r\n                              <Link>\r\n                                <SystemUpdateAltIcon />\r\n                                <span>بروز رسانی</span>\r\n                              </Link>\r\n                            </div>\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='tab-form rtl'>\r\n                      <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start'>\r\n                        {this.state.accessTab &&\r\n                          this.handleShowTab().map(\r\n                            (tab, index) =>\r\n                              tab.access && (\r\n                                <div\r\n                                  className={`item-tab rtl col-xl-3 ${\r\n                                    this.state.select === tab.value\r\n                                      ? 'active IranSans_Bold'\r\n                                      : ''\r\n                                  }`}\r\n                                  onClick={() => this.ChangeTab(tab.value)}\r\n                                  key={index}\r\n                                >\r\n                                  <span>\r\n                                    <label\r\n                                      className={`${\r\n                                        this.state.select === tab.value\r\n                                          ? 'IranSans_Bold'\r\n                                          : ''\r\n                                      }`}\r\n                                    >\r\n                                      <CounterTab\r\n                                        key={index}\r\n                                        tafazol={\r\n                                          this.handleShowTab().filter(\r\n                                            item => !item.access\r\n                                          ).length\r\n                                        }\r\n                                        data={tab}\r\n                                      />\r\n                                      .\r\n                                    </label>\r\n                                    {tab.name}\r\n                                  </span>\r\n                                </div>\r\n                              )\r\n                          )}\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                      {this.handleShow()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\nclass Table extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'row', value: 'id' },\r\n        { name: 'Document Number:', value: 'documentNumber' },\r\n        { name: 'Activity Name', value: 'activityName' },\r\n        { name: 'Class', value: 'class' },\r\n        { name: 'Area Code', value: 'areaCode' },\r\n        { name: 'Doc.Type', value: 'docType' },\r\n        { name: 'Disc.', value: 'disc' },\r\n        { name: 'Phase', value: 'phase' },\r\n        { name: 'W.F', value: 'wf' },\r\n        { name: 'Approve Planned Date', value: 'firstStepPlannedDate' },\r\n        { name: 'Rev.', value: 'lastDocumentRevision' },\r\n        { name: 'POI', value: 'poi' },\r\n        // {name : \"remark\"},\r\n        { name: 'POE', value: 'APStatus' }\r\n        // {name : \"Action\"},\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      selectNumber: '',\r\n      secondNumner: '',\r\n      documentSelected: '',\r\n      firstData: [\r\n        { label: 'completed', color: '#06c554', name: 'Completed' },\r\n        { label: 'In Progress', color: '#2196F3', name: 'In Progress' },\r\n        { label: 'Hold', color: '#f53d49', popUp: true, name: 'Hold' }\r\n      ],\r\n      search: '',\r\n      permision: '',\r\n      filter: '',\r\n      popUp: false,\r\n      idSelected: '',\r\n      textAfc: '',\r\n      popUpDisabled: false,\r\n      loading: 'table',\r\n      _key: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getFetch(this.fetchData)\r\n    this.props.GetHead()\r\n    this.props.getHeader(this.state.header)\r\n    this.props.getReset(this.Reset)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    window.addEventListener('click', e => {\r\n      if (this.state.selectNumber !== '') {\r\n        switch (\r\n          e.target === this.refs[`more_${this.state.selectNumber}`] ||\r\n          e.target === this.refs[`moresvg_${this.state.selectNumber}`]\r\n        ) {\r\n          case true:\r\n            break\r\n          case false:\r\n            if (\r\n              e.target === this.refs[`boxMore_${this.state.selectNumber}`] ||\r\n              e.target === this.refs[`titleMore_${this.state.selectNumber}`] ||\r\n              e.target === this.refs[`textMore_${this.state.selectNumber}`] ||\r\n              e.target ===\r\n                this.refs[`mainitemMore_${this.state.selectNumber}`] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `itemMore_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `svgCheck_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `inputCheckBox_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `labelItem_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ]\r\n            ) {\r\n            } else {\r\n              this.setState({ secondNumner: '', selectNumber: '' })\r\n            }\r\n\r\n            break\r\n          default:\r\n            return false\r\n        }\r\n      }\r\n    })\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/mdl/procurementEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/mdl/procurementEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/mdl/procurementEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await this.props.resetSearch()\r\n      this.setState({ loading: 'table', search: '' })\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          // if (response.data.role === 'vendor') {\r\n          //     response.data.role = {\r\n          //         vendor: 1\r\n          //     }\r\n          // }\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            // this.props.checkPermision(!this.props.Permision.handlePermision(response.data.role, 'vendor'))\r\n            // if (this.props.Permision.handlePermision(response.data.role, 'vendor')) {\r\n            if (response.data.role === 'vendor') {\r\n              await this.props.getRoleName(response.data.role, 'vendor')\r\n            } else {\r\n              await this.props.getRoleName(response.data.role, 'user')\r\n            }\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n            // }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleRemark = async (name, send, nameState, remark = '') => {\r\n    await this.setState({\r\n      [nameState]: name,\r\n      secondNumner: '',\r\n      selectNumber: ''\r\n    })\r\n    if (send) {\r\n      if (this.state.token) {\r\n        let datareg = new FormData()\r\n        datareg.append('id', this.state.idSelected)\r\n        datareg.append('status', name)\r\n        if (remark !== '') {\r\n          datareg.append('remark', remark)\r\n        }\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/mdl/updateAp`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: `Bearer ${\r\n              this.state.token ? this.state.token : null\r\n            }`\r\n          }\r\n        })\r\n          .then(async response => {\r\n            response.data.role = {\r\n              vendor: 1\r\n            }\r\n            this.setState({ popUp: false })\r\n            if (response.status === 200) {\r\n              if (\r\n                this.props.Permision.handlePermision(\r\n                  response.data.role,\r\n                  'vendor'\r\n                )\r\n              ) {\r\n                Notification.notify(Message.text(906), 'success')\r\n                await this.fetchData()\r\n              }\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ popUp: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  handleStatus = status => {\r\n    if (status !== null && status) {\r\n      if (status === 'Completed') return SuccsesImage\r\n      else if (status === 'In Progress') return InfoImage\r\n      else if (status === 'Hold') return CancelImage\r\n    } else return ''\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  handlePositionBox = key => {\r\n    const half = this.state.contentPerPage / 2\r\n    if (key >= half) {\r\n      return 'bottomBox'\r\n    } else return ''\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n                <th className='action'>action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      status={['APStatus']}\r\n                      handleStatus={this.handleStatus}\r\n                      statusSetState={e => this.setState(e)}\r\n                      textStatus={'APRemark'}\r\n                      // link={['APStatus']}\r\n                      NotcheckString={['APStatus']}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                    <td\r\n                      className={`action ${\r\n                        this.state.selectNumber === key ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      {data.poi === 'FIS' &&\r\n                      data.APStatus !== 'Completed' &&\r\n                      this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'procurement_download',\r\n                        true\r\n                      ) ? (\r\n                        <span\r\n                          className='more'\r\n                          ref={`more_${key}`}\r\n                          onClick={() => this.setState({ selectNumber: key })}\r\n                        >\r\n                          <MoreVertRoundedIcon ref={`moresvg_${key}`} />\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.state.selectNumber === key ? (\r\n                        <div\r\n                          ref={`boxMore_${key}`}\r\n                          className={`box-more ${this.handlePositionBox(key)}`}\r\n                        >\r\n                          <div\r\n                            ref={`titleMore_${key}`}\r\n                            className='title w-100 pl-0 pr-5'\r\n                          >\r\n                            <h4\r\n                              ref={`textMore_${key}`}\r\n                              className={`w-100 ${\r\n                                this.state.firstData.length > 0\r\n                                  ? ''\r\n                                  : 'd-flex justify-content-end'\r\n                              }`}\r\n                            >\r\n                              {`${this.state.documentSelected} last Status `}\r\n                            </h4>\r\n                          </div>\r\n                          <div\r\n                            ref={`mainitemMore_${key}`}\r\n                            className='main-item'\r\n                          >\r\n                            {this.state.firstData.map((data1, index) => (\r\n                              <div\r\n                                key={index}\r\n                                ref={`itemMore_${key}_${index}`}\r\n                                className={`item ${\r\n                                  this.state.secondSelectNumber === index\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                onClick={() =>\r\n                                  this.setState({ secondNumner: index })\r\n                                }\r\n                              >\r\n                                <input\r\n                                  id={`checkBox_${key}_${index}`}\r\n                                  ref={`inputCheckBox_${key}_${index}`}\r\n                                  name={`${data1.name}_${key}_${index}_check_`}\r\n                                  className='d-none'\r\n                                  type='checkbox'\r\n                                  onChange={async e => {\r\n                                    await this.setState({ idSelected: data.id })\r\n                                    await this.handleRemark(\r\n                                      data1.name,\r\n                                      data1.name !== 'Hold',\r\n                                      `_${key}_check_`\r\n                                    )\r\n                                  }}\r\n                                  onClick={() =>\r\n                                    data1.popUp\r\n                                      ? this.setState({\r\n                                          popUp: true,\r\n                                          popUpDisabled: false,\r\n                                          _key: key\r\n                                        })\r\n                                      : ''\r\n                                  }\r\n                                />\r\n                                <label\r\n                                  ref={`labelItem_${key}_${index}`}\r\n                                  htmlFor={`checkBox_${key}_${index}`}\r\n                                  className='justify-content-start'\r\n                                >\r\n                                  {this.state[`_${key}_check_`] ===\r\n                                  data1.name ? (\r\n                                    <CheckBoxRoundedIcon\r\n                                      style={{ fill: data1.color }}\r\n                                      ref={`svgCheck_${key}_${index}`}\r\n                                    />\r\n                                  ) : (\r\n                                    <CheckBoxOutlineBlankRoundedIcon\r\n                                      style={{ fill: data1.color }}\r\n                                      ref={`svgCheck_${key}_${index}`}\r\n                                    />\r\n                                  )}\r\n                                  {data1.label}\r\n                                </label>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'procurement_export'\r\n                ) && (\r\n                  <a\r\n                    href={OutputFilter.handleFilter(\r\n                      this.state.textSearch,\r\n                      this.state.search,\r\n                      `${StaticData.domainIp}/mdl/procurementEngineeringExportExcel`\r\n                    )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='xls'\r\n                  >\r\n                    <img src='/img/XLS.svg' alt='xls' />\r\n                    خروجی اکسل\r\n                  </a>\r\n                )}\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'procurement_export'\r\n                ) && (\r\n                  <a\r\n                    href={OutputFilter.handleFilter(\r\n                      this.state.textSearch,\r\n                      this.state.search,\r\n                      `${StaticData.domainIp}/mdl/procurementEngineeringExportPdf`\r\n                    )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='pdf'\r\n                  >\r\n                    <img src='/img/PDF.svg' alt='PDF' />\r\n                    خروجی pdf\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.popUp ? (\r\n          <Sign\r\n            close={e =>\r\n              this.setState({ popUp: e, popUpDisabled: e, textAfc: '' })\r\n            }\r\n            idSelected={this.state.idSelected}\r\n            handleRemark={this.handleRemark}\r\n            popUpDisabled={this.state.popUpDisabled}\r\n            textAfc={this.state.textAfc}\r\n            _key={this.state._key}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      errorText: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    if (this.props.popUpDisabled) {\r\n      this.setState({\r\n        errorText: this.props.textAfc\r\n      })\r\n    }\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      if (this.props.popUpDisabled) {\r\n        this.setState({\r\n          errorText: this.props.textAfc\r\n        })\r\n      }\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup'>\r\n        <div className='col-xl-4 col-lg-4 col-md-8 col-12 mb-5'>\r\n          <div className='box-wellcome'>\r\n            <div className='main-textarea'>\r\n              <textarea\r\n                onChange={e =>\r\n                  this.props.popUpDisabled\r\n                    ? ''\r\n                    : this.setState({ errorText: e.target.value })\r\n                }\r\n                placeholder='لطفا دلیل خود را وارد کنید'\r\n                value={handleString(this.state.errorText)}\r\n                readOnly={this.props.popUpDisabled}\r\n              ></textarea>\r\n            </div>\r\n            <div className='buttons-wellcome justify-content-center'>\r\n              <button\r\n                className='close-button d-flex align-items-center'\r\n                onClick={() => this.props.close(false)}\r\n              >\r\n                <CloseRoundedIcon />\r\n                بستن\r\n              </button>\r\n              {!this.props.popUpDisabled ? (\r\n                <button\r\n                  className='accept d-flex align-items-center'\r\n                  onClick={() =>\r\n                    this.state.errorText !== ''\r\n                      ? this.props.handleRemark(\r\n                          'Hold',\r\n                          true,\r\n                          `_${this.props._key}_check_`,\r\n                          this.state.errorText\r\n                        )\r\n                      : ''\r\n                  }\r\n                >\r\n                  <DoneIcon />\r\n                  ثبت\r\n                </button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\Endorsement.js",["3058"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport Menu from '../../layout/menu'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport StaticData from '../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport SearchTable from '../../table/SearchTable'\r\n// import SearchIcon from '@material-ui/icons/Search';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport NotFoundTable from '../../table/notFound'\r\nimport Loading from '../../layout/loading'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../../Customization/customization'\r\nimport Row from '../../table/Row'\r\nimport AdvanceSearch from '../../Customization/advancedSearch'\r\nimport OutputFilter from '../../table/OutputFilter'\r\nimport UploadInformation from '../../Customization/UploadInformation'\r\nexport default class Endorsement extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Reset = null\r\n    this.FilterReset = null\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [],\r\n      selected: [],\r\n      open: false,\r\n      search: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - مهندسی کارگاهی`\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    this.loadCheck()\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  loadCheck = () => {\r\n    setTimeout(async () => {\r\n      this.state.header.forEach(head => {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      })\r\n    }, 50)\r\n  }\r\n  // handleSearch = (e) => {\r\n  //     if (this.Search !== null) {\r\n  //         this.setState({ search: e.target.value })\r\n  //         this.Search(e.target.value)\r\n  //     }\r\n  // }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let name = value.split('_header_')[1]\r\n            array.push(name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    let list = []\r\n    this.state.header.filter(head => list.push(head.name))\r\n    this.setState({ selected: list })\r\n    for (let value in this.state) {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: true })\r\n      }\r\n    }\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      this.loadCheck()\r\n      this.FilterReset()\r\n      this.Reset()\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu nameRole='endorsment' nameUrl={this.props.nameUrl} />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={() =>\r\n                                  this.setState({ upload: !this.state.upload })\r\n                                }\r\n                              >\r\n                                <SystemUpdateAltIcon />\r\n                                <span>بروز رسانی</span>\r\n                              </span>\r\n                            </div>\r\n                            {this.state.upload && (\r\n                              <UploadInformation\r\n                                {...this}\r\n                                handleState={(name, value) =>\r\n                                  this.setState({ [name]: value })\r\n                                }\r\n                              />\r\n                            )}\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیلترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                      <Table\r\n                        GetFunction={e => (this.Search = e)}\r\n                        getHeader={e => this.setState({ header: e })}\r\n                        selected={this.state.selected}\r\n                        resetSearch={() => this.setState({ search: '' })}\r\n                        getReset={e => (this.Reset = e)}\r\n                        getRole={(e, name) =>\r\n                          this.setState({\r\n                            role: e,\r\n                            nameRole: name,\r\n                            disabledCreate: false\r\n                          })\r\n                        }\r\n                        FilterReset={remove => (this.FilterReset = remove)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\nclass Table extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'id', value: 'id' },\r\n        { name: 'Project Code', value: 'projectCode' },\r\n        { name: 'Area Code', value: 'areaCode' },\r\n        { name: 'DISCIPLINE', value: 'disc' },\r\n        { name: 'Doc Type', value: 'docType' },\r\n        { name: 'Document No', value: 'documentNumber' },\r\n        { name: 'Document Title', value: 'documentDescription' },\r\n        { name: 'Scope', value: 'scope' },\r\n        { name: 'Rev', value: 'revision' },\r\n        { name: 'Status', value: 'status' },\r\n        { name: 'Last Status', value: 'lastStatus' },\r\n        { name: 'Transmittal No', value: 'transmittalNo' },\r\n        { name: 'Transmittal Date', value: 'transmittalDate' },\r\n        { name: 'Comment Sheet No', value: 'commentSheetNumber' },\r\n        { name: 'CM Date', value: 'commentDate' },\r\n        { name: 'CM Status', value: 'commentStatus' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      selectNumber: '',\r\n      secondNumner: '',\r\n      documentSelected: '',\r\n      search: '',\r\n      permision: '',\r\n      filter: '',\r\n      popUp: false,\r\n      idSelected: '',\r\n      textAfc: '',\r\n      popUpDisabled: false,\r\n      loading: 'table',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.props.getHeader(this.state.header)\r\n    this.fetchData()\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/endorsement/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/endorsement/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/endorsement/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await this.props.resetSearch()\r\n      await this.setState({ loading: 'table', search: '' })\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            // let permision = new Permision()\r\n            // if (permision.handlePermision(response.data.role, 'project_engineering')) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n            // }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                <a\r\n                  href={OutputFilter.handleFilter(\r\n                    this.state.textSearch,\r\n                    this.state.search,\r\n                    `${StaticData.domainIp}/endorsement/exportExcel`\r\n                  )}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='xls'\r\n                >\r\n                  <img src='/img/XLS.svg' alt='xls' />\r\n                  خروجی اکسل\r\n                </a>\r\n                <a\r\n                  href={OutputFilter.handleFilter(\r\n                    this.state.textSearch,\r\n                    this.state.search,\r\n                    `${StaticData.domainIp}/endorsement/exportPdf`\r\n                  )}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='pdf'\r\n                >\r\n                  <img src='/img/PDF.svg' alt='PDF' />\r\n                  خروجی pdf\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\FieldEngineering.js",["3059","3060"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport Menu from '../../layout/menu'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport StaticData from '../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\n// import SearchIcon from '@material-ui/icons/Search';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport Permision from '../../permision/permision'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport CancelImage from '../../statusImage/cancel.svg'\r\nimport InfoImage from '../../statusImage/info.svg'\r\nimport SuccsesImage from '../../statusImage/succses.svg'\r\nimport NotFoundTable from '../../table/notFound'\r\nimport Loading from '../../layout/loading'\r\nimport Row from '../../table/Row'\r\nimport AdvanceSearch from '../../Customization/advancedSearch'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../../Customization/customization'\r\nimport UploadInformation from '../../Customization/UploadInformation'\r\nimport SearchTable from '../../table/SearchTable'\r\nimport handleString from '../../handleString'\r\nexport default class FieldEngineering extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Reset = null\r\n    this.FilterReset = null\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [],\r\n      selected: [],\r\n      open: false,\r\n      search: '',\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - مهندسی کارگاهی`\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    setTimeout(async () => {\r\n      this.state.header.forEach(head => {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      })\r\n    }, 50)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  // handleSearch = (e) => {\r\n  //     if (this.Search !== null) {\r\n  //         this.Search(e.target.value.trim())\r\n  //     }\r\n  // }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let name = value.split('_header_')[1]\r\n            array.push(name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    let list = []\r\n    this.state.header.filter(head => list.push(head.name))\r\n    this.setState({ selected: list })\r\n    for (let value in this.state) {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: true })\r\n      }\r\n    }\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      this.FilterReset()\r\n      this.Reset()\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole='field_engineering'\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={() =>\r\n                                  this.setState({ upload: !this.state.upload })\r\n                                }\r\n                              >\r\n                                <SystemUpdateAltIcon />\r\n                                <span>بروز رسانی</span>\r\n                              </span>\r\n                            </div>\r\n                            {this.state.upload && (\r\n                              <UploadInformation\r\n                                {...this}\r\n                                handleState={(name, value) =>\r\n                                  this.setState({ [name]: value })\r\n                                }\r\n                              />\r\n                            )}\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیلترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        {/* <div className='col-xl-6 col-lg-6 col-md-4 col-12 p-0 d-flex justify-content-end'>\r\n                                                <div className='search-index col-xl-6 col-lg-8 col-md-10 col-11'>\r\n                                                    <SearchIcon />\r\n                                                    <input className='ltr text-right' placeholder='جستجو...' onChange={this.handleSearch} />\r\n                                                </div>\r\n                                            </div> */}\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                      <Table\r\n                        GetFunction={e => (this.Search = e)}\r\n                        getHeader={e => this.setState({ header: e })}\r\n                        selected={this.state.selected}\r\n                        resetSearch={() => this.setState({ search: '' })}\r\n                        getReset={e => (this.Reset = e)}\r\n                        getRole={(e, name) =>\r\n                          this.setState({\r\n                            role: e,\r\n                            nameRole: name,\r\n                            disabledCreate: false\r\n                          })\r\n                        }\r\n                        FilterReset={remove => (this.FilterReset = remove)}\r\n                        handleState={(name, value) =>\r\n                          this.setState({ [name]: value })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\nclass Table extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'Document Number', value: 'documentNumber' },\r\n        { name: 'Activity Name', value: 'activityName' },\r\n        { name: 'Class', value: 'class' },\r\n        { name: 'Area Code', value: 'areaCode' },\r\n        { name: 'Doc.Type', value: 'docType' },\r\n        { name: 'Disc.', value: 'disc' },\r\n        { name: 'Phase', value: 'phase' },\r\n        { name: 'W.F', value: 'wf' },\r\n        { name: 'AFC Planned Date', value: 'firstStepPlannedDate' },\r\n        { name: 'Rev.', value: 'lastDocumentRevision' },\r\n        { name: 'POI', value: 'poi' },\r\n        { name: 'Status', value: 'AFCStatus' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      selectNumber: '',\r\n      secondNumner: '',\r\n      documentSelected: '',\r\n      firstData: [\r\n        { label: 'completed', color: '#06c554', name: 'Completed' },\r\n        { label: 'In Progress', color: '#2196F3', name: 'In Progress' },\r\n        { label: 'Hold', color: '#f53d49', popUp: true, name: 'Hold' }\r\n      ],\r\n      search: '',\r\n      permision: '',\r\n      filter: '',\r\n      popUp: false,\r\n      idSelected: '',\r\n      textAfc: '',\r\n      popUpDisabled: false,\r\n      loading: 'table',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    window.addEventListener('click', e => {\r\n      if (this.state.selectNumber !== '') {\r\n        switch (\r\n          e.target === this.refs[`more_${this.state.selectNumber}`] ||\r\n          e.target === this.refs[`moresvg_${this.state.selectNumber}`]\r\n        ) {\r\n          case true:\r\n            break\r\n          case false:\r\n            if (\r\n              e.target === this.refs[`boxMore_${this.state.selectNumber}`] ||\r\n              e.target === this.refs[`titleMore_${this.state.selectNumber}`] ||\r\n              e.target === this.refs[`textMore_${this.state.selectNumber}`] ||\r\n              e.target ===\r\n                this.refs[`mainitemMore_${this.state.selectNumber}`] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `itemMore_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `svgCheck_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `inputCheckBox_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ] ||\r\n              e.target ===\r\n                this.refs[\r\n                  `labelItem_${this.state.selectNumber}_${this.state.secondNumner}`\r\n                ]\r\n            ) {\r\n            } else {\r\n              this.setState({ secondNumner: '', selectNumber: '' })\r\n            }\r\n\r\n            break\r\n        }\r\n      }\r\n    })\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table' })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/mdl/fieldEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      this.setState({ loading: 'table', search: '' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/mdl/fieldEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/mdl/fieldEngineering/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            this.props.handleState('role', response.data.role)\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              role: response.data.role,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleRemark = async (name, checked, send, remark = '') => {\r\n    await this.setState({ [name]: checked })\r\n    let status = await name.split('_')[0]\r\n    for (let value in this.state) {\r\n      if (value.includes('_check_')) {\r\n        if (this.state[value]) {\r\n          await setTimeout(async () => {\r\n            await this.setState({ secondNumner: '', selectNumber: '' })\r\n          }, 300)\r\n        }\r\n      }\r\n    }\r\n    if (send) {\r\n      if (this.state.token) {\r\n        let datareg = new FormData()\r\n        datareg.append('id', this.state.idSelected)\r\n        datareg.append('status', status)\r\n        if (remark !== '') {\r\n          datareg.append('remark', remark)\r\n        }\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/mdl/updateAfc`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: `Bearer ${\r\n              this.state.token ? this.state.token : null\r\n            }`\r\n          }\r\n        })\r\n          .then(async response => {\r\n            this.setState({ popUp: false })\r\n            if (response.status === 200) {\r\n              Notification.notify(Message.text(905), 'success')\r\n              await this.fetchData()\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ popUp: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  handleStatus = status => {\r\n    if (status !== null && status) {\r\n      if (status === 'Completed') return SuccsesImage\r\n      else if (status === 'In Progress') return InfoImage\r\n      else if (status === 'Hold') return CancelImage\r\n    } else return ''\r\n  }\r\n  handlePositionBox = key => {\r\n    const half = this.state.contentPerPage / 2\r\n    if (key >= half) {\r\n      return 'bottomBox'\r\n    } else return ''\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n                <th className='action'>action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      status={['AFCStatus']}\r\n                      handleStatus={this.handleStatus}\r\n                      statusSetState={e => this.setState(e)}\r\n                      NotcheckString={['AFCStatus']}\r\n                      textStatus={'AFCStatus'}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                    <td\r\n                      className={`action ${\r\n                        this.state.selectNumber === key ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      {data.poi === 'AFC' &&\r\n                      data.AFCStatus !== 'Completed' &&\r\n                      this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'field_engineering_change_status'\r\n                      ) ? (\r\n                        <span\r\n                          className='more'\r\n                          ref={`more_${key}`}\r\n                          onClick={() => this.setState({ selectNumber: key })}\r\n                        >\r\n                          <MoreVertRoundedIcon ref={`moresvg_${key}`} />\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.state.selectNumber === key ? (\r\n                        <div\r\n                          ref={`boxMore_${key}`}\r\n                          className={`box-more ${this.handlePositionBox(key)}`}\r\n                        >\r\n                          <div\r\n                            ref={`titleMore_${key}`}\r\n                            className='title w-100 pl-0 pr-5'\r\n                          >\r\n                            <h4\r\n                              ref={`textMore_${key}`}\r\n                              className={`w-100 ${\r\n                                this.state.firstData.length > 0\r\n                                  ? ''\r\n                                  : 'd-flex justify-content-end'\r\n                              }`}\r\n                            >\r\n                              {`${this.state.documentSelected} last Status `}\r\n                            </h4>\r\n                          </div>\r\n                          <div\r\n                            ref={`mainitemMore_${key}`}\r\n                            className='main-item'\r\n                          >\r\n                            {this.state.firstData.map((data1, index) => (\r\n                              <div\r\n                                key={index}\r\n                                ref={`itemMore_${key}_${index}`}\r\n                                className={`item ${\r\n                                  this.state.secondSelectNumber === index\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                onClick={() =>\r\n                                  this.setState({ secondNumner: index })\r\n                                }\r\n                              >\r\n                                <input\r\n                                  id={`checkBox_${key}_${index}`}\r\n                                  ref={`inputCheckBox_${key}_${index}`}\r\n                                  name={`${data1.name}_${key}_${index}_check_`}\r\n                                  className='d-none'\r\n                                  type='checkbox'\r\n                                  onChange={async e => {\r\n                                    await this.setState({ idSelected: data.id })\r\n                                    await this.handleRemark(\r\n                                      e.target.name,\r\n                                      e.target.checked,\r\n                                      data1.name === 'Hold' ? false : true\r\n                                    )\r\n                                  }}\r\n                                  onClick={() =>\r\n                                    data1.popUp\r\n                                      ? this.setState({\r\n                                          popUp: true,\r\n                                          popUpDisabled: false\r\n                                        })\r\n                                      : ''\r\n                                  }\r\n                                />\r\n                                <label\r\n                                  ref={`labelItem_${key}_${index}`}\r\n                                  htmlFor={`checkBox_${key}_${index}`}\r\n                                  className='justify-content-start'\r\n                                >\r\n                                  {this.state[\r\n                                    `${data1.name}_${key}_${index}_check_`\r\n                                  ] ? (\r\n                                    <CheckBoxRoundedIcon\r\n                                      style={{ fill: data1.color }}\r\n                                      ref={`svgCheck_${key}_${index}`}\r\n                                    />\r\n                                  ) : (\r\n                                    <CheckBoxOutlineBlankRoundedIcon\r\n                                      style={{ fill: data1.color }}\r\n                                      ref={`svgCheck_${key}_${index}`}\r\n                                    />\r\n                                  )}\r\n                                  {data1.label}\r\n                                </label>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                <a\r\n                  href={`${StaticData.domainIp}/mdl/fieldEngineeringExportExcel`}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='xls'\r\n                >\r\n                  <img src='/img/XLS.svg' alt='xls' />\r\n                  خروجی اکسل\r\n                </a>\r\n                <a\r\n                  href={`${StaticData.domainIp}/mdl/fieldEngineeringExportPdf`}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='pdf'\r\n                >\r\n                  <img src='/img/PDF.svg' alt='PDF' />\r\n                  خروجی pdf\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.popUp ? (\r\n          <Sign\r\n            close={e =>\r\n              this.setState({ popUp: e, popUpDisabled: e, textAfc: '' })\r\n            }\r\n            idSelected={this.state.idSelected}\r\n            handleRemark={this.handleRemark}\r\n            popUpDisabled={this.state.popUpDisabled}\r\n            textAfc={this.state.textAfc}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      errorText: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    if (this.props.popUpDisabled) {\r\n      this.setState({\r\n        errorText: this.props.textAfc\r\n      })\r\n    }\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      if (this.props.popUpDisabled) {\r\n        this.setState({\r\n          errorText: this.props.textAfc\r\n        })\r\n      }\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup'>\r\n        <div className='col-xl-4 col-lg-4 col-md-8 col-12 mb-5'>\r\n          <div className='box-wellcome'>\r\n            <div className='main-textarea'>\r\n              <textarea\r\n                onChange={e =>\r\n                  this.props.popUpDisabled\r\n                    ? ''\r\n                    : this.setState({ errorText: handleString(e.target.value) })\r\n                }\r\n                placeholder='لطفا دلیل خود را وارد کنید'\r\n                value={this.state.errorText}\r\n                readOnly={this.props.popUpDisabled}\r\n              ></textarea>\r\n            </div>\r\n            <div className='buttons-wellcome justify-content-center'>\r\n              <button\r\n                className='close-button d-flex align-items-center'\r\n                onClick={() => this.props.close(false)}\r\n              >\r\n                <CloseRoundedIcon />\r\n                بستن\r\n              </button>\r\n              {!this.props.popUpDisabled ? (\r\n                <button\r\n                  className='accept d-flex align-items-center'\r\n                  onClick={() =>\r\n                    this.state.errorText !== ''\r\n                      ? this.props.handleRemark(\r\n                          'Hold',\r\n                          true,\r\n                          true,\r\n                          this.state.errorText\r\n                        )\r\n                      : ''\r\n                  }\r\n                >\r\n                  <DoneIcon />\r\n                  ثبت\r\n                </button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\dcc.js",["3061"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../layout/sidebar'\r\nimport Menu from '../../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport StaticData from '../../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\n// import SearchIcon from '@material-ui/icons/Search';\r\n// import EditIcon from '@material-ui/icons/Edit';\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../../../Customization/customization'\r\nimport DocumentControlCenter from './DocumentControlCenter/DocumentControlCenter'\r\nimport MainTransmittal from './main/index-transmittal'\r\nimport SubsidiaryIndex from './subsidiary/SubsidiaryIndex'\r\nimport Permision from '../../../permision/permision'\r\n// import Attention from '../../../layout/Attention'\r\n// import axios from 'axios'\r\nimport Notification from '../../../notification/notification'\r\nimport Message from '../../../notification/Message'\r\nimport UploadInformation from '../../../Customization/UploadInformation'\r\nimport CounterTab from '../../../Customization/CounterTab'\r\nimport SearchTable from '../../../table/SearchTable'\r\nexport default class DCC extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Reset = null\r\n    this.FilterReset = null\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [],\r\n      selected: [],\r\n      open: false,\r\n      select: 1,\r\n      search: '',\r\n      role: null,\r\n      nameRole: '',\r\n      disabledCreate: false,\r\n      accessTab: false,\r\n      _404: false,\r\n      upload: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - مرکز کنترل اسناد`\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    setTimeout(async () => {\r\n      this.loadCheck()\r\n    }, 100)\r\n    if (this.props.location && this.props.location.state) {\r\n      this.setState({ select: this.props.location.state.select })\r\n    }\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  loadCheck = async () => {\r\n    this.setState({ selected: [] })\r\n    await Object.keys(this.state).map(value => {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: false })\r\n      }\r\n    })\r\n    await this.state.header.forEach(head => {\r\n      this.setState({\r\n        [`_header_${head.name}`]: true,\r\n        selected: [...this.state.selected, head.name]\r\n      })\r\n    })\r\n  }\r\n  ChangeTab = num => {\r\n    this.setState({ select: num, search: '', disabledCreate: true })\r\n    this.loadCheck()\r\n  }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let name = value.split('_header_')[1]\r\n            array.push(name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    let list = []\r\n    this.state.header.filter(head => list.push(head.name))\r\n    this.setState({ selected: list })\r\n    for (let value in this.state) {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: true })\r\n      }\r\n    }\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      this.FilterReset()\r\n      this.Reset()\r\n    }\r\n  }\r\n  handleShow = () => {\r\n    switch (this.state.select) {\r\n      case 1:\r\n        if (\r\n          this.Permision.handlePermision(this.state.role, 'dcc')\r\n        ) {\r\n          return (\r\n            <DocumentControlCenter\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        } else return ''\r\n      case 2:\r\n        if (this.Permision.handlePermision(this.state.role, 'main_transmittal')) {\r\n          return (\r\n            <MainTransmittal\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        } else return ''\r\n      case 3:\r\n        if (\r\n          this.Permision.handlePermision(\r\n            this.state.role,\r\n            'secondary_transmittal'\r\n          )\r\n        ) {\r\n          return (\r\n            <SubsidiaryIndex\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n              getReset={e => (this.Reset = e)}\r\n            />\r\n          )\r\n        } else return ''\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n  handleShowTab = () => {\r\n    let list = [\r\n      {\r\n        name: 'مدیریت مهندسی',\r\n        value: 1,\r\n        access: this.Permision.handlePermision(this.state.role, 'dcc')\r\n      },\r\n      {\r\n        name: 'ترنسمیتال اصلی',\r\n        value: 2,\r\n        access: this.Permision.handlePermision(this.state.role, 'main_transmittal')\r\n      },\r\n      {\r\n        name: 'ترنسمیتال فرعی',\r\n        value: 3,\r\n        access: this.Permision.handlePermision(\r\n          this.state.role,\r\n          'secondary_transmittal'\r\n        )\r\n      }\r\n    ]\r\n    return list\r\n  }\r\n  handleCreateIcon = () => {\r\n    const { select, role } = this.state\r\n    const CheckPer = name => {\r\n      const check = this.Permision.handlePermision(role, name)\r\n      return check\r\n    }\r\n    const disabled = () => {\r\n      return {\r\n        status: 'disabled',\r\n        html: (\r\n          <span className='item disabled'>\r\n            <AddCircleIcon />\r\n            <span>ایجاد کاربرگ</span>\r\n          </span>\r\n        )\r\n      }\r\n    }\r\n    const Current = url => {\r\n      return {\r\n        status: '',\r\n        html: (\r\n          <a href={url}>\r\n            <AddCircleIcon />\r\n            <span>ایجاد کاربرگ</span>\r\n          </a>\r\n        )\r\n      }\r\n    }\r\n    switch (select) {\r\n      case 1:\r\n        if (CheckPer('dcc_create')) {\r\n          return Current('/create-mdl')\r\n        } else {\r\n          return disabled()\r\n        }\r\n      case 2:\r\n        if (CheckPer('main_transmittal_create')) {\r\n          return Current('/Create-Transmital')\r\n        } else {\r\n          return disabled()\r\n        }\r\n      case 3:\r\n        if (CheckPer('secondary_transmittal_create')) {\r\n          return Current('/Create-SubsidiaryTransmital')\r\n        } else {\r\n          return disabled()\r\n        }\r\n      default:\r\n        return {\r\n          status: 'disabled',\r\n          html: ''\r\n        }\r\n    }\r\n  }\r\n  getRole = (response, status) => {\r\n    if (status === 'response') {\r\n      if (response.status === 200) {\r\n        this.setState({ role: response.data.role })\r\n        if (this.props.location && this.props.location.state) {\r\n          if (this.props.location.state.select === 1) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'dcc')\r\n            ) {\r\n              this.setState({ select: 1, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          } else if (this.props.location.state.select === 2) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'main_transmittal')\r\n            ) {\r\n              this.setState({ select: 2, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          } else if (this.props.location.state.select === 3) {\r\n            if (\r\n              this.Permision.handlePermision(\r\n                response.data.role,\r\n                'secondary_transmittal'\r\n              )\r\n            ) {\r\n              this.setState({ select: 3, accessTab: true })\r\n            } else {\r\n              this.setState({ select: 0, accessTab: false, _404: true })\r\n            }\r\n          }\r\n        } else {\r\n          if (this.Permision.handlePermision(response.data.role, 'dcc')) {\r\n            this.setState({ select: 1, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'main_transmittal')\r\n          ) {\r\n            this.setState({ select: 2, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(\r\n              response.data.role,\r\n              'secondary_transmittal'\r\n            )\r\n          ) {\r\n            this.setState({ select: 3, accessTab: true })\r\n          } else {\r\n            this.setState({ select: 0, accessTab: false, _404: true })\r\n          }\r\n        }\r\n      } else {\r\n        this.setState({ select: 0, accessTab: false })\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    } else {\r\n      this.setState({ select: 0, accessTab: false })\r\n      if (response.response) {\r\n        Notification.notify(Message.text(response.response.status), 'error')\r\n      }\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state._404) {\r\n      return <Redirect to='/404' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole='project_engineering'\r\n                  getRole={this.getRole}\r\n                  BI={false}\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            <div\r\n                              className={`icon ${\r\n                                this.handleCreateIcon().status\r\n                              }`}\r\n                            >\r\n                              {this.handleCreateIcon().html}\r\n                            </div>\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={() =>\r\n                                  this.setState({ upload: !this.state.upload })\r\n                                }\r\n                              >\r\n                                <SystemUpdateAltIcon />\r\n                                <span>بروز رسانی</span>\r\n                              </span>\r\n                            </div>\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیلترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                            {this.state.upload && (\r\n                              <UploadInformation\r\n                                {...this}\r\n                                handleState={(name, value) =>\r\n                                  this.setState({ [name]: value })\r\n                                }\r\n                              />\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='tab-form rtl'>\r\n                      <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start'>\r\n                        {this.state.accessTab &&\r\n                          this.handleShowTab().map(\r\n                            (tab, index) =>\r\n                              tab.access && (\r\n                                <div\r\n                                  className={`item-tab rtl col-xl-3 ${\r\n                                    this.state.select === tab.value\r\n                                      ? 'active IranSans_Bold'\r\n                                      : ''\r\n                                  }`}\r\n                                  onClick={() => this.ChangeTab(tab.value)}\r\n                                  key={index}\r\n                                >\r\n                                  <span>\r\n                                    <label\r\n                                      className={`${\r\n                                        this.state.select === tab.value\r\n                                          ? 'IranSans_Bold'\r\n                                          : ''\r\n                                      }`}\r\n                                    >\r\n                                      <CounterTab\r\n                                        key={index}\r\n                                        tafazol={\r\n                                          this.handleShowTab().filter(\r\n                                            item => !item.access\r\n                                          ).length\r\n                                        }\r\n                                        data={tab}\r\n                                      />\r\n                                      .\r\n                                    </label>\r\n                                    {tab.name}\r\n                                  </span>\r\n                                </div>\r\n                              )\r\n                          )}\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                      {this.state.accessTab && this.handleShow()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\ShowTransmittal.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\Create-Transmital.js",["3062","3063","3064","3065","3066","3067","3068","3069"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../../layout/sidebar'\r\nimport Menu from '../../../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../../../staticData'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../../../layout/loading'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport axios from 'axios'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n// import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n// import Permision from '../../../../permision/permision'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport CancelButton from '../../../../layout/CancelButton'\r\nimport handleCheckText from '../../../../handleCheckText'\r\nimport handleString from '../../../../handleString'\r\nexport default class Transmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // this.Permision = new Permision()\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      counter: 1,\r\n      token: Cookies.get('token'),\r\n      Selected: 0,\r\n      SignFile: '',\r\n      SignName: '',\r\n      Transmittal_No: '',\r\n      last_Transmittal_NO: '',\r\n      Transmittal_Date: '',\r\n      Cotract_No: '',\r\n      From: '',\r\n      Letter_NO: '',\r\n      CC: '',\r\n      To: '',\r\n      approvedBy: {},\r\n      redirect: false,\r\n      checkPermision: false,\r\n      Document: [\r\n        {\r\n          Discipline: '',\r\n          DocumentNo: '',\r\n          DocClass: '',\r\n          DocumentDescription: '',\r\n          Rev: '',\r\n          DocType: '',\r\n          size: '',\r\n          NoPage: '',\r\n          POI: '',\r\n          NoCoples: '',\r\n          statuCopies: true,\r\n          PyvastPdf: [],\r\n          PyvastPdfName: [],\r\n          PeyvastFile: [],\r\n          PeyvastFileName: [],\r\n          readOnly: false,\r\n          error: '',\r\n          valueDocument: '',\r\n          replyAttachment: [],\r\n          replyAttachmentName: [],\r\n          needReply: false\r\n        }\r\n      ],\r\n      listDocuments: [],\r\n      disabled: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - فرم ترنسمیتال`\r\n    if (this.state.token) {\r\n      this.fetchData()\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/transmittal/getFirstDetail`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          this.setState({\r\n            Transmittal_No: response.data.content.thisNumber,\r\n            last_Transmittal_NO: response.data.content.lastNumber,\r\n            Transmittal_Date: response.data.content.created_at,\r\n            Cotract_No: response.data.content.contractNo,\r\n            From: response.data.content.from,\r\n            To: response.data.content.to,\r\n            approvedBy: response.data.content.approvedBy,\r\n            CC: response.data.content.cc,\r\n            listDocuments: response.data.content.documents\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleChangeADD = e => {\r\n    let Document = this.state.Document\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let obj = Document[key]\r\n    let name = e.target.name.split('_')[0]\r\n    obj[name] = handleString(e.target.value)\r\n    function PoiStatus () {\r\n      switch (handleString(e.target.value)) {\r\n        case 'IFC':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        case 'AFC':\r\n          return { readOnly: true, value: '5' }\r\n          break\r\n        case 'IFA':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FIS':\r\n          return { readOnly: true, value: '1' }\r\n          break\r\n        case 'IFI':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FI':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        default:\r\n          return false\r\n      }\r\n    }\r\n    if (name === 'POI') {\r\n      if (PoiStatus) {\r\n        obj['NoCoples'] = PoiStatus().value\r\n        obj['statuCopies'] = PoiStatus().readOnly\r\n      }\r\n    }\r\n    Document[key] = obj\r\n    this.setState({ Document: Document })\r\n  }\r\n  DeleteDocument = async (num, row = false) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[num]\r\n    let DocumentNo = await obj.DocumentNo\r\n    if (DocumentNo === '') {\r\n      await Document.splice(num, 1)\r\n      await this.setState({ Document: Document })\r\n    } else {\r\n      let datareg = await new FormData()\r\n      await datareg.append('documentNumber', DocumentNo)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/transmittal/deleteDocument`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            if (!row) {\r\n              await Document.splice(num, 1)\r\n              await this.setState({\r\n                Document: Document,\r\n                Selected: this.state.Selected - 1\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  deleteFile = async (key, num, files, names) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await this.setState({ Document: Document })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        key,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.Document[key][nameState],\r\n      arrayName = this.state.Document[key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/Transmittal`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let Document = await this.state.Document\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleAddDocument = async () => {\r\n    let obj = await this.state.Document[this.state.Document.length - 1]\r\n    const check =\r\n      handleCheckText(obj.Discipline) &&\r\n      handleCheckText(obj.DocumentNo) &&\r\n      handleCheckText(obj.DocClass) &&\r\n      handleCheckText(obj.DocumentDescription) &&\r\n      handleCheckText(obj.Rev) &&\r\n      handleCheckText(obj.DocType) &&\r\n      handleCheckText(obj.size) &&\r\n      handleCheckText(obj.NoPage) &&\r\n      handleCheckText(obj.POI) &&\r\n      handleCheckText(obj.NoCoples) &&\r\n      obj.PyvastPdf.length > 0 &&\r\n      obj.PyvastPdfName.length > 0 &&\r\n      obj.PeyvastFile.length > 0 &&\r\n      obj.PeyvastFileName.length > 0\r\n    if (check) {\r\n      let objPush = await {\r\n        Discipline: '',\r\n        DocumentNo: '',\r\n        DocClass: '',\r\n        DocumentDescription: '',\r\n        Rev: '',\r\n        DocType: '',\r\n        size: '',\r\n        NoPage: '',\r\n        POI: '',\r\n        NoCoples: '',\r\n        statuCopies: true,\r\n        PyvastPdf: [],\r\n        PyvastPdfName: [],\r\n        PeyvastFile: [],\r\n        PeyvastFileName: [],\r\n        readOnly: false,\r\n        error: '',\r\n        valueDocument: '',\r\n        replyAttachment: [],\r\n        replyAttachmentName: [],\r\n        needReply: false\r\n      }\r\n      await this.setState({\r\n        Document: [...this.state.Document, objPush],\r\n        Selected: this.state.Selected + 1\r\n      })\r\n    } else {\r\n      Notification.notify(Message.text(908), 'error')\r\n    }\r\n  }\r\n  SetDocument = async (nextValue, key) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let PreviousValue = await obj.DocumentNo\r\n    if (handleCheckText(PreviousValue)) {\r\n      await this.DeleteDocument(key, true)\r\n    }\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/transmittal/getDocumentDetail?documentNumber=${nextValue.value}`,\r\n        {\r\n          data: nextValue.value,\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        if (response.status === 200 && response.statusText === 'OK') {\r\n          obj.DocumentNo = nextValue.value\r\n          obj.Discipline = response.data.content.disc\r\n          obj.DocumentDescription = response.data.content.documentDescription\r\n          obj.DocType = response.data.content.docType\r\n          obj.POI = response.data.content.additionalDetail.poi\r\n          obj.Rev = response.data.content.additionalDetail.revision\r\n          obj.NoCoples = response.data.content.additionalDetail.hardCopy\r\n          obj.DocClass = response.data.content.class\r\n          obj.readOnly = true\r\n          obj.error = ''\r\n          obj.valueDocument = nextValue\r\n          obj.needReply = response.data.content.additionalDetail.needReply\r\n          this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n          // if (response.status === 312 || response.status === 313 || response.status === 314){\r\n          obj.Discipline = ''\r\n          obj.DocumentDescription = ''\r\n          obj.DocType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          // if (err.response.status === 312 || err.response.status === 313 || err.response.status === 314){\r\n          obj.Discipline = ''\r\n          obj.DocumentDescription = ''\r\n          obj.DocType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n  }\r\n  handleSubmit = async () => {\r\n    let result = await {}\r\n    let check = await false\r\n    let {\r\n      Transmittal_No,\r\n      last_Transmittal_NO,\r\n      Transmittal_Date,\r\n      Cotract_No,\r\n      From,\r\n      To,\r\n      Letter_NO,\r\n      CC,\r\n      token,\r\n      Document\r\n    } = this.state\r\n    Document.filter(elm => {\r\n      check =\r\n        handleCheckText(elm.Discipline) &&\r\n        handleCheckText(elm.DocumentNo) &&\r\n        handleCheckText(elm.DocClass) &&\r\n        handleCheckText(elm.DocumentDescription) &&\r\n        handleCheckText(elm.Rev) &&\r\n        handleCheckText(elm.DocType) &&\r\n        handleCheckText(elm.size) &&\r\n        handleCheckText(elm.NoPage) &&\r\n        handleCheckText(elm.POI) &&\r\n        handleCheckText(elm.NoCoples) &&\r\n        elm.PyvastPdf.length > 0 &&\r\n        elm.PeyvastFile.length > 0\r\n    })\r\n    if (\r\n      check &&\r\n      handleCheckText(Transmittal_No) &&\r\n      handleCheckText(last_Transmittal_NO) &&\r\n      handleCheckText(Transmittal_Date) &&\r\n      handleCheckText(Cotract_No) &&\r\n      handleCheckText(From) &&\r\n      handleCheckText(To)\r\n    ) {\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      let a = []\r\n      result = Object.keys(Document).map(data => {\r\n        Document[data].PeyvastFile = Object.assign(\r\n          {},\r\n          Document[data].PeyvastFile\r\n        )\r\n        Document[data].PyvastPdf = Object.assign({}, Document[data].PyvastPdf)\r\n        return Document[data]\r\n      })\r\n      result = Object.assign({}, result)\r\n      let datareg = await new FormData()\r\n      await datareg.append('letterNo', Letter_NO)\r\n      await datareg.append('cc', CC)\r\n      await datareg.append('documentsObject', JSON.stringify(result))\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/transmittal/create`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            await this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      this.setState({ loading: '' })\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/dcc`,\r\n              state: { select: 2 }\r\n            }}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='main_transmittal_create'\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>انتقال سند - Document Transmittal</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='form row justify-content-end'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form active`}>\r\n                                <label>\r\n                                  Transmittal No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='Transmittal_No'\r\n                                  value={handleString(\r\n                                    this.state.Transmittal_No\r\n                                  )}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(\r\n                                    this.state.last_Transmittal_NO\r\n                                  )\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  last Transmittal NO.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='last_Transmittal_NO'\r\n                                  value={handleString(\r\n                                    this.state.last_Transmittal_NO\r\n                                  )}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form data ${\r\n                                  handleCheckText(this.state.Transmittal_Date)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    Transmittal Date.\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-left'\r\n                                    readOnly={true}\r\n                                    name='Transmittal_Date'\r\n                                    value={handleString(\r\n                                      this.state.Transmittal_Date\r\n                                    )}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.Cotract_No)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Contract No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  readOnly={true}\r\n                                  name='Cotract_No'\r\n                                  value={handleString(this.state.Cotract_No)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.From)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  From.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='From'\r\n                                  value={handleString(this.state.From)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.foucs === 'Letter_NO' ||\r\n                                  handleCheckText(this.state.Letter_NO)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>Letter NO.</label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  name='Letter_NO'\r\n                                  value={handleString(this.state.Letter_NO)}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.CC) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>CC.</label>\r\n                                <input\r\n                                  name='CC'\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  value={handleString(this.state.CC)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.To) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  To.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='To'\r\n                                  value={handleString(this.state.To)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              {this.state.Document.map((data, key) => (\r\n                                <div\r\n                                  className={`box-add row ${\r\n                                    this.state.Selected !== key\r\n                                      ? 'CloseBox'\r\n                                      : ''\r\n                                  }`}\r\n                                  key={key}\r\n                                >\r\n                                  <div className='title-box-add'>\r\n                                    <span\r\n                                      className={`col p-0 ${\r\n                                        this.state.Selected !== key\r\n                                          ? 'cursor'\r\n                                          : ''\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        this.state.Selected !== key\r\n                                          ? this.setState({\r\n                                              Selected:\r\n                                                this.state.Selected === key\r\n                                                  ? this.state.Document.length -\r\n                                                    1\r\n                                                  : key\r\n                                            })\r\n                                          : ''\r\n                                      }\r\n                                    >\r\n                                      مورد {key + 1}\r\n                                    </span>\r\n                                    {this.state.Selected !== key ? (\r\n                                      <div\r\n                                        className='delete-Document'\r\n                                        onClick={() => this.DeleteDocument(key)}\r\n                                      >\r\n                                        <span>\r\n                                          <DeleteIcon />\r\n                                          حذف\r\n                                        </span>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                  <div className='w-100 row m-0'>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.Discipline)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Discipline\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          name={`Discipline_${key}`}\r\n                                          readOnly={true}\r\n                                          value={handleString(data.Discipline)}\r\n                                          className='text-left'\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div className='field-form selectBox'>\r\n                                        <CreatableSelect\r\n                                          className='text-left ltr'\r\n                                          onChange={newValue =>\r\n                                            this.SetDocument(newValue, key)\r\n                                          }\r\n                                          options={this.state.listDocuments}\r\n                                          value={data.valueDocument}\r\n                                          placeholder={\r\n                                            <label>\r\n                                              Document No.\r\n                                              <span className='star IranSans_Bold'>\r\n                                                *\r\n                                              </span>\r\n                                            </label>\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.DocType)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Type.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`DocType_${key}`}\r\n                                          value={handleString(data.DocType)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(\r\n                                            data.DocumentDescription\r\n                                          )\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Document Description\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`DocumentDescription_${key}`}\r\n                                          value={handleString(\r\n                                            data.DocumentDescription\r\n                                          )}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `Rev_${key}` ||\r\n                                          handleCheckText(data.Rev)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Rev.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`Rev_${key}`}\r\n                                          value={handleString(data.Rev)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `DocClass_${key}` ||\r\n                                          handleCheckText(data.DocClass)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Class\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`DocClass_${key}`}\r\n                                          value={handleString(data.DocClass)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `size_${key}` ||\r\n                                          handleCheckText(data.size)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          size\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`size_${key}`}\r\n                                          value={handleString(data.size)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='A4'>A4</option>\r\n                                          <option value='A3'>A3</option>\r\n                                          <option value='A2'>A2</option>\r\n                                          <option value='A1'>A1</option>\r\n                                          <option value='A0'>A0</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoPage_${key}` ||\r\n                                          handleCheckText(data.NoPage)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          NO. Of Page\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoPage_${key}`}\r\n                                          value={handleString(data.NoPage)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoCoples_${key}` ||\r\n                                          handleCheckText(data.NoCoples)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          No. Of Copies\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoCoples_${key}`}\r\n                                          value={handleString(data.NoCoples)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `POI_${key}` ||\r\n                                          handleCheckText(data.POI)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          P.O.I\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`POI_${key}`}\r\n                                          value={handleString(data.POI)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='IFC'>IFC</option>\r\n                                          <option value='AFC'>AFC</option>\r\n                                          <option value='IFA'>IFA</option>\r\n                                          <option value='FIS'>FIS</option>\r\n                                          <option value='IFI'>IFI</option>\r\n                                          <option value='FI'>FI</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل PDF\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PyvastPdfName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PyvastPdf',\r\n                                                      'PyvastPdfName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PyvastPdf_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PyvastPdf_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PyvastPdf_${key}`,\r\n                                              `PyvastPdfName_${key}`\r\n                                            )\r\n                                          }\r\n                                          accept='application/pdf'\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PyvastPdf_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PyvastPdf_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل اصلی\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PeyvastFileName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PeyvastFile',\r\n                                                      'PeyvastFileName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PeyvastFile_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PeyvastFile_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PeyvastFile_${key}`,\r\n                                              `PeyvastFileName_${key}`\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PeyvastFile_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PeyvastFile_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    {data.needReply ? (\r\n                                      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                        <div className={`field-form persian`}>\r\n                                          <label>فایل ضمیمه reply</label>\r\n                                          <div className='allName col row m-0 justify-content-end'>\r\n                                            {data.replyAttachmentName.map(\r\n                                              (name, index) => (\r\n                                                <span key={index}>\r\n                                                  <CloseRoundedIcon\r\n                                                    onClick={() =>\r\n                                                      this.deleteFile(\r\n                                                        key,\r\n                                                        index,\r\n                                                        'replyAttachment',\r\n                                                        'replyAttachmentName'\r\n                                                      )\r\n                                                    }\r\n                                                  />\r\n                                                  {name}\r\n                                                </span>\r\n                                              )\r\n                                            )}\r\n                                          </div>\r\n                                          <input\r\n                                            name={`replyAttachment_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`replyAttachment_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `replyAttachment_${key}`,\r\n                                                `replyAttachmentName_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`replyAttachment_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `replyAttachment_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.handleAddDocument}>\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              <div className='guide'>\r\n                                <div className='row-guide'>\r\n                                  <label>Type:</label>\r\n                                  <p>\r\n                                    G: Original , P: Print , C: Compact Disk\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Purpose of Issue (P.O.I):</label>\r\n                                  <p>\r\n                                    IFC: First Issued For Comment , AFC:\r\n                                    Approved For Construction , IFA: Issued For\r\n                                    Approval , Fis: Final Issued , IFI: Issued\r\n                                    For Information , FI: First Issue\r\n                                    (Endorsement Report)\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Class:</label>\r\n                                  <p>\r\n                                    Class A: Issue for Approval (AFC) , Class B:\r\n                                    Issue for Approval (Approved) , Class C:\r\n                                    Issue for Information\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form`}>\r\n                                <label>{`${this.state.approvedBy.first_name}  ${this.state.approvedBy.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label signEnglish'\r\n                                  onClick={() =>\r\n                                    this.state.approvedBy.sign\r\n                                      ? this.setState({ popUp: true })\r\n                                      : ''\r\n                                  }\r\n                                >\r\n                                  sign\r\n                                  <AttachFileIcon />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div className='submit-form col-12 mt-5'>\r\n                              <button\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ثبت اطلاعات\r\n                              </button>\r\n                              <CancelButton redirect='dcc' status={2} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.approvedBy.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\ShowTransmittal.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\EditTransmittal.js",["3070","3071","3072","3073","3074","3075","3076","3077"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../../layout/sidebar'\r\nimport Menu from '../../../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../../../staticData'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../../../layout/loading'\r\nimport axios from 'axios'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n// import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Permision from '../../../../permision/permision'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport handleString from '../../../../handleString'\r\nimport handleCheckText from '../../../../handleCheckText'\r\nimport { handleFilter } from '../../../../table/OutputFilter'\r\nexport default class Transmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      counter: 1,\r\n      token: Cookies.get('token'),\r\n      Selected: 0,\r\n      SignFile: '',\r\n      SignName: '',\r\n      Transmittal_No: '',\r\n      last_Transmittal_NO: '',\r\n      created_at: '',\r\n      contractNo: '',\r\n      _from: '',\r\n      Letter_NO: '',\r\n      cc: '',\r\n      _to: '',\r\n      approveBy: {},\r\n      redirect: false,\r\n      documents: [],\r\n      masterDocumentList: [],\r\n      copyList: [],\r\n      status: '0',\r\n      loading: '',\r\n      disabled: false,\r\n      needReply: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} -  ویرایش فرم ترنسمیتال`\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    if (id) {\r\n      this.fetchData(id)\r\n    }\r\n  }\r\n  fetchData = id => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/transmittal/getForEdit/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          // if (this.Permision.handlePermision(response.data.role, 'transmittal_edit')) {\r\n          const documents = Object.keys(response.data.content.documents).map(\r\n            data => {\r\n              response.data.content.documents[data].attachment = Object.keys(\r\n                response.data.content.documents[data].attachment\r\n              ).map(atch => {\r\n                return response.data.content.documents[data].attachment[atch]\r\n              })\r\n              response.data.content.documents[data].native = Object.keys(\r\n                response.data.content.documents[data].native\r\n              ).map(nati => {\r\n                return response.data.content.documents[data].native[nati]\r\n              })\r\n              if (response.data.content.needReply) {\r\n                if (\r\n                  response.data.content.documents[data].replyAttachment &&\r\n                  response.data.content.documents[data].replyAttachment.length\r\n                ) {\r\n                  response.data.content.documents[data].replyAttachment =\r\n                    response.data.content.documents[data].replyAttachment\r\n                } else {\r\n                  response.data.content.documents[data].replyAttachment = []\r\n                }\r\n              }\r\n              return response.data.content.documents[data]\r\n            }\r\n          )\r\n          response.data.content['documents'] = await documents\r\n          response.data.content['copyList'] = await response.data.content\r\n            .masterDocumentList\r\n          await this.setState(response.data.content)\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          if (err.response.status === 404) {\r\n            setTimeout(() => {\r\n              this.setState({ back: true })\r\n            }, 5000)\r\n          }\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleChangeADD = e => {\r\n    let Document = this.state.documents\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let obj = Document[key]\r\n    let name = e.target.name.split('_')[0]\r\n    obj[name] = handleString(e.target.value)\r\n    Document[key] = obj\r\n    function PoiStatus () {\r\n      switch (handleString(e.target.value)) {\r\n        case 'IFC':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        case 'AFC':\r\n          return { readOnly: true, value: '5' }\r\n          break\r\n        case 'IFA':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FIS':\r\n          return { readOnly: true, value: '1' }\r\n          break\r\n        case 'IFI':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FI':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        default:\r\n          return false\r\n      }\r\n    }\r\n    if (name === 'poi') {\r\n      if (PoiStatus) {\r\n        obj['copiesNumber'] = PoiStatus().value\r\n      }\r\n    }\r\n    this.setState({ documents: Document })\r\n  }\r\n  DeleteDocument = async (num, row = false) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[num]\r\n    let documentNumber = await obj.documentNumber\r\n    if (documentNumber === '') {\r\n      await Document.splice(num, 1)\r\n      await this.setState({\r\n        documents: Document,\r\n        Selected: this.state.Selected\r\n      })\r\n    } else {\r\n      let datareg = await new FormData()\r\n      await datareg.append('documentNumber', documentNumber)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/transmittal/deleteDocument`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            if (!row) {\r\n              await Document.splice(num, 1)\r\n              await this.setState({\r\n                documents: Document,\r\n                Selected: this.state.Selected - 1\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  SetDocument = async (nextValue, key) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[key]\r\n    let PreviousValue = await obj.documentNumber\r\n    if (PreviousValue) {\r\n      await this.DeleteDocument(key, true)\r\n    }\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/transmittal/getDocumentDetail?documentNumber=${nextValue.value}`,\r\n        {\r\n          data: nextValue.value,\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        if (response.status === 200 && response.statusText === 'OK') {\r\n          obj.documentNumber = nextValue.value\r\n          obj.disc = response.data.content.disc\r\n          obj.description = response.data.content.documentDescription\r\n          obj.docType = response.data.content.docType\r\n          obj.readOnly = true\r\n          obj.error = ''\r\n          obj.selectedDocumentObject = nextValue\r\n          obj.poi = response.data.content.additionalDetail.poi\r\n          obj.revision = response.data.content.additionalDetail.revision\r\n          obj.copiesNumber = response.data.content.additionalDetail.hardCopy\r\n          obj.class = response.data.content.class\r\n          this.setState({ documents: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n          // if (response.status === 312 || response.status === 313 || response.status === 314){\r\n          obj.disc = ''\r\n          obj.description = ''\r\n          obj.docType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.documentNumber = ''\r\n          obj.selectedDocumentObject = ''\r\n          this.setState({ documents: Document })\r\n          // }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          // if (err.response.status === 312 || err.response.status === 313 || err.response.status === 314){\r\n          obj.disc = ''\r\n          obj.description = ''\r\n          obj.docType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.documentNumber = ''\r\n          obj.selectedDocumentObject = ''\r\n          this.setState({ documents: Document })\r\n          // }\r\n        }\r\n      })\r\n  }\r\n  deleteFile = async (key, num, files) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    await data1.splice(num, 1)\r\n    await this.setState({ documents: Document })\r\n  }\r\n  handleUpload = async (e, files) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    let Document = await this.state.documents\r\n    let array = await Document[key][files]\r\n    let minez = await 1\r\n    if (array.length > 0) {\r\n      minez = await 0\r\n    }\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        e.target.files.length,\r\n        key,\r\n        minez\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, length, key, minez) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.documents[key][nameState]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/Transmittal`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (this.state.documents[key][nameState].length === length - minez) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          let Document = await this.state.documents\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          await this.setState({ documents: Document })\r\n        } else {\r\n          this.setState({ loading: '' })\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleAddDocument = () => {\r\n    let obj = this.state.documents[this.state.documents.length - 1]\r\n    let objPush = {\r\n      disc: '',\r\n      documentNumber: '',\r\n      class: '',\r\n      description: '',\r\n      revision: '',\r\n      docType: '',\r\n      size: '',\r\n      pageNumber: '',\r\n      poi: '',\r\n      copiesNumber: '',\r\n      attachment: [],\r\n      native: [],\r\n      selectedDocumentObject: '',\r\n      replyAttachment: this.state.needReply ? [] : undefined\r\n    }\r\n    if (this.state.documents.length > 0) {\r\n      const Check =\r\n        obj.disc !== '' &&\r\n        obj.documentNumber !== '' &&\r\n        obj.class !== '' &&\r\n        obj.description !== '' &&\r\n        obj.revision !== '' &&\r\n        obj.docType !== '' &&\r\n        obj.size !== '' &&\r\n        obj.pageNumber !== '' &&\r\n        obj.poi !== '' &&\r\n        obj.copiesNumber !== '' &&\r\n        Object.keys(obj.attachment).map(_ => {\r\n          return obj.attachment[_]\r\n        }).length > 0 &&\r\n        Object.keys(obj.native).map(_ => {\r\n          return obj.native[_]\r\n        }).length > 0\r\n      if (Check) {\r\n        this.setState({\r\n          documents: [...this.state.documents, objPush],\r\n          Selected: this.state.Selected + 1\r\n        })\r\n      } else {\r\n        Notification.notify(Message.text(908), 'error')\r\n      }\r\n    } else {\r\n      this.setState({\r\n        documents: [...this.state.documents, objPush],\r\n        Selected: 0\r\n      })\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let checkDocument = false\r\n    let i = 0\r\n    while (i < this.state.documents.length) {\r\n      checkDocument =\r\n        this.state.documents[i].disc !== '' &&\r\n        this.state.documents[i].selectedDocumentObject !== '' &&\r\n        this.state.documents[i].class !== '' &&\r\n        this.state.documents[i].description !== '' &&\r\n        this.state.documents[i].revision !== '' &&\r\n        this.state.documents[i].docType !== '' &&\r\n        this.state.documents[i].size !== '' &&\r\n        this.state.documents[i].pageNumber !== '' &&\r\n        this.state.documents[i].poi !== '' &&\r\n        this.state.documents[i].copiesNumber !== '' &&\r\n        this.state.documents[i].attachment.length > 0 &&\r\n        this.state.documents[i].native.length > 0\r\n      i++\r\n      if (!checkDocument) {\r\n        break\r\n      }\r\n    }\r\n    if (checkDocument) {\r\n      const result = Object.assign(\r\n        {},\r\n        Object.keys(this.state.documents).map(data => {\r\n          this.state.documents[data].attachment = Object.assign(\r\n            {},\r\n            this.state.documents[data].attachment\r\n          )\r\n          this.state.documents[data].native = Object.assign(\r\n            {},\r\n            this.state.documents[data].native\r\n          )\r\n          return this.state.documents[data]\r\n        })\r\n      )\r\n      this.setState({ disabled: true, loading: 'submit' })\r\n      setTimeout(async () => {\r\n        let datareg = await new FormData()\r\n        await datareg.append('letterNo', this.state.Letter_NO)\r\n        await datareg.append('cc', this.state.cc)\r\n        await datareg.append('documentsObject', JSON.stringify(result))\r\n        await datareg.append('transmittalId', this.state.id)\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/transmittal/update`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: `Bearer ${\r\n              this.state.token ? this.state.token : null\r\n            }`\r\n          }\r\n        })\r\n          .then(async response => {\r\n            await this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              Notification.notify(Message.text(100), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ redirect: true, disabled: false })\r\n              }, 5000)\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '', disabled: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }, 1000)\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/dcc`,\r\n              state: { select: 2 }\r\n            }}\r\n          />\r\n        )\r\n      } else if (this.state.status === '0') {\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='transmittal_edit'\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>انتقال سند - Document Transmittal</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='col-12'>\r\n                            <div className='message-error'>\r\n                              <label className='strong'>\r\n                                ترنسمیتال به دلیل زیر رد شد :\r\n                              </label>\r\n                              <p className='m-0'>\r\n                                {handleString(this.state.message)}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                          <div className='form row justify-content-end'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.id) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Transmittal No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='id'\r\n                                  value={handleString(this.state.id)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form data ${\r\n                                  handleCheckText(this.state.created_at)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    Transmittal Date.\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-left'\r\n                                    readOnly={true}\r\n                                    name='created_at'\r\n                                    value={handleString(this.state.created_at)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.contractNo)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Contract No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  readOnly={true}\r\n                                  name='contractNo'\r\n                                  value={handleString(this.state.contractNo)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state._from)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  From.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='_from'\r\n                                  value={handleString(this.state._from)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.foucs === 'Letter_NO' ||\r\n                                  handleCheckText(this.state.Letter_NO)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>Letter NO.</label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  name='Letter_NO'\r\n                                  value={handleString(this.state.Letter_NO)}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.cc) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>CC.</label>\r\n                                <input\r\n                                  name='cc'\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  value={handleString(this.state.cc)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state._to)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  To.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='_to'\r\n                                  value={handleString(this.state._to)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              {this.state.documents.map((data, key) => (\r\n                                <div\r\n                                  className={`box-add row ${\r\n                                    this.state.Selected !== key\r\n                                      ? 'CloseBox'\r\n                                      : ''\r\n                                  }`}\r\n                                  key={key}\r\n                                >\r\n                                  <div className='title-box-add'>\r\n                                    <span\r\n                                      className={`col p-0 ${\r\n                                        this.state.Selected !== key\r\n                                          ? 'cursor'\r\n                                          : ''\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        this.state.Selected !== key\r\n                                          ? this.setState({\r\n                                              Selected:\r\n                                                this.state.Selected === key\r\n                                                  ? this.state.documents\r\n                                                      .length - 1\r\n                                                  : key\r\n                                            })\r\n                                          : ''\r\n                                      }\r\n                                    >\r\n                                      مورد {key + 1}\r\n                                    </span>\r\n                                    {this.state.Selected !== key ? (\r\n                                      <div\r\n                                        className='delete-Document'\r\n                                        onClick={() => this.DeleteDocument(key)}\r\n                                      >\r\n                                        <span>\r\n                                          <DeleteIcon />\r\n                                          حذف\r\n                                        </span>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                  <div className='w-100 row m-0'>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.disc)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Discipline\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          name={`Discipline_${key}`}\r\n                                          readOnly={true}\r\n                                          value={handleString(data.disc)}\r\n                                          className='text-left'\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div className='field-form selectBox'>\r\n                                        <CreatableSelect\r\n                                          className='text-left ltr'\r\n                                          onChange={newValue =>\r\n                                            this.SetDocument(newValue, key)\r\n                                          }\r\n                                          options={this.state.copyList}\r\n                                          value={data.selectedDocumentObject}\r\n                                          placeholder={\r\n                                            <label>\r\n                                              Document No.\r\n                                              <span className='star IranSans_Bold'>\r\n                                                *\r\n                                              </span>\r\n                                            </label>\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.docType)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Type.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`docType_${key}`}\r\n                                          value={handleString(data.docType)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.description)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Document Description\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`description_${key}`}\r\n                                          value={handleString(data.description)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `revision_${key}` ||\r\n                                          handleCheckText(data.revision)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Rev.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`revision_${key}`}\r\n                                          value={handleString(data.revision)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `class_${key}` ||\r\n                                          handleCheckText(data.class)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Class\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`class_${key}`}\r\n                                          value={handleString(data.class)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `size_${key}` ||\r\n                                          handleCheckText(data.size)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Size\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`size_${key}`}\r\n                                          value={handleString(data.size)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='A4'>A4</option>\r\n                                          <option value='A3'>A3</option>\r\n                                          <option value='A2'>A2</option>\r\n                                          <option value='A1'>A1</option>\r\n                                          <option value='A0'>A0</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `pageNumber_${key}` ||\r\n                                          handleCheckText(data.pageNumber)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          NO. Of Page\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`pageNumber_${key}`}\r\n                                          value={handleString(data.pageNumber)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `copiesNumber_${key}` ||\r\n                                          handleCheckText(data.copiesNumber)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          No. Of Copies\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`copiesNumber_${key}`}\r\n                                          value={handleString(\r\n                                            data.copiesNumber\r\n                                          )}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `poi_${key}` ||\r\n                                          handleCheckText(data.poi)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          P.O.I\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`poi_${key}`}\r\n                                          value={handleString(data.poi)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='IFC'>IFC</option>\r\n                                          <option value='AFC'>AFC</option>\r\n                                          <option value='IFA'>IFA</option>\r\n                                          <option value='FIS'>FIS</option>\r\n                                          <option value='IFI'>IFI</option>\r\n                                          <option value='FI'>FI</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل PDF\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                          {data.attachment.length\r\n                                            ? data.attachment.map(\r\n                                                (data1, index1) => (\r\n                                                  <span key={index1}>\r\n                                                    <CloseRoundedIcon\r\n                                                      onClick={() =>\r\n                                                        this.deleteFile(\r\n                                                          key,\r\n                                                          index1,\r\n                                                          'attachment'\r\n                                                        )\r\n                                                      }\r\n                                                    />\r\n                                                    {data1}\r\n                                                  </span>\r\n                                                )\r\n                                              )\r\n                                            : ''}\r\n                                          <input\r\n                                            name={`attachment_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`attachment_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `attachment_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`attachment_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `attachment_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل اصلی\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                          {data.native.length\r\n                                            ? data.native.map(\r\n                                                (data2, index2) => (\r\n                                                  <span key={index2}>\r\n                                                    <CloseRoundedIcon\r\n                                                      onClick={() =>\r\n                                                        this.deleteFile(\r\n                                                          key,\r\n                                                          index2,\r\n                                                          'native'\r\n                                                        )\r\n                                                      }\r\n                                                    />\r\n                                                    {data2}\r\n                                                  </span>\r\n                                                )\r\n                                              )\r\n                                            : ''}\r\n                                          <input\r\n                                            name={`native_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`native_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `native_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`native_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `native_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                    {(data.replyAttachment &&\r\n                                      typeof data.replyAttachment !==\r\n                                        'string' &&\r\n                                      data.replyAttachment.length) ||\r\n                                    this.state.needReply ? (\r\n                                      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                        <div className={`field-form persian`}>\r\n                                          <label>\r\n                                            فایل ضمیمه reply\r\n                                            {/* <span className='star IranSans_Bold'>*</span> */}\r\n                                          </label>\r\n                                          <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                            {data.replyAttachment.length > 0\r\n                                              ? data.replyAttachment.map(\r\n                                                  (data2, index2) => (\r\n                                                    <span key={index2}>\r\n                                                      <CloseRoundedIcon\r\n                                                        onClick={() =>\r\n                                                          this.deleteFile(\r\n                                                            key,\r\n                                                            index2,\r\n                                                            'replyAttachment'\r\n                                                          )\r\n                                                        }\r\n                                                      />\r\n                                                      {data2}\r\n                                                    </span>\r\n                                                  )\r\n                                                )\r\n                                              : ''}\r\n                                            <input\r\n                                              name={`replyAttachment_${key}`}\r\n                                              className='d-none'\r\n                                              type='file'\r\n                                              id={`replyAttachment_${key}`}\r\n                                              multiple\r\n                                              onChange={e =>\r\n                                                this.handleUpload(\r\n                                                  e,\r\n                                                  `replyAttachment_${key}`\r\n                                                )\r\n                                              }\r\n                                            />\r\n                                            <label\r\n                                              className='upload-label'\r\n                                              htmlFor={`replyAttachment_${key}`}\r\n                                            >\r\n                                              {this.state.loading ===\r\n                                              `replyAttachment_${key}` ? (\r\n                                                <Loading className='form-loader w-auto' />\r\n                                              ) : (\r\n                                                <AttachFileIcon />\r\n                                              )}\r\n                                              آپلود فایل\r\n                                            </label>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.handleAddDocument}>\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              <div className='guide'>\r\n                                <div className='row-guide'>\r\n                                  <label>Type:</label>\r\n                                  <p>\r\n                                    G: Original , P: Print , C: Compact Disk\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Purpose of Issue (P.O.I):</label>\r\n                                  <p>\r\n                                    IFC: First Issued For Comment , AFC:\r\n                                    Approved For Construction , IFA: Issued For\r\n                                    Approval , Fis: Final Issued , IFI: Issued\r\n                                    For Information , FI: First Issue\r\n                                    (Endorsement Report)\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Class:</label>\r\n                                  <p>\r\n                                    Class A: Issue for Approval (AFC) , Class B:\r\n                                    Issue for Approval (Approved) , Class C:\r\n                                    Issue for Information\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form`}>\r\n                                <label>{`${this.state.approveBy.first_name}  ${this.state.approveBy.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label signEnglish'\r\n                                  onClick={() =>\r\n                                    this.state.approveBy.sign\r\n                                      ? this.setState({ popUp: true })\r\n                                      : ''\r\n                                  }\r\n                                >\r\n                                  sign\r\n                                  <AttachFileIcon />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div className='submit-form col-12 mt-5'>\r\n                              <button\r\n                                className='w-auto'\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ویرایش اطلاعات\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.approveBy.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n      } else {\r\n        return <Redirect to='/transmittal' />\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\Create-Transmital.js",["3078","3079","3080","3081","3082","3083"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../../layout/sidebar'\r\nimport Menu from '../../../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../../../staticData'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../../../layout/loading'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport axios from 'axios'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n// import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport Permision from '../../../../permision/permision'\r\nimport CancelButton from '../../../../layout/CancelButton'\r\nimport handleCheckText from '../../../../handleCheckText'\r\nimport handleString from '../../../../handleString'\r\nexport default class InternalTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      token: Cookies.get('token'),\r\n      Selected: 0,\r\n      SignName: '',\r\n      Transmittal_No: '',\r\n      last_Transmittal_NO: '',\r\n      Transmittal_Date: '',\r\n      Cotract_No: '',\r\n      From: '',\r\n      Letter_NO: '',\r\n      CC: '',\r\n      To: '',\r\n      approvedBy: {},\r\n      redirect: false,\r\n      checkPermision: false,\r\n      Document: [\r\n        {\r\n          Discipline: '',\r\n          DocumentNo: '',\r\n          DocClass: '',\r\n          DocumentDescription: '',\r\n          Rev: '',\r\n          DocType: '',\r\n          size: '',\r\n          NoPage: '',\r\n          POI: '',\r\n          NoCoples: '',\r\n          statuCopies: true,\r\n          PyvastPdf: [],\r\n          PyvastPdfName: [],\r\n          PeyvastFile: [],\r\n          PeyvastFileName: [],\r\n          readOnly: false,\r\n          error: '',\r\n          valueDocument: '',\r\n          replyAttachment: [],\r\n          replyAttachmentName: [],\r\n          needReply: false\r\n        }\r\n      ],\r\n      listDocuments: [],\r\n      disabled: false,\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - فرم ترنسمیتال فرعی`\r\n    if (this.state.token) {\r\n      this.fetchData()\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/internalTransmittal/getFirstDetail`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          this.setState({\r\n            Transmittal_No: response.data.content.thisNumber,\r\n            last_Transmittal_NO: response.data.content.lastNumber,\r\n            Transmittal_Date: response.data.content.created_at,\r\n            Cotract_No: response.data.content.contractNo,\r\n            From: response.data.content.from,\r\n            To: response.data.content.to,\r\n            approvedBy: response.data.content.approvedBy,\r\n            CC: response.data.content.cc,\r\n            listDocuments: response.data.content.documents,\r\n            role: response.data.role\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  handleChangeADD = e => {\r\n    let Document = this.state.Document\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let obj = Document[key]\r\n    let name = e.target.name.split('_')[0]\r\n    obj[name] = e.target.value\r\n    function PoiStatus () {\r\n      switch (e.target.value) {\r\n        case 'IFC':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        case 'AFC':\r\n          return { readOnly: true, value: '5' }\r\n          break\r\n        case 'IFA':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FIS':\r\n          return { readOnly: true, value: '1' }\r\n          break\r\n        case 'IFI':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FI':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        default:\r\n          return false\r\n      }\r\n    }\r\n    if (name === 'POI') {\r\n      if (PoiStatus) {\r\n        obj['NoCoples'] = PoiStatus().value\r\n        obj['statuCopies'] = PoiStatus().readOnly\r\n      }\r\n    }\r\n    Document[key] = obj\r\n    this.setState({ Document: Document })\r\n  }\r\n  DeleteDocument = async (num, row = false) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[num]\r\n    let DocumentNo = await obj.DocumentNo\r\n    if (DocumentNo === '') {\r\n      await Document.splice(num, 1)\r\n      await this.setState({ Document: Document })\r\n    } else {\r\n      let datareg = await new FormData()\r\n      await datareg.append('documentNumber', DocumentNo)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/internalTransmittal/deleteDocument`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            if (!row) {\r\n              await Document.splice(num, 1)\r\n              await this.setState({\r\n                Document: Document,\r\n                Selected: this.state.Selected - 1\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  deleteFile = async (key, num, files, names) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await this.setState({ Document: Document })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        key,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.Document[key][nameState],\r\n      arrayName = this.state.Document[key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/internalTransmittal`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let Document = await this.state.Document\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleAddDocument = async () => {\r\n    let obj = await this.state.Document[this.state.Document.length - 1]\r\n    const check =\r\n      (await obj.Discipline) !== '' &&\r\n      obj.DocumentNo !== '' &&\r\n      obj.DocClass !== '' &&\r\n      obj.DocumentDescription !== '' &&\r\n      obj.Rev !== '' &&\r\n      obj.DocType !== '' &&\r\n      obj.size !== '' &&\r\n      obj.NoPage !== '' &&\r\n      obj.POI !== '' &&\r\n      obj.NoCoples !== '' &&\r\n      obj.PyvastPdf.length > 0 &&\r\n      obj.PyvastPdfName.length > 0 &&\r\n      obj.PeyvastFile.length > 0 &&\r\n      obj.PeyvastFileName.length > 0\r\n    if (check) {\r\n      let objPush = await {\r\n        Discipline: '',\r\n        DocumentNo: '',\r\n        DocClass: '',\r\n        DocumentDescription: '',\r\n        Rev: '',\r\n        DocType: '',\r\n        size: '',\r\n        NoPage: '',\r\n        POI: '',\r\n        NoCoples: '',\r\n        statuCopies: true,\r\n        PyvastPdf: [],\r\n        PyvastPdfName: [],\r\n        PeyvastFile: [],\r\n        PeyvastFileName: [],\r\n        readOnly: false,\r\n        error: '',\r\n        valueDocument: '',\r\n        replyAttachment: [],\r\n        replyAttachmentName: [],\r\n        needReply: false\r\n      }\r\n      await this.setState({\r\n        Document: [...this.state.Document, objPush],\r\n        Selected: this.state.Selected + 1\r\n      })\r\n    } else {\r\n      Notification.notify(Message.text(908), 'error')\r\n    }\r\n  }\r\n  SetDocument = async (nextValue, key) => {\r\n    let Document = await this.state.Document\r\n    let obj = await Document[key]\r\n    let PreviousValue = await obj.DocumentNo\r\n    if (PreviousValue !== '') {\r\n      await this.DeleteDocument(key, true)\r\n    }\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/internalTransmittal/getDocumentDetail?documentNumber=${nextValue.value}`,\r\n        {\r\n          data: nextValue.value,\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        if (response.status === 200 && response.statusText === 'OK') {\r\n          obj.DocumentNo = nextValue.value\r\n          obj.Discipline = response.data.content.disc\r\n          obj.DocumentDescription = response.data.content.documentDescription\r\n          obj.DocType = response.data.content.docType\r\n          obj.POI = response.data.content.additionalDetail.poi\r\n          obj.Rev = response.data.content.additionalDetail.revision\r\n          obj.NoCoples = response.data.content.additionalDetail.hardCopy\r\n          obj.DocClass = response.data.content.class\r\n          obj.readOnly = true\r\n          obj.error = ''\r\n          obj.valueDocument = nextValue\r\n          obj.needReply = response.data.content.additionalDetail.needReply\r\n          this.setState({ Document: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n          // if (response.status === 312 || response.status === 313 || response.status === 314){\r\n          obj.Discipline = ''\r\n          obj.DocumentDescription = ''\r\n          obj.DocType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          // if (err.response.status === 312 || err.response.status === 313 || err.response.status === 314){\r\n          obj.Discipline = ''\r\n          obj.DocumentDescription = ''\r\n          obj.DocType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.DocumentNo = ''\r\n          obj.valueDocument = ''\r\n          this.setState({ Document: Document })\r\n          // }\r\n        }\r\n      })\r\n  }\r\n  handleSubmit = async () => {\r\n    let result = await {}\r\n    let check = await false\r\n    let i = 0\r\n    while (i < this.state.Document.length) {\r\n      check =\r\n        this.state.Document[i].Discipline !== '' &&\r\n        this.state.Document[i].DocumentNo !== '' &&\r\n        this.state.Document[i].DocClass !== '' &&\r\n        this.state.Document[i].DocumentDescription !== '' &&\r\n        this.state.Document[i].Rev !== '' &&\r\n        this.state.Document[i].DocType !== '' &&\r\n        this.state.Document[i].size !== '' &&\r\n        this.state.Document[i].NoPage !== '' &&\r\n        this.state.Document[i].POI !== '' &&\r\n        this.state.Document[i].NoCoples !== '' &&\r\n        this.state.Document[i].PyvastPdf.length > 0 &&\r\n        this.state.Document[i].PeyvastFile.length > 0\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    if (\r\n      check &&\r\n      this.state.Transmittal_No !== '' &&\r\n      this.state.last_Transmittal_NO !== '' &&\r\n      this.state.Transmittal_Date !== '' &&\r\n      this.state.Cotract_No !== '' &&\r\n      this.state.From !== '' &&\r\n      this.state.To !== ''\r\n    ) {\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      result = Object.keys(this.state.Document).map(data => {\r\n        this.state.Document[data].PeyvastFile = Object.assign(\r\n          {},\r\n          this.state.Document[data].PeyvastFile\r\n        )\r\n        this.state.Document[data].PyvastPdf = Object.assign(\r\n          {},\r\n          this.state.Document[data].PyvastPdf\r\n        )\r\n        this.state.Document[data].replyAttachment = Object.assign(\r\n          {},\r\n          this.state.Document[data].replyAttachment\r\n        )\r\n        return this.state.Document[data]\r\n      })\r\n      result = Object.assign({}, result)\r\n      let datareg = await new FormData()\r\n      await datareg.append('letterNo', this.state.Letter_NO)\r\n      await datareg.append('cc', this.state.CC)\r\n      await datareg.append('documentsObject', JSON.stringify(result))\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/internalTransmittal/create`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              this.Permision.handlePermision(\r\n                this.state.role,\r\n                'secondary_transmittal_create'\r\n              )\r\n            ) {\r\n              Notification.notify(Message.text(900), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ redirect: true, disabled: false })\r\n              }, 5000)\r\n            } else this.setState({ checkPermision: true })\r\n          } else {\r\n            await this.setState({ disabled: false, redirect: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      this.setState({ loading: '' })\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.checkPermision) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/404`\r\n          }}\r\n        />\r\n      )\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/dcc`,\r\n              state: { select: 3 }\r\n            }}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='secondary_transmittal_create'\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>انتقال سند - Document Transmittal</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='form row justify-content-end'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form active`}>\r\n                                <label>\r\n                                  Transmittal No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='Transmittal_No'\r\n                                  value={this.state.Transmittal_No}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.last_Transmittal_NO !== ''\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  last Transmittal NO.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='last_Transmittal_NO'\r\n                                  value={this.state.last_Transmittal_NO}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form data ${\r\n                                  handleCheckText(this.state.Transmittal_Date)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    Transmittal Date.\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-left'\r\n                                    readOnly={true}\r\n                                    name='Transmittal_Date'\r\n                                    value={handleString(\r\n                                      this.state.Transmittal_Date\r\n                                    )}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.Cotract_No)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Contract No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  readOnly={true}\r\n                                  name='Cotract_No'\r\n                                  value={handleString(this.state.Cotract_No)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.From)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  From.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='From'\r\n                                  value={handleString(this.state.From)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.foucs === 'Letter_NO' ||\r\n                                  handleCheckText(this.state.Letter_NO)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>Letter NO.</label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  name='Letter_NO'\r\n                                  value={handleString(this.state.Letter_NO)}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.CC) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>CC.</label>\r\n                                <input\r\n                                  name='CC'\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  value={handleString(this.state.CC)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.To) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  To.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='To'\r\n                                  value={handleString(this.state.To)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              {this.state.Document.map((data, key) => (\r\n                                <div\r\n                                  className={`box-add row ${\r\n                                    this.state.Selected !== key\r\n                                      ? 'CloseBox'\r\n                                      : ''\r\n                                  }`}\r\n                                  key={key}\r\n                                >\r\n                                  <div className='title-box-add'>\r\n                                    <span\r\n                                      className={`col p-0 ${\r\n                                        this.state.Selected !== key\r\n                                          ? 'cursor'\r\n                                          : ''\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        this.state.Selected !== key\r\n                                          ? this.setState({\r\n                                              Selected:\r\n                                                this.state.Selected === key\r\n                                                  ? this.state.Document.length -\r\n                                                    1\r\n                                                  : key\r\n                                            })\r\n                                          : ''\r\n                                      }\r\n                                    >\r\n                                      مورد {key + 1}\r\n                                    </span>\r\n                                    {this.state.Selected !== key ? (\r\n                                      <div\r\n                                        className='delete-Document'\r\n                                        onClick={() => this.DeleteDocument(key)}\r\n                                      >\r\n                                        <span>\r\n                                          <DeleteIcon />\r\n                                          حذف\r\n                                        </span>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                  <div className='w-100 row m-0'>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.Discipline)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Discipline\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          name={`Discipline_${key}`}\r\n                                          readOnly={true}\r\n                                          value={handleString(data.Discipline)}\r\n                                          className='text-left'\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div className='field-form selectBox'>\r\n                                        <CreatableSelect\r\n                                          className='text-left ltr'\r\n                                          onChange={newValue =>\r\n                                            this.SetDocument(newValue, key)\r\n                                          }\r\n                                          options={this.state.listDocuments}\r\n                                          value={data.valueDocument}\r\n                                          placeholder={\r\n                                            <label>\r\n                                              Document No.\r\n                                              <span className='star IranSans_Bold'>\r\n                                                *\r\n                                              </span>\r\n                                            </label>\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.DocType)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Type.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`DocType_${key}`}\r\n                                          value={handleString(data.DocType)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(\r\n                                            data.DocumentDescription\r\n                                          )\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Document Description\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`DocumentDescription_${key}`}\r\n                                          value={handleString(\r\n                                            data.DocumentDescription\r\n                                          )}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `Rev_${key}` ||\r\n                                          handleCheckText(data.Rev)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Rev.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`Rev_${key}`}\r\n                                          value={handleString(data.Rev)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `DocClass_${key}` ||\r\n                                          handleCheckText(data.DocClass)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Class\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`DocClass_${key}`}\r\n                                          value={handleString(data.DocClass)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `size_${key}` ||\r\n                                          handleCheckText(data.size)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          size\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`size_${key}`}\r\n                                          value={handleString(data.size)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='A4'>A4</option>\r\n                                          <option value='A3'>A3</option>\r\n                                          <option value='A2'>A2</option>\r\n                                          <option value='A1'>A1</option>\r\n                                          <option value='A0'>A0</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoPage_${key}` ||\r\n                                          handleCheckText(data.NoPage)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          NO. Of Page\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoPage_${key}`}\r\n                                          value={handleString(data.NoPage)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `NoCoples_${key}` ||\r\n                                          handleCheckText(data.NoCoples)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          No. Of Copies\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`NoCoples_${key}`}\r\n                                          value={handleString(data.NoCoples)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `POI_${key}` ||\r\n                                          handleCheckText(data.POI)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          P.O.I\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`POI_${key}`}\r\n                                          value={handleString(data.POI)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='IFC'>IFC</option>\r\n                                          <option value='AFC'>AFC</option>\r\n                                          <option value='IFA'>IFA</option>\r\n                                          <option value='FIS'>FIS</option>\r\n                                          <option value='IFI'>IFI</option>\r\n                                          <option value='FI'>FI</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل PDF\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PyvastPdfName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PyvastPdf',\r\n                                                      'PyvastPdfName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PyvastPdf_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PyvastPdf_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PyvastPdf_${key}`,\r\n                                              `PyvastPdfName_${key}`\r\n                                            )\r\n                                          }\r\n                                          accept='application/pdf'\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PyvastPdf_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PyvastPdf_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل اصلی\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end'>\r\n                                          {data.PeyvastFileName.map(\r\n                                            (name, index) => (\r\n                                              <span key={index}>\r\n                                                <CloseRoundedIcon\r\n                                                  onClick={() =>\r\n                                                    this.deleteFile(\r\n                                                      key,\r\n                                                      index,\r\n                                                      'PeyvastFile',\r\n                                                      'PeyvastFileName'\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                {name}\r\n                                              </span>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                        <input\r\n                                          name={`PeyvastFile_${key}`}\r\n                                          className='d-none'\r\n                                          type='file'\r\n                                          id={`PeyvastFile_${key}`}\r\n                                          multiple\r\n                                          onChange={e =>\r\n                                            this.handleUpload(\r\n                                              e,\r\n                                              `PeyvastFile_${key}`,\r\n                                              `PeyvastFileName_${key}`\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <label\r\n                                          className='upload-label'\r\n                                          htmlFor={`PeyvastFile_${key}`}\r\n                                        >\r\n                                          {this.state.loading ===\r\n                                          `PeyvastFile_${key}` ? (\r\n                                            <Loading className='form-loader w-auto' />\r\n                                          ) : (\r\n                                            <AttachFileIcon />\r\n                                          )}\r\n                                          آپلود فایل\r\n                                        </label>\r\n                                      </div>\r\n                                    </div>\r\n                                    {data.needReply ? (\r\n                                      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                        <div className={`field-form persian`}>\r\n                                          <label>فایل ضمیمه reply</label>\r\n                                          <div className='allName col row m-0 justify-content-end'>\r\n                                            {data.replyAttachmentName.map(\r\n                                              (name, index) => (\r\n                                                <span key={index}>\r\n                                                  <CloseRoundedIcon\r\n                                                    onClick={() =>\r\n                                                      this.deleteFile(\r\n                                                        key,\r\n                                                        index,\r\n                                                        'replyAttachment',\r\n                                                        'replyAttachmentName'\r\n                                                      )\r\n                                                    }\r\n                                                  />\r\n                                                  {name}\r\n                                                </span>\r\n                                              )\r\n                                            )}\r\n                                          </div>\r\n                                          <input\r\n                                            name={`replyAttachment_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`replyAttachment_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `replyAttachment_${key}`,\r\n                                                `replyAttachmentName_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`replyAttachment_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `replyAttachment_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.handleAddDocument}>\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              <div className='guide'>\r\n                                <div className='row-guide'>\r\n                                  <label>Type:</label>\r\n                                  <p>\r\n                                    G: Original , P: Print , C: Compact Disk\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Purpose of Issue (P.O.I):</label>\r\n                                  <p>\r\n                                    IFC: First Issued For Comment , AFC:\r\n                                    Approved For Construction , IFA: Issued For\r\n                                    Approval , Fis: Final Issued , IFI: Issued\r\n                                    For Information , FI: First Issue\r\n                                    (Endorsement Report)\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Class:</label>\r\n                                  <p>\r\n                                    Class A: Issue for Approval (AFC) , Class B:\r\n                                    Issue for Approval (Approved) , Class C:\r\n                                    Issue for Information\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form`}>\r\n                                <label>{`${this.state.approvedBy.first_name}  ${this.state.approvedBy.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label signEnglish'\r\n                                  onClick={() =>\r\n                                    this.state.approvedBy.sign\r\n                                      ? this.setState({ popUp: true })\r\n                                      : ''\r\n                                  }\r\n                                >\r\n                                  sign\r\n                                  <AttachFileIcon />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div className='submit-form col-12 mt-5'>\r\n                              <button\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ثبت اطلاعات\r\n                              </button>\r\n                              <CancelButton redirect='dcc' status={3} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.approvedBy.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\EditTransmittal.js",["3084","3085","3086","3087","3088","3089"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../../layout/sidebar'\r\nimport Menu from '../../../../layout/menu'\r\nimport { Redirect } from 'react-router-dom'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../../../staticData'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../../../layout/loading'\r\nimport axios from 'axios'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\n// import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Permision from '../../../../permision/permision'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport handleCheckText from '../../../../handleCheckText'\r\nimport handleString from '../../../../handleString'\r\nexport default class internalTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      counter: 1,\r\n      token: Cookies.get('token'),\r\n      Selected: 0,\r\n      SignFile: '',\r\n      SignName: '',\r\n      Transmittal_No: '',\r\n      last_Transmittal_NO: '',\r\n      created_at: '',\r\n      contractNo: '',\r\n      _from: '',\r\n      Letter_NO: '',\r\n      cc: '',\r\n      _to: '',\r\n      approveBy: {},\r\n      redirect: false,\r\n      checkPermision: false,\r\n      documents: [],\r\n      masterDocumentList: [],\r\n      copyList: [],\r\n      status: '0',\r\n      loading: '',\r\n      disabled: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} -  ویرایش فرم ترنسمیتال`\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    if (id) {\r\n      this.fetchData(id)\r\n    }\r\n  }\r\n  fetchData = id => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/internalTransmittal/getForEdit/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          if (\r\n            this.Permision.handlePermision(\r\n              response.data.role,\r\n              'internal_transmittal_edit'\r\n            )\r\n          ) {\r\n            for (let i = 0; i < response.data.content.documents.length; i++) {\r\n              response.data.content.documents[i].attachment = Object.keys(\r\n                response.data.content.documents[i].attachment\r\n              ).map(attach => {\r\n                return response.data.content.documents[i].attachment[attach]\r\n              })\r\n              response.data.content.documents[i].native = Object.keys(\r\n                response.data.content.documents[i].native\r\n              ).map(nati => {\r\n                return response.data.content.documents[i].native[nati]\r\n              })\r\n            }\r\n            response.data.content['copyList'] = await response.data.content\r\n              .masterDocumentList\r\n            await this.setState(response.data.content)\r\n          } else {\r\n            this.setState({ redirect: true })\r\n          }\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          if (err.response.status === 404) {\r\n            setTimeout(() => {\r\n              this.setState({ back: true })\r\n            }, 5000)\r\n          }\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  handleChangeADD = e => {\r\n    let Document = this.state.documents\r\n    let key = parseInt(e.target.name.split('_')[1])\r\n    let obj = Document[key]\r\n    let name = e.target.name.split('_')[0]\r\n    obj[name] = e.target.value\r\n    Document[key] = obj\r\n    function PoiStatus () {\r\n      switch (e.target.value) {\r\n        case 'IFC':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        case 'AFC':\r\n          return { readOnly: true, value: '5' }\r\n          break\r\n        case 'IFA':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FIS':\r\n          return { readOnly: true, value: '1' }\r\n          break\r\n        case 'IFI':\r\n          return { readOnly: true, value: '-' }\r\n          break\r\n        case 'FI':\r\n          return { readOnly: false, value: '' }\r\n          break\r\n        default:\r\n          return false\r\n      }\r\n    }\r\n    if (name === 'poi') {\r\n      if (PoiStatus) {\r\n        obj['copiesNumber'] = PoiStatus().value\r\n      }\r\n    }\r\n    this.setState({ documents: Document })\r\n  }\r\n  DeleteDocument = async (num, row = false) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[num]\r\n    let documentNumber = await obj.documentNumber\r\n    if (documentNumber === '') {\r\n      await Document.splice(num, 1)\r\n      await this.setState({\r\n        documents: Document,\r\n        Selected: this.state.Selected\r\n      })\r\n    } else {\r\n      let datareg = await new FormData()\r\n      await datareg.append('documentNumber', documentNumber)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/internalTransmittal/deleteDocument`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            if (!row) {\r\n              await Document.splice(num, 1)\r\n              await this.setState({\r\n                documents: Document,\r\n                Selected: this.state.Selected - 1\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  SetDocument = async (nextValue, key) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[key]\r\n    let PreviousValue = await obj.documentNumber\r\n    if (PreviousValue) {\r\n      await this.DeleteDocument(key, true)\r\n    }\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/internalTransmittal/getDocumentDetail?documentNumber=${nextValue.value}`,\r\n        {\r\n          data: nextValue.value,\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(response => {\r\n        if (response.status === 200 && response.statusText === 'OK') {\r\n          obj.documentNumber = nextValue.value\r\n          obj.disc = response.data.content.disc\r\n          obj.description = response.data.content.documentDescription\r\n          obj.docType = response.data.content.docType\r\n          obj.readOnly = true\r\n          obj.error = ''\r\n          obj.selectedDocumentObject = nextValue\r\n          obj.poi = response.data.content.additionalDetail.poi\r\n          obj.revision = response.data.content.additionalDetail.revision\r\n          obj.copiesNumber = response.data.content.additionalDetail.hardCopy\r\n          obj.class = response.data.content.class\r\n          this.setState({ documents: Document })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n          // if (response.status === 312 || response.status === 313 || response.status === 314){\r\n          obj.disc = ''\r\n          obj.description = ''\r\n          obj.docType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.documentNumber = ''\r\n          obj.selectedDocumentObject = ''\r\n          this.setState({ documents: Document })\r\n          // }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          // if (err.response.status === 312 || err.response.status === 313 || err.response.status === 314){\r\n          obj.disc = ''\r\n          obj.description = ''\r\n          obj.docType = ''\r\n          obj.readOnly = false\r\n          obj.error = ''\r\n          obj.documentNumber = ''\r\n          obj.selectedDocumentObject = ''\r\n          this.setState({ documents: Document })\r\n          // }\r\n        }\r\n      })\r\n  }\r\n  deleteFile = async (key, num, files) => {\r\n    let Document = await this.state.documents\r\n    let obj = await Document[key]\r\n    let data1 = await obj[files]\r\n    await data1.splice(num, 1)\r\n    await this.setState({ documents: Document })\r\n  }\r\n  handleUpload = async (e, files) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    let Document = await this.state.documents\r\n    let array = await Document[key][files]\r\n    let minez = await 1\r\n    if (array.length > 0) {\r\n      minez = await 0\r\n    }\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        e.target.files.length,\r\n        key,\r\n        minez\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, length, key, minez) => {\r\n    let datareg = new FormData()\r\n    let array = this.state.documents[key][nameState]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/internalTransmittal`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (this.state.documents[key][nameState].length === length - minez) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          let Document = await this.state.documents\r\n          let obj = await Document[key]\r\n          obj[nameState] = await array\r\n          await this.setState({ documents: Document })\r\n        } else {\r\n          this.setState({ loading: '' })\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleAddDocument = () => {\r\n    let obj = this.state.documents[this.state.documents.length - 1]\r\n    if (\r\n      handleCheckText(obj.disc) &&\r\n      handleCheckText(obj.documentNumber) &&\r\n      handleCheckText(obj.class) &&\r\n      handleCheckText(obj.description) &&\r\n      handleCheckText(obj.revision) &&\r\n      handleCheckText(obj.docType) &&\r\n      handleCheckText(obj.size) &&\r\n      handleCheckText(obj.pageNumber) &&\r\n      handleCheckText(obj.poi) &&\r\n      handleCheckText(obj.copiesNumber) &&\r\n      Object.keys(obj.attachment).map(_ => {\r\n        return obj.attachment[_]\r\n      }).length > 0 &&\r\n      Object.keys(obj.native).map(_ => {\r\n        return obj.native[_]\r\n      }).length > 0\r\n    ) {\r\n      let objPush = {\r\n        disc: '',\r\n        documentNumber: '',\r\n        class: '',\r\n        description: '',\r\n        revision: '',\r\n        docType: '',\r\n        size: '',\r\n        pageNumber: '',\r\n        poi: '',\r\n        copiesNumber: '',\r\n        attachment: [],\r\n        native: [],\r\n        selectedDocumentObject: ''\r\n      }\r\n      this.setState({\r\n        documents: [...this.state.documents, objPush],\r\n        Selected: this.state.Selected + 1\r\n      })\r\n    } else {\r\n      Notification.notify(Message.text(908), 'error')\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let { documents, Letter_NO, cc, id, token } = this.state\r\n    let checkDocument = false\r\n    let i = 0\r\n    while (i < documents.length) {\r\n      checkDocument =\r\n        documents[i].disc !== '' &&\r\n        documents[i].selectedDocumentObject !== '' &&\r\n        documents[i].class !== '' &&\r\n        documents[i].description !== '' &&\r\n        documents[i].revision !== '' &&\r\n        documents[i].docType !== '' &&\r\n        documents[i].size !== '' &&\r\n        documents[i].pageNumber !== '' &&\r\n        documents[i].poi !== '' &&\r\n        documents[i].copiesNumber !== '' &&\r\n        documents[i].attachment.length > 0 &&\r\n        documents[i].native.length > 0\r\n      i++\r\n      if (!checkDocument) {\r\n        break\r\n      }\r\n    }\r\n    if (checkDocument) {\r\n      const result = Object.assign(\r\n        {},\r\n        Object.keys(documents).map(data => {\r\n          documents[data].attachment = Object.assign(\r\n            {},\r\n            documents[data].attachment\r\n          )\r\n          documents[data].native = Object.assign({}, documents[data].native)\r\n          return documents[data]\r\n        })\r\n      )\r\n      this.setState({ disabled: true, loading: 'submit' })\r\n      setTimeout(async () => {\r\n        let datareg = await new FormData()\r\n        await datareg.append('letterNo', Letter_NO)\r\n        await datareg.append('cc', cc)\r\n        await datareg.append('documentsObject', JSON.stringify(result))\r\n        await datareg.append('transmittalId', id)\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/internalTransmittal/update`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: token ? `Bearer ${token}` : null\r\n          }\r\n        })\r\n          .then(async response => {\r\n            await this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              Notification.notify(Message.text(100), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ redirect: true, disabled: false })\r\n              }, 5000)\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '', disabled: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }, 1000)\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/dcc`,\r\n              state: { select: 3 }\r\n            }}\r\n          />\r\n        )\r\n      } else if (this.state.checkPermision) {\r\n        return <Redirect to={'404'} />\r\n      } else if (this.state.status === '0') {\r\n        return (\r\n          <div className='main'>\r\n            <div className='col-12 p-0'>\r\n              <div className='row m-0'>\r\n                <Sidebar\r\n                  handleState={(name, value) =>\r\n                    this.setState({ [name]: value })\r\n                  }\r\n                />\r\n                <div\r\n                  className={`${\r\n                    this.state._close\r\n                      ? 'mainSideClose'\r\n                      : 'col-xl-10 col-lg-10 p-0'\r\n                  } dashboard`}\r\n                >\r\n                  <Menu\r\n                    nameRole='internal_transmittal_edit'\r\n                    nameUrl={this.props.nameUrl}\r\n                  />\r\n                  <div className='w-100 row m-0 main-box-dashboard'>\r\n                    <div className='boxes-dashboard row m-0 p-0'>\r\n                      <div className='main-form'>\r\n                        <div className='title-from'>\r\n                          <h2>انتقال سند - Document Transmittal</h2>\r\n                        </div>\r\n                        <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                          <div className='col-12'>\r\n                            <div className='message-error'>\r\n                              <label className='strong'>\r\n                                ترنسمیتال به دلیل زیر رد شد :{' '}\r\n                              </label>\r\n                              <p className='m-0'>{this.state.message}</p>\r\n                            </div>\r\n                          </div>\r\n                          <div className='form row justify-content-end'>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.id) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Transmittal No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='id'\r\n                                  value={handleString(this.state.id)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form data ${\r\n                                  handleCheckText(this.state.created_at)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <div className='icon-field'>\r\n                                  <DateRangeRoundedIcon />\r\n                                </div>\r\n                                <div className='col p-0'>\r\n                                  <label>\r\n                                    Transmittal Date.\r\n                                    <span className='star IranSans_Bold'>\r\n                                      *\r\n                                    </span>\r\n                                  </label>\r\n                                  <input\r\n                                    className='text-left'\r\n                                    readOnly={true}\r\n                                    name='created_at'\r\n                                    value={handleString(this.state.created_at)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.contractNo)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  Contract No.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  readOnly={true}\r\n                                  name='contractNo'\r\n                                  value={handleString(this.state.contractNo)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state._from)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  From.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='_from'\r\n                                  value={handleString(this.state._from)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  this.state.foucs === 'Letter_NO' ||\r\n                                  handleCheckText(this.state.Letter_NO)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>Letter NO.</label>\r\n                                <input\r\n                                  className='text-left'\r\n                                  name='Letter_NO'\r\n                                  value={handleString(this.state.Letter_NO)}\r\n                                  onFocus={e => this.OnFocus(e.target.name)}\r\n                                  onBlur={this.OnBlur}\r\n                                  onChange={this.handleChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state.cc) ? 'active' : ''\r\n                                }`}\r\n                              >\r\n                                <label>CC.</label>\r\n                                <input\r\n                                  name='cc'\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  value={handleString(this.state.cc)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div\r\n                                className={`field-form ${\r\n                                  handleCheckText(this.state._to)\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                              >\r\n                                <label>\r\n                                  To.\r\n                                  <span className='star IranSans_Bold'>*</span>\r\n                                </label>\r\n                                <input\r\n                                  readOnly={true}\r\n                                  className='text-left'\r\n                                  name='_to'\r\n                                  value={handleString(this.state._to)}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              {this.state.documents.map((data, key) => (\r\n                                <div\r\n                                  className={`box-add row ${\r\n                                    this.state.Selected !== key\r\n                                      ? 'CloseBox'\r\n                                      : ''\r\n                                  }`}\r\n                                  key={key}\r\n                                >\r\n                                  <div className='title-box-add'>\r\n                                    <span\r\n                                      className={`col p-0 ${\r\n                                        this.state.Selected !== key\r\n                                          ? 'cursor'\r\n                                          : ''\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        this.state.Selected !== key\r\n                                          ? this.setState({\r\n                                              Selected:\r\n                                                this.state.Selected === key\r\n                                                  ? this.state.documents\r\n                                                      .length - 1\r\n                                                  : key\r\n                                            })\r\n                                          : ''\r\n                                      }\r\n                                    >\r\n                                      مورد {key + 1}\r\n                                    </span>\r\n                                    {this.state.Selected !== key ? (\r\n                                      <div\r\n                                        className='delete-Document'\r\n                                        onClick={() => this.DeleteDocument(key)}\r\n                                      >\r\n                                        <span>\r\n                                          <DeleteIcon />\r\n                                          حذف\r\n                                        </span>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                  <div className='w-100 row m-0'>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.disc)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Discipline\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          name={`Discipline_${key}`}\r\n                                          readOnly={true}\r\n                                          value={handleString(data.disc)}\r\n                                          className='text-left'\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div className='field-form selectBox'>\r\n                                        <CreatableSelect\r\n                                          className='text-left ltr'\r\n                                          onChange={newValue =>\r\n                                            this.SetDocument(newValue, key)\r\n                                          }\r\n                                          options={this.state.copyList}\r\n                                          value={data.selectedDocumentObject}\r\n                                          placeholder={\r\n                                            <label>\r\n                                              Document No.\r\n                                              <span className='star IranSans_Bold'>\r\n                                                *\r\n                                              </span>\r\n                                            </label>\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.docType)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Type.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`docType_${key}`}\r\n                                          value={handleString(data.docType)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          handleCheckText(data.description)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Document Description\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          readOnly={true}\r\n                                          name={`description_${key}`}\r\n                                          value={handleString(data.description)}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `revision_${key}` ||\r\n                                          handleCheckText(data.revision)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Rev.\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`revision_${key}`}\r\n                                          value={handleString(data.revision)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `class_${key}` ||\r\n                                          handleCheckText(data.class)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Doc. Class\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`class_${key}`}\r\n                                          value={handleString(data.class)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `size_${key}` ||\r\n                                          handleCheckText(data.size)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          Size\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`size_${key}`}\r\n                                          value={handleString(data.size)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='A4'>A4</option>\r\n                                          <option value='A3'>A3</option>\r\n                                          <option value='A2'>A2</option>\r\n                                          <option value='A1'>A1</option>\r\n                                          <option value='A0'>A0</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `pageNumber_${key}` ||\r\n                                          handleCheckText(data.pageNumber)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          NO. Of Page\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`pageNumber_${key}`}\r\n                                          value={handleString(data.pageNumber)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs ===\r\n                                            `copiesNumber_${key}` ||\r\n                                          handleCheckText(data.copiesNumber)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          No. Of Copies\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <input\r\n                                          className='text-left'\r\n                                          name={`copiesNumber_${key}`}\r\n                                          value={handleString(\r\n                                            data.copiesNumber\r\n                                          )}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                                      <div\r\n                                        className={`field-form ${\r\n                                          this.state.foucs === `poi_${key}` ||\r\n                                          handleCheckText(data.poi)\r\n                                            ? 'active'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <label>\r\n                                          P.O.I\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <select\r\n                                          name={`poi_${key}`}\r\n                                          value={handleString(data.poi)}\r\n                                          onFocus={e =>\r\n                                            this.OnFocus(e.target.name)\r\n                                          }\r\n                                          onBlur={this.OnBlur}\r\n                                          onChange={this.handleChangeADD}\r\n                                        >\r\n                                          <option className='d-none'></option>\r\n                                          <option value='IFC'>IFC</option>\r\n                                          <option value='AFC'>AFC</option>\r\n                                          <option value='IFA'>IFA</option>\r\n                                          <option value='FIS'>FIS</option>\r\n                                          <option value='IFI'>IFI</option>\r\n                                          <option value='FI'>FI</option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل PDF\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                          {data.attachment.length\r\n                                            ? data.attachment.map(\r\n                                                (data1, index1) => (\r\n                                                  <span key={index1}>\r\n                                                    <CloseRoundedIcon\r\n                                                      onClick={() =>\r\n                                                        this.deleteFile(\r\n                                                          key,\r\n                                                          index1,\r\n                                                          'attachment'\r\n                                                        )\r\n                                                      }\r\n                                                    />\r\n                                                    {data1}\r\n                                                  </span>\r\n                                                )\r\n                                              )\r\n                                            : ''}\r\n                                          <input\r\n                                            name={`attachment_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`attachment_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `attachment_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`attachment_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `attachment_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                      <div className={`field-form persian`}>\r\n                                        <label>\r\n                                          پیوست فایل اصلی\r\n                                          <span className='star IranSans_Bold'>\r\n                                            *\r\n                                          </span>\r\n                                        </label>\r\n                                        <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                          {data.native.length\r\n                                            ? data.native.map(\r\n                                                (data2, index2) => (\r\n                                                  <span key={index2}>\r\n                                                    <CloseRoundedIcon\r\n                                                      onClick={() =>\r\n                                                        this.deleteFile(\r\n                                                          key,\r\n                                                          index2,\r\n                                                          'native'\r\n                                                        )\r\n                                                      }\r\n                                                    />\r\n                                                    {data2}\r\n                                                  </span>\r\n                                                )\r\n                                              )\r\n                                            : ''}\r\n                                          <input\r\n                                            name={`native_${key}`}\r\n                                            className='d-none'\r\n                                            type='file'\r\n                                            id={`native_${key}`}\r\n                                            multiple\r\n                                            onChange={e =>\r\n                                              this.handleUpload(\r\n                                                e,\r\n                                                `native_${key}`\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          <label\r\n                                            className='upload-label'\r\n                                            htmlFor={`native_${key}`}\r\n                                          >\r\n                                            {this.state.loading ===\r\n                                            `native_${key}` ? (\r\n                                              <Loading className='form-loader w-auto' />\r\n                                            ) : (\r\n                                              <AttachFileIcon />\r\n                                            )}\r\n                                            آپلود فایل\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                    {data.replyAttachment &&\r\n                                    typeof data.replyAttachment !== 'string' &&\r\n                                    data.replyAttachment.length ? (\r\n                                      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                                        <div className={`field-form persian`}>\r\n                                          <label>\r\n                                            فایل ضمیمه reply\r\n                                            <span className='star IranSans_Bold'>\r\n                                              *\r\n                                            </span>\r\n                                          </label>\r\n                                          <div className='allName col row m-0 justify-content-end align-items-center'>\r\n                                            {data.replyAttachment.length > 0\r\n                                              ? data.replyAttachment.map(\r\n                                                  (data2, index2) => (\r\n                                                    <span key={index2}>\r\n                                                      <CloseRoundedIcon\r\n                                                        onClick={() =>\r\n                                                          this.deleteFile(\r\n                                                            key,\r\n                                                            index2,\r\n                                                            'replyAttachment'\r\n                                                          )\r\n                                                        }\r\n                                                      />\r\n                                                      {data2}\r\n                                                    </span>\r\n                                                  )\r\n                                                )\r\n                                              : ''}\r\n                                            <input\r\n                                              name={`replyAttachment_${key}`}\r\n                                              className='d-none'\r\n                                              type='file'\r\n                                              id={`replyAttachment_${key}`}\r\n                                              multiple\r\n                                              onChange={e =>\r\n                                                this.handleUpload(\r\n                                                  e,\r\n                                                  `replyAttachment_${key}`\r\n                                                )\r\n                                              }\r\n                                            />\r\n                                            <label\r\n                                              className='upload-label'\r\n                                              htmlFor={`replyAttachment_${key}`}\r\n                                            >\r\n                                              {this.state.loading ===\r\n                                              `replyAttachment_${key}` ? (\r\n                                                <Loading className='form-loader w-auto' />\r\n                                              ) : (\r\n                                                <AttachFileIcon />\r\n                                              )}\r\n                                              آپلود فایل\r\n                                            </label>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    ) : (\r\n                                      ''\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                            </div>\r\n                            <div className='button-add col-12'>\r\n                              <button onClick={this.handleAddDocument}>\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                              </button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                              <div className='guide'>\r\n                                <div className='row-guide'>\r\n                                  <label>Type:</label>\r\n                                  <p>\r\n                                    G: Original , P: Print , C: Compact Disk\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Purpose of Issue (P.O.I):</label>\r\n                                  <p>\r\n                                    IFC: First Issued For Comment , AFC:\r\n                                    Approved For Construction , IFA: Issued For\r\n                                    Approval , Fis: Final Issued , IFI: Issued\r\n                                    For Information , FI: First Issue\r\n                                    (Endorsement Report)\r\n                                  </p>\r\n                                </div>\r\n                                <div className='row-guide'>\r\n                                  <label>Class:</label>\r\n                                  <p>\r\n                                    Class A: Issue for Approval (AFC) , Class B:\r\n                                    Issue for Approval (Approved) , Class C:\r\n                                    Issue for Information\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                              <div className={`field-form`}>\r\n                                <label>{`${this.state.approveBy.first_name}  ${this.state.approveBy.last_name}`}</label>\r\n                                <label\r\n                                  className='upload-label signEnglish'\r\n                                  onClick={() =>\r\n                                    this.state.approveBy.sign\r\n                                      ? this.setState({ popUp: true })\r\n                                      : ''\r\n                                  }\r\n                                >\r\n                                  sign\r\n                                  <AttachFileIcon />\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                            <div className='submit-form col-12 mt-5'>\r\n                              <button\r\n                                className='w-auto'\r\n                                onClick={this.handleSubmit}\r\n                                disabled={this.state.disabled}\r\n                              >\r\n                                {this.state.loading === 'submit' ? (\r\n                                  <Loading className='form-loader' />\r\n                                ) : (\r\n                                  <DoneIcon />\r\n                                )}\r\n                                ویرایش اطلاعات\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.popUp ? (\r\n              <Sign\r\n                close={e => this.setState({ popUp: e })}\r\n                pictureShow={this.state.approveBy.sign}\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )\r\n      } else {\r\n        return <Redirect to='/project-engineering' />\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          <img src={this.props.pictureShow} alt='sign' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\vendorDocument\\CreateVendor.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\index-reports.js",["3090"],"import React, { Component } from 'react'\r\nimport Sidebar from '../../../../layout/sidebar'\r\nimport Menu from '../../../../layout/menu'\r\nimport Cookies from 'js-cookie';\r\nimport { Redirect, Link } from 'react-router-dom'\r\n// import AddCircleIcon from '@material-ui/icons/AddCircle';\r\n// import SearchIcon from '@material-ui/icons/Search';\r\nimport axios from 'axios'\r\nimport StaticData from '../../../../staticData'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport NotFoundTable from '../../../../table/notFound'\r\nimport Loading from '../../../../layout/loading'\r\nimport RowItems from './RowItems'\r\nimport Total from './Total'\r\nimport SecondTotal from './SecondTotal'\r\nexport default class ListUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            token: Cookies.get('token'),\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        document.title = `${StaticData.Title} - گزارشات`\r\n    }\r\n    render() {\r\n        if (this.state.token === undefined) {\r\n            return <Redirect to='/Login' />\r\n        } else {\r\n            return (\r\n                <div className='main'>\r\n                    <div className='col-12 p-0'>\r\n                        <div className='row m-0'>\r\n                            <Sidebar handleState={(name, value) => this.setState({ [name]: value })} />\r\n                            <div className={`${this.state._close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'} dashboard`}>\r\n                                <Menu nameUrl={this.props.nameUrl}/>\r\n                                <div className='w-100 row m-0 main-box-dashboard'>\r\n                                    <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                                        <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                                            <Table token={this.state.token} getFunction={(e) => this.Search = e} url='tq' />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            header: {\r\n                firstHeader: [\r\n                    { name: 'Discipline', rowSpan: 2, colSpan: 1 },\r\n                    { name: 'All Docs', rowSpan: 2, colSpan: 1 },\r\n                    { name: 'Not Issue', rowSpan: 2, colSpan: 1 },\r\n                    { name: 'Issued Count', rowSpan: 2, colSpan: 1 },\r\n                    { name: 'FIS', rowSpan: 1, colSpan: 6, hasBorder: true },\r\n                    { name: 'IFI', rowSpan: 1, colSpan: 5, hasBorder: true },\r\n                    { name: 'IFA', rowSpan: 1, colSpan: 5, hasBorder: true },\r\n                    { name: 'AFC', rowSpan: 1, colSpan: 2, hasBorder: true },\r\n                ],\r\n                SecondHeader: [\r\n                    { name: 'FA' },\r\n                    { name: 'AFC' },\r\n                    // { name: 'AP' },\r\n                    { name: 'AWC' },\r\n                    { name: 'NO Com.' },\r\n                    { name: ' Commented' },\r\n                    { name: 'Not . R' },\r\n                    { name: 'No Com.' },\r\n                    { name: 'AWC' },\r\n                    { name: 'Commented' },\r\n                    { name: 'R' },\r\n                    { name: 'Not . R' },\r\n                    // { name: 'FA' },\r\n                    { name: 'AP' },\r\n                    { name: 'AWC' },\r\n                    { name: 'Commented ' },\r\n                    { name: 'R' },\r\n                    { name: 'Not . R' },\r\n                    { name: 'AFC' },\r\n                    { name: 'Not . R' },\r\n                ],\r\n            },\r\n            // listName: [\r\n            //     'Architectural', 'Civil', 'Electrical', 'HVAC', 'Instrument', 'Machinery', 'Mechanical',\r\n            //     'Piping', 'Project Management','Process', 'Safety', 'Structural', 'Technical Inspection', 'Telecommunication'\r\n            // ],\r\n            listName: [],\r\n            loading: 'table',\r\n            token: Cookies.get('token'),\r\n            data: {},\r\n            sum: {},\r\n            Sum2: {},\r\n            sum3: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.fetchData()\r\n    }\r\n    fetchData = async () => {\r\n        if (this.state.token) {\r\n            this.setState({ loading: 'table' })\r\n            await axios.get(`${StaticData.domainIp}/mdl/engineeringReport`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.state.token}`\r\n                }\r\n            })\r\n                .then(async (response) => {\r\n                    this.setState({ loading: '' })\r\n                    if (response.status === 200) {\r\n                        await this.setState({\r\n                            data: response.data.content.data,\r\n                            listName: Object.keys(response.data.content.data)\r\n                        })\r\n                        await this.handleSum()\r\n                        await this.secondSum()\r\n                    } else {\r\n\r\n                        Notification.notify(Message.text(response.status), 'error');\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.setState({ loading: '' })\r\n                    if (err.response) {\r\n                        Notification.notify(Message.text(err.response.status), 'error');\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    handleSum = () => {\r\n        let sum = this.state.sum\r\n        sum['sumArchitectural'] = Object.keys(this.state.data).map((_) => { return this.state.data[_].AllDocs }).reduce((a, b) => a + b, 0)\r\n        sum['sumNotIssued'] = Object.keys(this.state.data).map((_) => { return this.state.data[_].NotIssued }).reduce((a, b) => a + b, 0)\r\n        sum['sumIssuedCount'] = Object.keys(this.state.data).map((_) => { return this.state.data[_].IssuedCount }).reduce((a, b) => a + b, 0)\r\n\r\n        let ObjList = {\r\n            FIS: ['FA', 'AFC', 'AWC', 'NoComment', 'Commented', 'NoResponse'],\r\n            IFI: ['NoComment', 'AWC', 'Commented', 'Reject', 'NoResponse'],\r\n            IFA: ['AP', 'AWC', 'Commented', 'Reject', 'NoResponse'],\r\n            AFC: ['AFC', 'NoResponse']\r\n        }\r\n        Object.keys(ObjList).map((_data) => {\r\n            return (\r\n                ObjList[_data].forEach((data) => {\r\n                    sum[`sum${_data}${data}`] = Object.keys(this.state.data).map((item) => {\r\n                        return this.state.data[item][_data][data]\r\n                    })\r\n                        .reduce((a, b) => a + b, 0)\r\n                })\r\n            )\r\n        })\r\n        this.setState({ sum: sum })\r\n    }\r\n    secondSum = () => {\r\n        let ObjList = {\r\n            FIS: ['FA', 'AFC', 'AWC', 'NoComment', 'Commented', 'NoResponse'],\r\n            IFI: ['NoComment', 'AWC', 'Commented', 'Reject', 'NoResponse'],\r\n            IFA: ['AP', 'AWC', 'Commented', 'Reject', 'NoResponse'],\r\n            AFC: ['AFC', 'NoResponse']\r\n        }\r\n        let objSum = {\r\n            FIS: [],\r\n            IFI: [],\r\n            IFA: [],\r\n            AFC: []\r\n        }\r\n        Object.keys(ObjList).map((_data) => {\r\n            return (\r\n                ObjList[_data].forEach((data) => {\r\n                    if (data) {\r\n                        objSum[_data].push(this.state.sum[`sum${_data}${data}`])\r\n                    }\r\n                })\r\n            )\r\n        })\r\n        objSum.FIS = objSum.FIS.reduce((a, b) => a + b, 0)\r\n        objSum.IFI = objSum.IFI.reduce((a, b) => a + b, 0)\r\n        objSum.IFA = objSum.IFA.reduce((a, b) => a + b, 0)\r\n        objSum.AFC = objSum.AFC.reduce((a, b) => a + b, 0)\r\n        this.setState({ Sum2: objSum, sum3: objSum.FIS + objSum.IFI + objSum.IFA + objSum.AFC })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='table ltr w-100'>\r\n                <table>\r\n                    <thead>\r\n                        <tr className='header subfield'>\r\n                            {this.state.header.firstHeader.map((first, key1) =>\r\n                                <th className={`${first.hasBorder ? 'bottom' : ''} ${key1 === 0 || key1 === (this.state.header.firstHeader.length - 1) ? '' : 'hasBorder'}`} key={key1} rowSpan={first.rowSpan} colSpan={first.colSpan}>{first.name}</th>\r\n                            )}\r\n                        </tr>\r\n                        <tr className='header subfield'>\r\n                            {this.state.header.SecondHeader.map((second, key2) =>\r\n                                <th key={key2} className={key2 === 0 || key2 === (this.state.header.SecondHeader.length - 1) ? '' : 'hasBorder'}>{second.name}</th>\r\n                            )}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.loading === 'table' ?\r\n                            <tr className='loading'>\r\n                                <div className='main-loading'>\r\n                                    <div className='w-100 row m-0 justify-content-center'>\r\n                                        <Loading className='table row m-0 justify-content-center' />\r\n                                        <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                                    </div>\r\n                                </div>\r\n                            </tr>\r\n                            :\r\n                            Object.keys(this.state.data).length === 0 ?\r\n                                <NotFoundTable />\r\n                                :\r\n                                Object.keys(this.state.data).map((data, key) =>\r\n                                    <tr key={key}>\r\n                                        <RowItems data={this.state.data[data]} name={this.state.listName[key]} key={key} />\r\n                                    </tr>\r\n                                )}\r\n\r\n                        {this.state.loading === '' &&\r\n                            <React.Fragment>\r\n                                <Total sum={this.state.sum} />\r\n                                <SecondTotal sum={this.state.Sum2} />\r\n                                <tr className='subfield'>\r\n                                    <th className={`hasBorder __hasColor`} rowSpan={1} colSpan={18}>{this.state.sum3}</th>\r\n                                </tr>\r\n                            </React.Fragment>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div >\r\n        )\r\n    }\r\n}","E:\\bidboland\\src\\Project\\Engineering\\dcc\\DocumentControlCenter\\CreateMdl.js",[],"E:\\bidboland\\src\\Tools\\InternalPhonebook\\InternalPhonebook.js",[],"E:\\bidboland\\src\\Tools\\Calendar\\Calendar.js",[],"E:\\bidboland\\src\\Tools\\Chat\\Chat.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\FORM.js",[],"E:\\bidboland\\src\\tsrNew\\tsr.js",[],"E:\\bidboland\\src\\tsrNew\\index\\BaseIndex.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\dashboard.js",[],"E:\\bidboland\\src\\Chart\\Main.js",[],"E:\\bidboland\\src\\library\\CreatePublishers.js",[],"E:\\bidboland\\src\\Tools\\TaskManagement\\TaskManagement.js",["3091"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../staticData'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Sidebar from '../../layout/sidebar'\r\nimport SearchTable from '../../table/SearchTable'\r\nimport Menu from '../../layout/menu'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport SideTask from './SideTask'\r\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded'\r\nimport AssignmentIndRoundedIcon from '@material-ui/icons/AssignmentIndRounded'\r\nimport AssignmentReturnRoundedIcon from '@material-ui/icons/AssignmentReturnRounded'\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll'\r\nimport AllTasks from './AllTasks'\r\nexport default class TaskManagement extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      itemSide: [\r\n        {\r\n          name: 'تمام وظایف',\r\n          value: 'duties',\r\n          icon: () => <CheckCircleOutlineRoundedIcon />\r\n        },\r\n        {\r\n          name: 'وظایف من',\r\n          value: 'my_duties',\r\n          icon: () => <AssignmentIndRoundedIcon />\r\n        },\r\n        {\r\n          name: 'وظایف من',\r\n          value: 'Assigned_tasks',\r\n          icon: () => <AssignmentReturnRoundedIcon />\r\n        },\r\n        {\r\n          name: 'انجام شده ها',\r\n          value: 'doned',\r\n          icon: () => <DoneAllIcon />\r\n        }\r\n      ],\r\n      _select: 'duties'\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - مدیریت وظایف`\r\n  }\r\n  handleState = (name, value) => {\r\n    this.setState({ [name]: value })\r\n  }\r\n  handleShow = () => {\r\n    const { _select } = this.state\r\n    switch (_select) {\r\n      case 'duties':\r\n        return <AllTasks {...this} />\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole='email_management'\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            <div className='icon'>\r\n                              <a href='#'>\r\n                                <AddCircleIcon />\r\n                                <span>ایجاد کاربرگ</span>\r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='main-taskManagement'>\r\n                      <div className='row mx-0 w-100'>\r\n                        <SideTask {...this} />\r\n                        <div className='col'>\r\n                          <div className='main-content-taskManagement'>\r\n                            {this.handleShow()}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Tools\\E-mail\\Email.js",[],"E:\\bidboland\\src\\Print\\ARP\\form.js",["3092","3093","3094","3095"],"import React, { Component } from 'react'\r\nimport './print.css'\r\nimport Form_1 from './Form_1'\r\nimport Form_2 from './Form_2'\r\nimport Form_3 from './Form_3'\r\nimport Form_4 from './Form_4'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../staticData'\r\nimport axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport NotificationContainer from '../../notification/NotificationCotainer'\r\nimport logo from './img/bigi.jpg'\r\nimport moment from 'moment-jalaali'\r\nimport handleCheckText from '../../handleCheckText'\r\nexport default class PrintARP extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      reasonsAccident: [\r\n        [\r\n          {\r\n            value: 'کار بر روی تجهیز بدون قطع منبع انرژی',\r\n            label: 'کار بر روی تجهیز بدون قطع منبع انرژی'\r\n          },\r\n          {\r\n            value: 'عدم کارایی سیستم‌های ایمنی تجهیزات',\r\n            label: 'عدم کارایی سیستم‌های ایمنی تجهیزات'\r\n          },\r\n          {\r\n            value: 'عدم رعایت الزامات در دستورالعمل‌های بهره‌برداری',\r\n            label: 'عدم رعایت الزامات در دستورالعمل‌های بهره‌برداری'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'نقص در نحوه نگارش پروانه‌های کار',\r\n            label: 'نقص در نحوه نگارش پروانه‌های کار'\r\n          },\r\n          {\r\n            value: 'فقدان یا نامناسب بودن وسایل حفاظت فردی',\r\n            label: 'فقدان یا نامناسب بودن وسایل حفاظت فردی'\r\n          },\r\n          {\r\n            value: 'فقدان دستورالعمل کاری مناسب',\r\n            label: 'فقدان دستورالعمل کاری مناسب'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'راه اندازی تجهیز به شکل ناایمن',\r\n            label: 'راه اندازی تجهیز به شکل ناایمن'\r\n          },\r\n          {\r\n            value: 'عدم ایزوله کردن درست تجهیز',\r\n            label: 'عدم ایزوله کردن درست تجهیز'\r\n          },\r\n          {\r\n            value: 'عدم اجرای روش جاری در مدیریت تغییر',\r\n            label: 'عدم اجرای روش جاری در مدیریت تغییر'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'نقص در نحوه اجرای پروانه‌های کار',\r\n            label: 'نقص در نحوه اجرای پروانه‌های کار'\r\n          },\r\n          { value: 'نقص در ارتباطات پروسسی', label: 'نقص در ارتباطات پروسسی' },\r\n          { value: 'عدم اجرای مدیریت ریسک', label: 'عدم اجرای مدیریت ریسک' }\r\n        ],\r\n        [\r\n          {\r\n            value: 'کار برروی تجهیز بدون مجوز',\r\n            label: 'کار برروی تجهیز بدون مجوز'\r\n          },\r\n          {\r\n            value: 'استفاده نادرست و غیراصولی از تجهیزات(آموزش ناکافی)',\r\n            label: 'استفاده نادرست و غیراصولی از تجهیزات(آموزش ناکافی)'\r\n          },\r\n          {\r\n            value: 'فقدان یا ضعف برنامه تعمیر و نگهداری پیشگیرانه و بازرسی',\r\n            label: 'فقدان یا ضعف برنامه تعمیر و نگهداری پیشگیرانه و بازرسی'\r\n          }\r\n        ],\r\n        [\r\n          { value: 'نقشه‌های نامناسب', label: 'نقشه‌های نامناسب' },\r\n          {\r\n            value: 'نقص در طراحی (شناسایی پیش از حادثه)',\r\n            label: 'نقص در طراحی (شناسایی پیش از حادثه)'\r\n          },\r\n          {\r\n            value: 'نقص در طراحی (عدم شناسایی پیش از حادثه)',\r\n            label: 'نقص در طراحی (عدم شناسایی پیش از حادثه)'\r\n          }\r\n        ]\r\n      ],\r\n      level: 0\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.fetchData()\r\n  }\r\n  CheckPyvast = data => {\r\n    const check =\r\n      data.arp1_has_log_sheets === '1' || data.arp1_has_trend_attachment === '1'\r\n    return check ? 'دارد' : 'ندارد'\r\n  }\r\n  fetchData = async () => {\r\n    let url = window.location.href\r\n    let array = url.split('/')\r\n    if (url) {\r\n      const id = array[array.length - 1]\r\n      if (id) {\r\n        const address = `${StaticData.domainIp}/arp/get/${id}`\r\n        await axios\r\n          .get(address, {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          })\r\n          .then(async response => {\r\n            if (response.status === 200) {\r\n              const content = response.data.content\r\n                ? response.data.content[0]\r\n                : {}\r\n              let select =\r\n                parseInt(content.form) === 34 ? 4 : parseInt(content.form)\r\n              content['level'] = select\r\n              content['number'] = id\r\n              // data['peyvast'] = this.CheckPyvast(data)\r\n              this.setState(content)\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  handleDate = name => {\r\n    let date = this.state[name]\r\n    if (date) {\r\n      let hour = date.split(' ')[1]\r\n      let arrayHour = hour.split(':')\r\n      const resulthout = arrayHour ? ` ${arrayHour[0]}:${arrayHour[1]} ` : ''\r\n      const currentDate = resulthout + moment(date).format(' jYYYY/jMM/jDD ')\r\n\r\n      return currentDate\r\n    }\r\n    return '-'\r\n  }\r\n  handleCheckCorrective = () => {\r\n    const { corrective_actions } = this.state\r\n    let i = 0\r\n    let check = false\r\n    if (corrective_actions) {\r\n      while (i < corrective_actions.length) {\r\n        check =\r\n          handleCheckText(corrective_actions[i].status) &&\r\n          corrective_actions[i].responsible.length > 0\r\n        // &&\r\n        // handleCheckText(_corrective_actions[i].responsible)\r\n        if (!check) {\r\n          break\r\n        }\r\n        i++\r\n      }\r\n    }\r\n    return check\r\n  }\r\n  render () {\r\n    const { level, event_description, event_before_instructions } = this.state\r\n    return (\r\n      <div className='mainPDF'>\r\n        <NotificationContainer />\r\n        {level > 0 ? <Form_1 {...this} logo={logo} checkAuthor={true} /> : ''}\r\n        {level > 1 ? <Form_2 {...this} logo={logo} /> : ''}\r\n        {level > 2 ? (\r\n          <Form_3\r\n            {...this}\r\n            logo={logo}\r\n            checkAuthor={\r\n              handleCheckText(event_description) ||\r\n              handleCheckText(event_before_instructions)\r\n            }\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n        {level > 3 ? (\r\n          <Form_4\r\n            {...this}\r\n            logo={logo}\r\n            checkAuthor={this.handleCheckCorrective()}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\Edit.js",[],"E:\\bidboland\\src\\Print\\TSR\\form.js",["3096","3097"],"import React, { Component } from 'react'\r\nimport './tsr_print.css'\r\nimport NotificationContainer from '../../notification/NotificationCotainer'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../staticData'\r\nimport axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport Page1 from './page1'\r\nimport Page2 from './page2'\r\nimport Page3 from './page3'\r\nimport Page4 from './page4'\r\nimport Page5 from './page5'\r\nimport Page6 from './page6'\r\nimport Page7 from './page7'\r\nimport Page8 from './page8'\r\nimport Page9 from './page9'\r\nimport Page10 from './page10'\r\nimport Page11 from './page11'\r\nimport Page12 from './page12'\r\nimport moment from 'moment-jalaali'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport ListSign from '../../TSR/ListSign'\r\nexport default class FormTSR extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      improvement_type: [\r\n        [\r\n          {\r\n            value: 'تامین الزامات ایمنی تجهیزات و نیروی انسانی',\r\n            label: 'تامین الزامات ایمنی تجهیزات و نیروی انسانی'\r\n          },\r\n          {\r\n            value: 'رفع موانع جهت دستیابی به ظرفیت اسمی',\r\n            label: 'رفع موانع جهت دستیابی به ظرفیت اسمی'\r\n          },\r\n          {\r\n            value: 'جلوگیری از تولید محصول نامنطبق',\r\n            label: 'جلوگیری از تولید محصول نامنطبق'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'بهبود در راندمان فرایندهای تولیدی',\r\n            label: 'بهبود در راندمان فرایندهای تولیدی'\r\n          },\r\n          {\r\n            value: 'رفع موانع جهت دستیابی به ظرفیت برنامه ای',\r\n            label: 'رفع موانع جهت دستیابی به ظرفیت برنامه ای'\r\n          },\r\n          {\r\n            value: 'افزایش راندمان مصرف انرژی',\r\n            label: 'افزایش راندمان مصرف انرژی'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'جلوگیری از خرابی مکرر تجهیزات عملیاتی',\r\n            label: 'جلوگیری از خرابی مکرر تجهیزات عملیاتی'\r\n          },\r\n          {\r\n            value: 'بهبود در عملیات بهره برداری و تعمیرات',\r\n            label: 'بهبود در عملیات بهره برداری و تعمیرات'\r\n          },\r\n          {\r\n            value: 'کاهش و یا حذف عوامل زیان آور زیست محیطی',\r\n            label: 'کاهش و یا حذف عوامل زیان آور زیست محیطی'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'افزایش ظرفیت اسمی تولید',\r\n            label: 'افزایش ظرفیت اسمی تولید'\r\n          },\r\n          {\r\n            value: 'بهبود شرایط سلامت، محیط کار و ارگونومی',\r\n            label: 'بهبود شرایط سلامت، محیط کار و ارگونومی'\r\n          },\r\n          {\r\n            value: 'تولید گریدهای جدید',\r\n            label: 'تولید گریدهای جدید'\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            value: 'بهبود در پایش سرویس های مبادلاتی',\r\n            label: 'بهبود در پایش سرویس های مبادلاتی'\r\n          },\r\n          {\r\n            value: 'درخواست های خدماتی، اداری و غیر فرایندی',\r\n            label: 'درخواست های خدماتی، اداری و غیر فرایندی'\r\n          },\r\n          {\r\n            value: 'سایر موارد',\r\n            label: 'سایر موارد'\r\n          }\r\n        ]\r\n      ],\r\n      conditionsList: [\r\n        {\r\n          value:\r\n            'درخواست‌، ماهیت تعمیراتی دارد و بایستی درخواست کار تعمیراتی صادر گردد',\r\n          label:\r\n            'درخواست‌، ماهیت تعمیراتی دارد و بایستی درخواست کار تعمیراتی (W.O) صادر گردد'\r\n        },\r\n        {\r\n          value:\r\n            'درخواست، اجرای اصلاحات موقتی می‌باشد که نیازی به تغییر در اسناد فنی نمی‌باشد',\r\n          label:\r\n            'درخواست، اجرای اصلاحات موقتی می‌باشد که نیازی به تغییر در اسناد فنی نمی‌باشد'\r\n        },\r\n        {\r\n          value: 'درخواست، مربوط به خارج از محدوده تعریف شده مجتمع می‌باشد',\r\n          label: 'درخواست، مربوط به خارج از محدوده تعریف شده مجتمع می‌باشد'\r\n        },\r\n        {\r\n          value:\r\n            'درخواست، ماهیت پروژه‌ای دارد و بایستی در قالب درخواست پروژه صادر گردد',\r\n          label:\r\n            'درخواست، ماهیت پروژه‌ای دارد و بایستی در قالب درخواست پروژه (PRA) صادر گردد'\r\n        },\r\n        {\r\n          value:\r\n            'درخواست، اضطراری بوده و بایستی از طریق برگزاری جلسه فنی تصمیم گیری گردد',\r\n          label:\r\n            'درخواست، اضطراری بوده و بایستی از طریق برگزاری جلسه فنی تصمیم گیری گردد'\r\n        },\r\n        {\r\n          value:\r\n            'درخواست، اجرای اصلاحلات موقتی است و نیازمند تغییر در اسناد فنی می‌باشد.',\r\n          label:\r\n            'درخواست، با حوزه تخصصی اداره متقاضی (بند 1-6 روش اجرایی) تطابق ندارد'\r\n        },\r\n        {\r\n          value: 'سایر موارد',\r\n          label: 'سایر موارد'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.fetchData()\r\n  }\r\n  handnleArray = data => {\r\n    let result = []\r\n    const check = data === undefined\r\n    if (!check) {\r\n      result = Object.keys(data).map(item => {\r\n        return data[item]\r\n      })\r\n    }\r\n    return result\r\n  }\r\n  CoercionSign = (data, level) => {\r\n    let list = ListSign.ListMandatory\r\n    let i = 1\r\n    let numResult = level\r\n    let Not_Complete = false\r\n    while (i <= level) {\r\n      let tsr = list[`tsr${i}`]\r\n      if (tsr) {\r\n        let array = tsr.filter(_tsr => !_tsr.mandatory)\r\n        let arraySign = Object.keys(array).map(_value => {\r\n          return array[_value].state\r\n        })\r\n        const CheckFilter = arraySign.filter(\r\n          _sign => data[`tsr${i}_${_sign}`] !== '1'\r\n        )\r\n        Not_Complete = CheckFilter.length > 0\r\n        if (Not_Complete) {\r\n          const SecondCounter = this.CheckResult(data, level)\r\n\r\n          this.setState({\r\n            hasNot: true,\r\n            numResult: i === SecondCounter ? i : SecondCounter\r\n          })\r\n          numResult = i === SecondCounter ? i : SecondCounter\r\n          break\r\n        }\r\n      }\r\n      i++\r\n    }\r\n    return numResult\r\n  }\r\n  CheckResult = (data, level) => {\r\n    let number = level\r\n    let _tsr3 = {\r\n      check: data['tsr3_review_result'] !== '0' || !data['tsr3_review_result'],\r\n      num: 3\r\n    }\r\n    let _tsr4 = {\r\n      check: data['tsr4_hse_review'] !== '0' || !data['tsr4_hse_review'],\r\n      num: 4\r\n    }\r\n    let _tsr5 = {\r\n      check: data['tsr5_review_result'] !== '0' || !data['tsr5_review_result'],\r\n      num: 5\r\n    }\r\n    let _tsr6 = {\r\n      check:\r\n        data['tsr6_technical_review'] !== '0' || !data['tsr6_technical_review'],\r\n      num: 6\r\n    }\r\n    let _tsr10 = {\r\n      check:\r\n        data['tsr10_review_result'] !== '0' || !data['tsr10_review_result'],\r\n      num: 10\r\n    }\r\n    if (!_tsr3.check) number = _tsr3.num\r\n    else if (!_tsr4.check) number = _tsr4.num\r\n    else if (!_tsr5.check) number = _tsr5.num\r\n    else if (!_tsr6.check) number = _tsr6.num\r\n    else if (!_tsr10.check) number = _tsr10.num\r\n    return number\r\n  }\r\n  fetchData = async () => {\r\n    let url = window.location.href\r\n    let array = url.split('/')\r\n    if (url) {\r\n      const id = array[array.length - 1]\r\n      if (id) {\r\n        const address = `${StaticData.domainIp}/tsr/get/${id}`\r\n        await axios\r\n          .get(address, {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          })\r\n          .then(async response => {\r\n            if (response.status === 200) {\r\n              const content = response.data.content\r\n              const status = content.status\r\n              const data = content.data\r\n              let select\r\n              if (status) {\r\n                select = parseInt(status.page.split('tsr')[1])\r\n                // requestEdit = true\r\n              } else {\r\n                select = 12\r\n                // requestEdit = false\r\n              }\r\n              \r\n              data['level'] = this.CoercionSign(data, select)\r\n              data['number'] = id\r\n              //   data['peyvast'] = this.CheckPyvast(data)\r\n              this.setState(data)\r\n              \r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  handleDate = name => {\r\n    let date = this.state[name]\r\n    let convert\r\n    // let hour\r\n    if (date && date !== 'null') {\r\n      let array = date.split(' ')\r\n      if (array) {\r\n        let _date = array[0]\r\n        // hour = array[1]\r\n        const checkDate = moment(_date, 'YYYY-MM-DD').local('fa')._isValid\r\n        convert = checkDate\r\n          ? moment(_date, 'YYYY-MM-DD')\r\n              .local('fa')\r\n              .format('jYYYY/jMM/jDD')\r\n          : moment(_date, 'jYYYY/jMM/jDD')\r\n              .local('fa')\r\n              .format('jYYYY/jMM/jDD')\r\n      }\r\n    }\r\n    return convert && convert !== 'Invalid date' ? ` ${convert} ` : '-'\r\n  }\r\n  handleChekboxSelected = (data, text) => {\r\n    let array = text ? text.split(',') : []\r\n    const check = array.includes(data.value)\r\n    return check\r\n  }\r\n  DocumentaArray = (foreign, internal) => {\r\n    const _foreign = foreign ? this.handleCheckEmptyForeign(foreign) : [],\r\n      _internal = internal ? this.handleCheckEmptyInternal(internal) : []\r\n    const merge = _foreign.concat(_internal)\r\n    return merge\r\n  }\r\n  handleCheckEmptyForeign = foreign => {\r\n    let list = Object.keys(foreign).map(value => {\r\n      foreign[value]['Attachement'] = foreign[value]['Attachement']\r\n        ? Object.keys(foreign[value]['Attachement']).map(att => {\r\n            return foreign[value]['Attachement'][att]\r\n          })\r\n        : []\r\n      return foreign[value]\r\n    })\r\n    list = list.filter(\r\n      data =>\r\n        handleCheckText(data.documentNumber) ||\r\n        handleCheckText(data.degreeTitle) ||\r\n        handleCheckText(data.numberPages) ||\r\n        handleCheckText(data.descriptionAttachment) ||\r\n        data.Attachement.length > 0\r\n    )\r\n    return list\r\n  }\r\n  handleCheckEmptyInternal = internal => {\r\n    let list = Object.keys(internal).map(value => {\r\n      return internal[value]\r\n    })\r\n    list = list.filter(\r\n      data =>\r\n        handleCheckText(data.documentNumber) ||\r\n        handleCheckText(data.degreeTitle) ||\r\n        handleCheckText(data.numberPages) ||\r\n        handleCheckText(data.descriptionAttachment)\r\n    )\r\n    return list\r\n  }\r\n  DocumnentShow = data => {\r\n    const array = []\r\n    const { degreeTitle, Attachement, AttachementName } = data\r\n    array.push(\r\n      Attachement && Attachement.length > 0 ? (\r\n        Attachement.map((link, counterLink) => (\r\n          <a\r\n            href={link}\r\n            target='_blank'\r\n            rel='noreferrer0'\r\n            className='link-document'\r\n          >\r\n            {degreeTitle\r\n              ? degreeTitle\r\n              : AttachementName[counterLink]\r\n              ? AttachementName[counterLink]\r\n              : link}\r\n          </a>\r\n        ))\r\n      ) : (\r\n        <span className='value'>{degreeTitle}</span>\r\n      )\r\n    )\r\n    return array\r\n  }\r\n  handleInstructionsOrder = () => {\r\n    let list = [\r\n      { name: 'مکانیک', value: 'mechanical' },\r\n      { name: 'برق', value: 'electrical' },\r\n      { name: 'ابزار دقیق', value: 'Instrumentation' },\r\n      { name: 'ساختمان', value: 'building' }\r\n    ]\r\n    let state = this.state\r\n    let ArrayFinal = []\r\n    list.forEach(item => {\r\n      let eng_instruction = state[`tsr7_${item.value}_eng_instruction`]\r\n      eng_instruction = eng_instruction\r\n        ? Object.keys(eng_instruction).map(__ => {\r\n            return eng_instruction[__]\r\n          })\r\n        : []\r\n      ArrayFinal.push({\r\n        name: item.name,\r\n        list: eng_instruction.filter(_item =>\r\n          handleCheckText(_item.description)\r\n        )\r\n      })\r\n    })\r\n    return ArrayFinal\r\n  }\r\n  CheckRejectConf = () => {\r\n    const {\r\n      tsr1_unit_boss_verify,\r\n      tsr1_office_boss_verify,\r\n      tsr1_verified\r\n    } = this.state\r\n    const check =\r\n      tsr1_unit_boss_verify === '1' &&\r\n      tsr1_office_boss_verify === '1' &&\r\n      tsr1_verified === '1'\r\n    return check\r\n  }\r\n  handleConvert = name => {\r\n    let object = this.state[name]\r\n    let array = []\r\n    if (object) {\r\n      array = Object.keys(object).map(value => {\r\n        return object[value]\r\n      })\r\n    }\r\n    return array\r\n  }\r\n  handleClassName = str => {\r\n    let p = /^[\\u0600-\\u06FF\\s]+$/\r\n    const check = str ? p.test(str) : false\r\n    let className = check ? 'text-right' : 'text-left'\r\n    return className\r\n  }\r\n  render () {\r\n    const { level } = this.state\r\n    return (\r\n      <div className='mainPDF'>\r\n        <NotificationContainer />\r\n        <Page1 {...this} />\r\n        {level > 1 && this.CheckRejectConf() ? <Page2 {...this} /> : ''}\r\n        {level > 2 && this.CheckRejectConf() ? <Page3 {...this} /> : ''}\r\n        {level > 3 && this.CheckRejectConf() ? <Page4 {...this} /> : ''}\r\n        {level > 4 && this.CheckRejectConf() ? <Page5 {...this} /> : ''}\r\n        {level > 5 && this.CheckRejectConf() ? <Page6 {...this} /> : ''}\r\n        {level > 6 && this.CheckRejectConf() ? <Page7 {...this} /> : ''}\r\n        {level > 7 && this.CheckRejectConf() ? <Page8 {...this} /> : ''}\r\n        {level > 8 && this.CheckRejectConf() ? <Page9 {...this} /> : ''}\r\n        {level > 9 && this.CheckRejectConf() ? <Page10 {...this} /> : ''}\r\n        {level > 10 && this.CheckRejectConf() ? <Page11 {...this} /> : ''}\r\n        {level > 11 && this.CheckRejectConf() ? <Page12 {...this} /> : ''}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\createUser\\EditUserGroup\\index.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\index.js",[],"E:\\bidboland\\src\\library\\IndexPublishers.js",[],"E:\\bidboland\\src\\tsrNew\\report\\index.js",[],"E:\\bidboland\\src\\library\\CreateWriters.js",[],"E:\\bidboland\\src\\library\\IndexWriters.js",[],"E:\\bidboland\\src\\table\\SearchTable.js",["3098"],"import React, { useEffect } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport handleCheckText from '../handleCheckText'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport handleString from '../handleString'\r\nimport CheckPersianText from '../CheckPersianText'\r\nfunction SearchTable(props) {\r\n  useEffect(() => {\r\n    document.onkeyup = e => handleClick(e)\r\n  }, [props])\r\n  function handleClick(e) {\r\n    const checkVaue = handleCheckText(props.state.search)\r\n    if (checkVaue) {\r\n      if (e.keyCode === 13) {\r\n        Submit()\r\n      } else if (e.keyCode === 27) {\r\n        props.handleState('search', '')\r\n        props.FilterReset()\r\n        props.Search(props.state.search)\r\n      }\r\n    }\r\n  }\r\n  function handleChange(e) {\r\n    props.handleState('search', handleString(e.target.value))\r\n  }\r\n  function Submit() {\r\n    if (props.Search) {\r\n      const { search, nameTab } = props.state\r\n      // const handleCheckText = HandleCheckText.handleCheckText\r\n      if (handleCheckText(search) && props.Search) {\r\n        props.Search(search, nameTab)\r\n      }\r\n    }\r\n  }\r\n  async function handleReset() {\r\n    await props.handleState('search', '')\r\n    await props.Search('')\r\n  }\r\n  return (\r\n    <div className='col-xl-6 col-lg-6 col-md-4 col-12 p-0 d-flex justify-content-end'>\r\n      <div className='search-index col-xl-6 col-lg-8 col-md-10 col-11'>\r\n        <SearchIcon onClick={() => Submit()} />\r\n        <input\r\n          className={`text-right ${CheckPersianText(props.state.search) ? 'rtl' : 'ltr'}`}\r\n          placeholder='(Ent)...جستجو'\r\n          value={handleString(props.state.search)}\r\n          onChange={handleChange}\r\n        />\r\n        <CloseRoundedIcon className='reset-search' onClick={handleReset} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SearchTable\r\n","E:\\bidboland\\src\\index-builder\\AdvanceSearchDate.js",[],"E:\\bidboland\\src\\notification\\Message.js",[],"E:\\bidboland\\src\\notification\\notification.js",[],"E:\\bidboland\\src\\handleString.js",[],"E:\\bidboland\\src\\index-builder\\TableDynamicIndex.js",["3099"],"import React, { Component } from 'react'\r\nimport Loading from '../layout/loading'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Row from '../table/Row'\r\n// import OutputFilter from '../table/OutputFilter'\r\nimport Permision from '../permision/permision'\r\nimport StaticData from '../staticData'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport Cookies from 'js-cookie'\r\n// import { Link } from 'react-router-dom'\r\n// import VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport handleString from '../handleString'\r\nexport default class TableNotification extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      headerTagName: [],\r\n      header: [],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      search: '',\r\n      loading: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      role: null,\r\n      table_id: '',\r\n      advandeText: '',\r\n      legends: {},\r\n      page_title: ''\r\n    }\r\n  }\r\n  async componentDidMount () {\r\n    await this.props.getReset(this.Reset)\r\n    await this.props.FilterReset(this.RemoveFilter)\r\n    await this.props.GetFunction(this.handleSearch)\r\n    // await this.props.getFetch(this.fetchData)\r\n    await document.addEventListener('mousedown', this.handleClickOutside)\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    await this.setState({ table_id: id })\r\n    await this.props.handleAdvande(this.handleAdvande)\r\n    await this.props.getFetch(this.fetchData)\r\n    await this.fetchData()\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  async componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n    }\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/dynamicIndex/getDetail/${this.state.table_id}/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                columns: response.data.content.columns\r\n                  ? response.data.content.columns\r\n                  : this.state.columns\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null, advande = null) => {\r\n    if (this.state.token) {\r\n      await this.setState({ loading: 'table' })\r\n      const baseUrl = await `${StaticData.domainIp}/dynamicIndex/getDetail/${this.state.table_id}/Page/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      let url = await ''\r\n      if (text !== null && advande !== null) {\r\n        url = await `${baseUrl}&${text}&${advande}`\r\n      } else if (text === null && advande === null) {\r\n        url = await baseUrl\r\n      } else if (text !== null) {\r\n        url = await `${baseUrl}&${text}`\r\n      } else if (advande !== null) {\r\n        url = await `${baseUrl}&${advande}`\r\n      }\r\n      await this.setState({ loading: 'table', search: '' })\r\n      await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          if (response.data.content.page_title) {\r\n            document.title = `${StaticData.Title} - ${response.data.content.page_title}`\r\n          }\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            let first = [{ name: 'id', value: 'id' }]\r\n            let firstTagName = [{ name: '', value: '' }]\r\n            let second = Object.keys(response.data.content.column_info).map(\r\n              data => {\r\n                let obj = {}\r\n                obj['name'] = response.data.content.column_info[data].title\r\n                obj['value'] = data\r\n                return obj\r\n              }\r\n            )\r\n            let secondTagName = Object.keys(\r\n              response.data.content.column_info\r\n            ).map(data => {\r\n              let obj = {}\r\n              obj['name'] = response.data.content.column_info[data].tagName\r\n              obj['value'] = data\r\n              return obj\r\n            })\r\n            let third = [\r\n              { name: 'created_at', value: 'created_at' },\r\n              { name: 'updated_at', value: 'updated_at' }\r\n            ]\r\n            let thirdTagName = [\r\n              { name: '', value: '' },\r\n              { name: '', value: '' }\r\n            ]\r\n            let mergeTagName = firstTagName.concat(secondTagName)\r\n            mergeTagName = mergeTagName.concat(thirdTagName)\r\n            let merge = first.concat(second)\r\n            merge = merge.concat(third)\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              role: response.data.role,\r\n              header: merge,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns,\r\n              headerTagName: mergeTagName,\r\n              legends: response.data.content.legends\r\n            })\r\n            await this.props.getHeader(merge)\r\n            await this.props.loadCehck()\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '' && this.state.advandeText === '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else if (this.state.advandeText !== '' && this.state.textSearch === '') {\r\n      await this.fetchData(null, this.state.advandeText)\r\n    } else if (this.state.advandeText === '' && this.state.textSearch === '') {\r\n      await this.fetchData(\r\n        `searchByFields=${this.state.textSearch}`,\r\n        this.state.advandeText\r\n      )\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (\r\n            this.state.textSearch !== '' &&\r\n            this.state.advandeText === ''\r\n          ) {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else if (\r\n            this.state.advandeText !== '' &&\r\n            this.state.textSearch === ''\r\n          ) {\r\n            await this.fetchData(null, this.state.advandeText)\r\n          } else if (\r\n            this.state.advandeText === '' &&\r\n            this.state.textSearch === ''\r\n          ) {\r\n            await this.fetchData(\r\n              `searchByFields=${this.state.textSearch}`,\r\n              this.state.advandeText\r\n            )\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (\r\n            this.state.textSearch !== '' &&\r\n            this.state.advandeText === ''\r\n          ) {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else if (\r\n            this.state.advandeText !== '' &&\r\n            this.state.textSearch === ''\r\n          ) {\r\n            await this.fetchData(null, this.state.advandeText)\r\n          } else if (\r\n            this.state.advandeText === '' &&\r\n            this.state.textSearch === ''\r\n          ) {\r\n            await this.fetchData(\r\n              `searchByFields=${this.state.textSearch}`,\r\n              this.state.advandeText\r\n            )\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        if (this.state.advandeText !== '') {\r\n          this.fetchData(\r\n            `searchByFields=${this.state.textSearch}`,\r\n            this.state.advandeText\r\n          )\r\n        } else {\r\n          this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n        }\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  handleAdvande = (startDate, endDate) => {\r\n    if (startDate && endDate) {\r\n      // this.props.handleState('loading', 'submit')\r\n      startDate = getCustomFormat(startDate, false)\r\n      endDate = getCustomFormat(endDate, false)\r\n      this.props.handleState('startDate', startDate)\r\n      this.props.handleState('endDate', endDate)\r\n      this.props.handleState('openSearch', false)\r\n      let textUrl = `fromDate=${startDate}&toDate=${endDate}`\r\n      this.setState({ advandeText: textUrl })\r\n      if (this.state.textSearch !== '') {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`, textUrl)\r\n      } else {\r\n        this.fetchData(null, textUrl)\r\n      }\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table w-100 ltr'>\r\n          <div className='main-legends row'>\r\n            {this.state.legends.history_type && (\r\n              <div className={`legends`}>\r\n                <label className='m-0'>History Type :</label>\r\n                <span>{this.state.legends.history_type}</span>\r\n              </div>\r\n            )}\r\n            {this.state.legends.historical_point_list && (\r\n              <div className={`legends`}>\r\n                <label className='m-0'>Historical point list :</label>\r\n                <span>{this.state.legends.historical_point_list}</span>\r\n              </div>\r\n            )}\r\n            {this.state.legends.number_of_points && (\r\n              <div className={`legends`}>\r\n                <label className='m-0'>Number of points :</label>\r\n                <span>{this.state.legends.number_of_points}</span>\r\n              </div>\r\n            )}\r\n            {/* {this.state.legends.number_of_samples &&\r\n                            <div className={`legends`}>\r\n                                <label className='m-0'>Number of samples :</label>\r\n                                <span>{this.state.legends.number_of_samples}</span>\r\n                            </div>\r\n                        } */}\r\n          </div>\r\n          <table>\r\n            <thead className='w-100'>\r\n              <tr className='header dynamic'>\r\n                {this.state.headerTagName.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(\r\n                      this.state.header[index].name\r\n                    )}`}\r\n                    // onClick={() => this._handleClick(index, data)}\r\n                    // ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    {/* <div className='filter d-inline-block'>\r\n                                            <img src='img/Sort_Icon.svg' alt='filter' />\r\n                                        </div> */}\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable className='mt-5' />\r\n              ) : (\r\n                this.state.row.map((data, index) => (\r\n                  <tr\r\n                    className={this.state._active === index ? '_active' : ''}\r\n                    key={index}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={index}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              {/* <div className='link-footer'>\r\n                                <a\r\n                                    // href={OutputFilter.handleFilter(\r\n                                    //     this.state.textSearch,\r\n                                    //     this.state.search,\r\n                                    //     `${StaticData.domainIp}/correspondence/exportExcel`)}\r\n                                    target='_blank'\r\n                                    rel='noreferrer'\r\n                                    className='xls'>\r\n                                    <img src='/img/XLS.svg' alt='xls' />\r\n                                    خروجی اکسل\r\n                                </a>\r\n                                <a\r\n                                    // href={OutputFilter.handleFilter(\r\n                                    //     this.state.textSearch,\r\n                                    //     this.state.search,\r\n                                    //     `${StaticData.domainIp}/correspondence/exportPdf`)}\r\n                                    target='_blank'\r\n                                    rel='noreferrer'\r\n                                    className='pdf'>\r\n                                    <img src='/img/PDF.svg' alt='PDF' />\r\n                                    خروجی pdf\r\n                                </a>\r\n                            </div> */}\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\index-builder\\RowDrag.js",[],"E:\\bidboland\\src\\notification\\tableNotification.js",[],"E:\\bidboland\\src\\index-builder\\ColumnDefinition.js",[],"E:\\bidboland\\src\\index-builder\\PositioningExcel.js",[],"E:\\bidboland\\src\\index-builder\\basicData.js",[],"E:\\bidboland\\src\\Tools\\InternalPhonebook\\TablePhonebook.js",[],"E:\\bidboland\\src\\Customization\\customization.js",[],"E:\\bidboland\\src\\handleCheckText.js",[],"E:\\bidboland\\src\\Tools\\Calendar\\days.js",[],"E:\\bidboland\\src\\permision\\permision.js",[],"E:\\bidboland\\src\\layout\\sidebar.js",[],"E:\\bidboland\\src\\Customization\\UploadInformation.js",["3100","3101"],"import React, { useState } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport GetAppRoundedIcon from '@material-ui/icons/GetAppRounded'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport PublishRoundedIcon from '@material-ui/icons/PublishRounded'\r\nimport { ExcelRenderer } from 'react-excel-renderer'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport Cookies from 'js-cookie'\r\nimport handleString from '../handleString'\r\n// import moment from 'moment'\r\nfunction UploadInformation(props) {\r\n  const [upload, setUpload] = useState(false)\r\n  const [total, setTotal] = useState(0)\r\n  const [counter, setCounter] = useState(0)\r\n\r\n  const ExcelDateToJSDate = date => {\r\n    let converted_date = new Date(Math.round((date - 25569) * 864e5))\r\n    converted_date = String(converted_date).slice(4, 15)\r\n    date = converted_date.split(' ')\r\n    let day = date[1]\r\n    let month = date[0]\r\n    month = 'JanFebMarAprMayJunJulAugSepOctNovDec'.indexOf(month) / 3 + 1\r\n    if (month.toString().length <= 1) month = '0' + month\r\n    let year = date[2]\r\n    return String(day + '-' + month + '-' + year)\r\n  }\r\n\r\n  async function handleImport(event) {\r\n    if (props.linkUpload) {\r\n      await props.handleState('loading', 'excelFile')\r\n      const token = await Cookies.get('token')\r\n      let fileObj = await event.target.files[0]\r\n      await ExcelRenderer(fileObj, async (err, resp) => {\r\n        if (err) {\r\n          await props.handleState('loading', '')\r\n        } else {\r\n          await props.handleState('loading', '')\r\n          setUpload(true)\r\n          let header = resp.rows[0]\r\n          let array = resp.rows.filter(\r\n            (data, key) => data.length === header.length && key > 0\r\n          )\r\n          let length = array.length\r\n          setTotal(length)\r\n          let i = 0\r\n          async function myLoop() {\r\n            setTimeout(async () => {\r\n              let data = array[i]\r\n              if (data) {\r\n                let datareg = await new FormData()\r\n                let obj = {}\r\n                await data.map(async (item, key) => {\r\n                  const exp =\r\n                    header[key] === 'id' ||\r\n                    header[key] === 'created_at' ||\r\n                    header[key] === 'updated_at' ||\r\n                    header[key] === 'Row'\r\n                  if (!exp) {\r\n                    let column = header[key],\r\n                      value = item\r\n                    if (\r\n                      column.includes('Date') ||\r\n                      column.includes('date') ||\r\n                      column.includes('EED') ||\r\n                      column.includes('INS_INS_COR')\r\n                    ) {\r\n                      if (value && value !== '-') {\r\n                        let convert = ExcelDateToJSDate(parseInt(value))\r\n                        let current = convert.replace(/-/g, '/')\r\n                        obj[column] = await current\r\n                        await datareg.append(column.trim(), current)\r\n                      } else {\r\n                        await datareg.append(column.trim(), '-')\r\n                        obj[column.trim()] = '-'\r\n                      }\r\n                    } else if (column.trim() === 'year') {\r\n                      let check = value\r\n                        ? value.toString().includes('(R')\r\n                        : false\r\n                      const delimiter = '(R'\r\n                      let current\r\n                      if (check) {\r\n                        current = value.split(delimiter)\r\n                        current = current ? current[0] : '-'\r\n                        current = current.trim()\r\n                      } else {\r\n                        let convert = ExcelDateToJSDate(parseInt(value))\r\n                        current = convert.replace(/-/g, '/')\r\n                      }\r\n                      obj[column] = await current\r\n                      await datareg.append(column.trim(), current)\r\n                    } else {\r\n                      obj[column.trim()] = handleString(`${value}`)\r\n                      await datareg.append(column.trim(), handleString(`${value}`))\r\n                    }\r\n                  }\r\n                })\r\n                const _url = `${StaticData.domainIp}/${props.linkUpload}`\r\n                await axios({\r\n                  method: 'post',\r\n                  url: _url,\r\n                  data: datareg,\r\n                  headers: {\r\n                    Authorization: token ? `Bearer ${token}` : null\r\n                  }\r\n                })\r\n                  .then(async response => {\r\n                    await console.log(response, obj, i)\r\n                    await props.handleState({ loading: '' })\r\n                    if (response.status === 200) {\r\n                    } else {\r\n                      console.err(response)\r\n                      console.err(obj, i)\r\n                      Notification.notify(\r\n                        Message.text(response.status),\r\n                        'error'\r\n                      )\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    if (err.response) {\r\n                      Notification.notify(\r\n                        Message.text(err.response.status),\r\n                        'error'\r\n                      )\r\n                    }\r\n                  })\r\n                i = (await i) + 1\r\n              }\r\n              await setCounter(i)\r\n              if (i === length) {\r\n                await setUpload(false)\r\n                if (props.RemoveFilter) {\r\n                  await props.RemoveFilter()\r\n                }\r\n                await props.handleState('upload', false)\r\n              }\r\n              if (i < length) {\r\n                await myLoop()\r\n              }\r\n            }, 1)\r\n          }\r\n          await myLoop()\r\n        }\r\n      })\r\n    }\r\n  }\r\n  function ShowPercentage() {\r\n    let result = (counter * 100) / total\r\n    result = result.toFixed(2)\r\n    return {\r\n      percenteage: result,\r\n      numberOf: counter\r\n    }\r\n  }\r\n  return (\r\n    <div className='backGroundPopup'>\r\n      <div className='col-xl-4 col-lg-5 col-md-8 col-12'>\r\n        <div className='box-wellcome'>\r\n          <div className='title-wellcome'>\r\n            <span className='col p-0'>آپلود جمعی اطلاعات</span>\r\n            <CloseIcon onClick={() => props.handleState('upload', false)} />\r\n          </div>\r\n          <div className='main-upload-info'>\r\n            <div className='upload-info-item'>\r\n              <div className='upload-info-item-label'>\r\n                <label>دانلود قالب نمونه</label>\r\n              </div>\r\n              <div className='row mr-0 ml-0 mt-3'>\r\n                <div className='col-xl-6 col-lg-6 col-md-6 col-12 pr-1 pl-1'>\r\n                  <a\r\n                    href='#'\r\n                    className='btn-upload-info template'\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                  >\r\n                    <GetAppRoundedIcon />\r\n                    دانلود قالب اکسل\r\n                  </a>\r\n                </div>\r\n                <div className='col-xl-6 col-lg-6 col-md-6 col-12 pr-1 pl-1'>\r\n                  <a\r\n                    href='#'\r\n                    className='btn-upload-info sample'\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                  >\r\n                    <GetAppRoundedIcon />\r\n                    دانلود اکسل نمونه\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='upload-info-item'>\r\n              <div className='upload-info-item-label'>\r\n                <label>آپلود اطلاعات</label>\r\n              </div>\r\n              <div className='row mr-0 ml-0 mt-3'>\r\n                <div className='col-12 pr-1 pl-1 mb-1'>\r\n                  <input\r\n                    className='d-none'\r\n                    type='file'\r\n                    id='excel'\r\n                    accept='.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel'\r\n                    onChange={e =>\r\n                      props.handleUpload\r\n                        ? props.handleUpload(e, 'excelFile', 'excelFileName')\r\n                        : handleImport(e)\r\n                    }\r\n                  />\r\n                  <label\r\n                    htmlFor={upload ? '' : `excel`}\r\n                    className={`btn-upload-info excel ${upload ? 'ltr' : ''}`}\r\n                  >\r\n                    {upload ? (\r\n                      <React.Fragment>\r\n                        <span className='show-percentage'>\r\n                          {`${ShowPercentage().numberOf} / ${total}`}\r\n                        </span>\r\n                        <span\r\n                          className='width-loaded ltr'\r\n                          style={{ width: `${ShowPercentage().percenteage}%` }}\r\n                        ></span>\r\n                      </React.Fragment>\r\n                    ) : (\r\n                      <React.Fragment>\r\n                        {props.state.loading === 'excelFile' ? (\r\n                          <React.Fragment>\r\n                            <Loading className='form-loader' />\r\n                            در حال بارگذاری فایل\r\n                          </React.Fragment>\r\n                        ) : (\r\n                          <React.Fragment>\r\n                            <PublishRoundedIcon />\r\n                            آپلود فایل اکسل\r\n                          </React.Fragment>\r\n                        )}\r\n                      </React.Fragment>\r\n                    )}\r\n                  </label>\r\n                </div>\r\n                <div className='col-12 pr-1 pl-1 mt-1'>\r\n                  <input\r\n                    className='d-none'\r\n                    type='file'\r\n                    id='attachment'\r\n                    accept='*'\r\n                    onChange={e =>\r\n                      props.handleUpload\r\n                        ? props.handleUpload(\r\n                          e,\r\n                          'attachmentFile',\r\n                          'attachmentFileName'\r\n                        )\r\n                        : ''\r\n                    }\r\n                  />\r\n                  <label\r\n                    htmlFor='attachment'\r\n                    className='btn-upload-info attachment'\r\n                  >\r\n                    <PublishRoundedIcon />\r\n                    آپلود مدارک پیوست\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className='col-12 pr-1 pl-1 mt-1'>\r\n                <div className='upload-info-item-note'>\r\n                  <p className='m-0'>\r\n                    در صورتی که فایل اکسل شما با فایل قالب مطابقت نداشته باشد با\r\n                    خطا مواجه خواهید شد\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='submit-upload mt-4 row mr-0 ml-0'>\r\n              <div className='col-xl-9 col-lg-8 col-md-8 col-7 pr-0 pl-1'>\r\n                <button\r\n                  className='accept cursor'\r\n                  onClick={() =>\r\n                    props.submitUpload ? props.submitUpload('excelFile') : ''\r\n                  }\r\n                  disabled={props.state.disabled}\r\n                >\r\n                  {props.state.loading === 'submit' ? (\r\n                    <Loading className='form-loader' />\r\n                  ) : (\r\n                    <DoneIcon className='ml-1' />\r\n                  )}\r\n                  ثبت اطلاعات\r\n                </button>\r\n              </div>\r\n              <div className='col-xl-3 col-lg-4 col-md-4 col-5 pr-1 pl-0'>\r\n                <button\r\n                  className='closeButton cursor'\r\n                  onClick={() => props.handleState('upload', false)}\r\n                >\r\n                  بستن\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default UploadInformation\r\n","E:\\bidboland\\src\\layout\\menu.js",[],"E:\\bidboland\\src\\layout\\loading.js",[],"E:\\bidboland\\src\\layout\\popupConfirm.js",[],"E:\\bidboland\\src\\getCustomFormat.js",[],"E:\\bidboland\\src\\layout\\firstLoading.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\TSR11.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\TSR12.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\TSR10.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\TSR8.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\TSR9.js",[],"E:\\bidboland\\src\\tsrNew\\tabs.js",[],"E:\\bidboland\\src\\tsrNew\\ListSign.js",["3102"],"class ListSign {\r\n  static ListMandatory = {\r\n    tsr1: [\r\n      {\r\n        name: 'درخواست کننده',\r\n        firstName: 'author_firstName',\r\n        lastName: 'author_lastName',\r\n        notShowDefault: true,\r\n        not_have_check: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'unit_boss',\r\n        select: 'unit_boss_select',\r\n        itemReject: [\r\n          { name: 'رد', value: 'reject' },\r\n          { name: 'اصلاحیه', value: 'comment' }\r\n        ],\r\n        permission: 'unit_boss_verify_allow',\r\n        state: 'unit_boss_verify',\r\n        message: 'unit_boss_verify_msg',\r\n        url: 'tsr1Sign/unit_boss',\r\n        firstName: 'unit_boss_verify_firstName',\r\n        lastName: 'unit_boss_verify_lastName'\r\n        // hold: 'verified'\r\n      },\r\n      {\r\n        name: 'رئیس اداره/امور',\r\n        value: 'office_boss',\r\n        select: 'office_boss_select',\r\n        itemReject: [\r\n          { name: 'رد', value: 'reject' },\r\n          { name: 'اصلاحیه', value: 'comment' }\r\n        ],\r\n        permission: 'office_boss_verify_allow',\r\n        state: 'office_boss_verify',\r\n        message: 'office_boss_verify_msg',\r\n        url: 'tsr1Sign/office_boss',\r\n        hold: 'unit_boss_verify',\r\n        firstName: 'office_boss_verify_firstName',\r\n        lastName: 'office_boss_verify_lastName'\r\n      },\r\n      {\r\n        name: 'مدیر خدمات فنی',\r\n        value: 'verified',\r\n        select: 'select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        // permission: 'verified_allow',\r\n        state: 'verified',\r\n        message: 'verify_msg',\r\n        url: 'tsr4Sign/author',\r\n        // filter2: 'value',\r\n        // filter: 'author',\r\n        // system: true,\r\n        firstName: 'verified_firstName',\r\n        lastName: 'verified_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr2: [\r\n      {\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName',\r\n        name: 'مهندسی عمومی'\r\n      },\r\n      {\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName',\r\n        name: 'مهندسی فرآیند'\r\n      },\r\n      {\r\n        firstName: 'inspection_boss_verify_firstName',\r\n        lastName: 'inspection_boss_verify_lastName',\r\n        name: 'بازرسی فنی'\r\n      }\r\n    ],\r\n    tsr2_1: [\r\n      {\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName',\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss',\r\n        select: 'general_boss_select',\r\n        permission: 'general_boss_verify_allow',\r\n        state: 'general_boss_verify',\r\n        message: 'general_boss_verify_msg',\r\n        url: 'tsr2Sign/general_boss',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr2_2: [\r\n      {\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName',\r\n        name: 'رئیس مهندسی فرآیند',\r\n        value: 'process_boss',\r\n        select: 'process_boss_select',\r\n        permission: 'process_boss_verify_allow',\r\n        state: 'process_boss_verify',\r\n        message: 'process_boss_verify_msg',\r\n        url: 'tsr2Sign/process_boss',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr2_3: [\r\n      {\r\n        firstName: 'inspection_boss_verify_firstName',\r\n        lastName: 'inspection_boss_verify_lastName',\r\n        name: 'رئیس بازرسی فنی',\r\n        value: 'inspection_boss',\r\n        select: 'inspection_boss_select',\r\n        permission: 'inspection_boss_verify_allow',\r\n        state: 'inspection_boss_verify',\r\n        message: 'inspection_boss_verify_msg',\r\n        url: 'tsr2Sign/inspection_boss',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr3: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'author',\r\n        select: 'author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'author_verify_allow',\r\n        state: 'author_verify',\r\n        message: 'author_verify_msg',\r\n        url: 'tsr3Sign/author',\r\n        // filter2: 'value',\r\n        // filter: 'author',\r\n        // system: true,\r\n        firstName: 'author_verify_firstName',\r\n        lastName: 'author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'supervisor',\r\n        select: 'supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'supervisor_verify_allow',\r\n        state: 'supervisor_verify',\r\n        message: 'supervisor_verify_msg',\r\n        url: 'tsr3Sign/supervisor',\r\n        filter: 'مهندسی فرآیند و کنترل تولید',\r\n        filter2: 'user_unit',\r\n        firstName: 'supervisor_verify_firstName',\r\n        lastName: 'supervisor_verify_lastName',\r\n        hold: 'author_verify'\r\n      },\r\n      {\r\n        name: 'بهینه سازی و مدیریت انرژی، کربن و آب',\r\n        value: 'energy_manager',\r\n        select: 'energy_manager_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'energy_manager_verify_allow',\r\n        state: 'energy_manager_verify',\r\n        message: 'energy_manager_verify_msg',\r\n        url: 'tsr3Sign/energy_manager',\r\n        firstName: 'energy_manager_verify_firstName',\r\n        lastName: 'energy_manager_verify_lastName',\r\n        filter2: 'value',\r\n        filter: 'energy_manager',\r\n        hold: 'supervisor_verify',\r\n        system: true\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی فرآیند',\r\n        value: 'process_boss',\r\n        select: 'process_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'process_boss_verify_allow',\r\n        state: 'process_boss_verify',\r\n        message: 'process_boss_verify_msg',\r\n        url: 'tsr3Sign/process_boss',\r\n        hold: 'supervisor_verify',\r\n        filter2: 'value',\r\n        filter: 'process_boss',\r\n        system: true,\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr4: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'author',\r\n        select: 'author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'author_verify_allow',\r\n        state: 'author_verify',\r\n        message: 'author_verify_msg',\r\n        url: 'tsr4Sign/author',\r\n        // filter2: 'value',\r\n        // filter: 'author',\r\n        // system: true,\r\n        firstName: 'author_verify_firstName',\r\n        lastName: 'author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس ایمنی و آتش نشانی',\r\n        value: 'fire_boss',\r\n        select: 'fire_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fire_boss_verify_allow',\r\n        state: 'fire_boss_verify',\r\n        message: 'fire_boss_verify_msg',\r\n        url: 'tsr4Sign/fire_boss',\r\n        filter2: 'value',\r\n        filter: 'fire_boss',\r\n        system: true,\r\n        firstName: 'fire_boss_verify_firstName',\r\n        lastName: 'fire_boss_verify_lastName',\r\n        hold: 'author_verify'\r\n      },\r\n      {\r\n        name: 'کارشناس HSE',\r\n        value: 'hse_technician',\r\n        select: 'hse_technician_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'hse_technician_verify_allow',\r\n        state: 'hse_technician_verify',\r\n        message: 'hse_technician_verify_msg',\r\n        url: 'tsr4Sign/hse_technician',\r\n        filter2: 'user_unit',\r\n        filter: 'HSE_SD_ایمنی و آتش نشانی_SD_محیط زیست',\r\n        firstName: 'hse_technician_verify_firstName',\r\n        lastName: 'hse_technician_verify_lastName',\r\n        hold: 'fire_boss_verify'\r\n      },\r\n      {\r\n        name: 'رئیس امور HSE',\r\n        value: 'hse_boss',\r\n        select: 'hse_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'hse_boss_verify_allow',\r\n        state: 'hse_boss_verify',\r\n        message: 'hse_boss_verify_msg',\r\n        url: 'tsr4Sign/hse_boss',\r\n        filter2: 'value',\r\n        filter: 'hse_boss',\r\n        system: true,\r\n        firstName: 'hse_boss_verify_firstName',\r\n        lastName: 'hse_boss_verify_lastName',\r\n        hold: 'hse_technician_verify',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr5: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'author',\r\n        select: 'author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'author_verify_allow',\r\n        state: 'author_verify',\r\n        message: 'author_verify_msg',\r\n        url: 'tsr5Sign/author',\r\n        // filter2: 'value',\r\n        // filter: 'author',\r\n        // system: true,\r\n        firstName: 'author_verify_firstName',\r\n        lastName: 'author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'supervisor',\r\n        select: 'supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'supervisor_verify_allow',\r\n        state: 'supervisor_verify',\r\n        message: 'supervisor_verify_msg',\r\n        url: 'tsr5Sign/supervisor',\r\n        filter: 'مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'supervisor_verify_firstName',\r\n        lastName: 'supervisor_verify_lastName',\r\n        hold: 'author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss',\r\n        select: 'general_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_verify_allow',\r\n        state: 'general_boss_verify',\r\n        message: 'general_boss_verify_msg',\r\n        url: 'tsr5Sign/general_boss',\r\n        hold: 'supervisor_verify',\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr6: [\r\n      {\r\n        name: 'رئیس مهندسی فرآیند',\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName'\r\n      },\r\n      {\r\n        name: 'رئیس بازرسی فنی',\r\n        firstName: 'inspection_boss_verify_firstName',\r\n        lastName: 'inspection_boss_verify_lastName'\r\n      },\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        firstName: 'technical_boss_verify_firstName',\r\n        lastName: 'technical_boss_verify_lastName'\r\n      }\r\n    ],\r\n\r\n    tsr6_1: [\r\n      {\r\n        name: 'رئیس مهندسی فرآیند',\r\n        value: 'process_boss',\r\n        select: 'process_boss_select',\r\n        // itemReject: [\r\n        // ],\r\n        permission: 'process_boss_verify_allow',\r\n        state: 'process_boss_verify',\r\n        message: 'process_boss_verify_msg',\r\n        url: 'tsr6Sign/process_boss',\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr6_2: [\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss',\r\n        select: 'general_boss_select',\r\n        // itemReject: [\r\n        // { name: 'اصلاحیه', value: 'comment' },\r\n        // { name: 'اصلاحیه قبل', value: 'edit_last_step' }\r\n        // ],\r\n        permission: 'general_boss_verify_allow',\r\n        state: 'general_boss_verify',\r\n        message: 'general_boss_verify_msg',\r\n        url: 'tsr6Sign/general_boss',\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr6_3: [\r\n      {\r\n        name: 'رئیس بازرسی فنی',\r\n        value: 'inspection_boss',\r\n        select: 'inspection_boss_select',\r\n        // itemReject: [\r\n        // ],\r\n        permission: 'inspection_boss_verify_allow',\r\n        state: 'inspection_boss_verify',\r\n        message: 'inspection_boss_verify_msg',\r\n        url: 'tsr6Sign/inspection_boss',\r\n        firstName: 'inspection_boss_verify_firstName',\r\n        lastName: 'inspection_boss_verify_lastName',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr6_4: [\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        value: 'technical_boss',\r\n        select: 'technical_boss_select',\r\n        // itemReject: [\r\n        //   { name: 'اصلاحیه', value: 'comment' },\r\n        //   { name: 'اصلاحیه قبل', value: 'edit_last_step' }\r\n        // ],\r\n        permission: 'technical_boss_verify_allow',\r\n        state: 'technical_boss_verify',\r\n        message: 'technical_boss_verify_msg',\r\n        url: 'tsr6Sign/technical_boss',\r\n        firstName: 'technical_boss_verify_firstName',\r\n        lastName: 'technical_boss_verify_lastName',\r\n        cantReject: true\r\n      }\r\n    ],\r\n    tsr7_1: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'mechanical_author',\r\n        select: 'mechanical_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'mechanical_author_verify_allow',\r\n        state: 'mechanical_author_verify',\r\n        message: 'mechanical_author_verify_msg',\r\n        url: 'tsr7Sign/mechanical_author',\r\n        firstName: 'mechanical_author_verify_firstName',\r\n        lastName: 'mechanical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'mechanical_supervisor',\r\n        select: 'mechanical_supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'mechanical_supervisor_verify_allow',\r\n        state: 'mechanical_supervisor_verify',\r\n        message: 'mechanical_supervisor_verify_msg',\r\n        url: 'tsr7Sign/mechanical_supervisor',\r\n        filter: 'مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'mechanical_supervisor_firstName',\r\n        lastName: 'mechanical_supervisor_lastName',\r\n        hold: 'mechanical_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss_mechanical',\r\n        select: 'general_boss_mechanical_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_mechanical_verify_allow',\r\n        state: 'general_boss_mechanical_verify',\r\n        message: 'general_boss_mechanical_verify_msg',\r\n        url: 'tsr7Sign/general_boss_mechanical',\r\n        hold: 'mechanical_supervisor_verify',\r\n        firstName: 'general_boss_mechanical_verify_firstName',\r\n        lastName: 'general_boss_mechanical_verify_lastName',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        value: 'technical_boss_mechanical',\r\n        select: 'technical_boss_mechanical_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'technical_boss_mechanical_verify_allow',\r\n        state: 'technical_boss_mechanical_verify',\r\n        message: 'technical_boss_mechanical_verify_msg',\r\n        url: 'tsr7Sign/technical_boss_mechanical',\r\n        hold: 'general_boss_mechanical_verify',\r\n        firstName: 'technical_boss_mechanical_verify_firstName',\r\n        lastName: 'technical_boss_mechanical_verify_lastName',\r\n        filter: 'technical_boss',\r\n        filter2: 'value',\r\n        system: true\r\n      }\r\n    ],\r\n    tsr7_2: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'electrical_author',\r\n        select: 'electrical_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_author_verify_allow',\r\n        state: 'electrical_author_verify',\r\n        message: 'electrical_author_verify_msg',\r\n        url: 'tsr7Sign/electrical_author',\r\n        firstName: 'electrical_author_verify_firstName',\r\n        lastName: 'electrical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'electrical_supervisor',\r\n        select: 'electrical_supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_supervisor_verify_allow',\r\n        state: 'electrical_supervisor_verify',\r\n        message: 'electrical_supervisor_verify_msg',\r\n        url: 'tsr7Sign/electrical_supervisor',\r\n        filter: 'مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'electrical_supervisor_firstName',\r\n        lastName: 'electrical_supervisor_lastName',\r\n        hold: 'electrical_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss_electrical',\r\n        select: 'general_boss_electrical_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_electrical_verify_allow',\r\n        state: 'general_boss_electrical_verify',\r\n        message: 'general_boss_electrical_verify_msg',\r\n        url: 'tsr7Sign/general_boss_electrical',\r\n        hold: 'electrical_supervisor_verify',\r\n        firstName: 'general_boss_electrical_verify_firstName',\r\n        lastName: 'general_boss_electrical_verify_lastName',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        value: 'technical_boss_electrical',\r\n        select: 'technical_boss_electrical_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'technical_boss_electrical_verify_allow',\r\n        state: 'technical_boss_electrical_verify',\r\n        message: 'technical_boss_electrical_verify_msg',\r\n        url: 'tsr7Sign/technical_boss_electrical',\r\n        hold: 'general_boss_electrical_verify',\r\n        firstName: 'technical_boss_electrical_verify_firstName',\r\n        lastName: 'technical_boss_electrical_verify_lastName',\r\n        filter: 'technical_boss',\r\n        filter2: 'value',\r\n        system: true\r\n      }\r\n    ],\r\n    tsr7_3: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'instrument_author',\r\n        select: 'instrument_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'instrument_author_verify_allow',\r\n        state: 'instrument_author_verify',\r\n        message: 'instrument_author_verify_msg',\r\n        url: 'tsr7Sign/instrument_author',\r\n        firstName: 'instrument_author_verify_firstName',\r\n        lastName: 'instrument_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'instrument_supervisor',\r\n        select: 'instrument_supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'instrument_supervisor_verify_allow',\r\n        state: 'instrument_supervisor_verify',\r\n        message: 'instrument_supervisor_verify_msg',\r\n        url: 'tsr7Sign/instrument_supervisor',\r\n        filter: 'مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'instrument_supervisor_firstName',\r\n        lastName: 'instrument_supervisor_lastName',\r\n        hold: 'instrument_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss_instrument',\r\n        select: 'general_boss_instrument_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_instrument_verify_allow',\r\n        state: 'general_boss_instrument_verify',\r\n        message: 'general_boss_instrument_verify_msg',\r\n        url: 'tsr7Sign/general_boss_instrument',\r\n        hold: 'instrument_supervisor_verify',\r\n        firstName: 'general_boss_instrument_verify_firstName',\r\n        lastName: 'general_boss_instrument_verify_lastName',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        value: 'technical_boss_instrument',\r\n        select: 'technical_boss_instrument_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'technical_boss_instrument_verify_allow',\r\n        state: 'technical_boss_instrument_verify',\r\n        message: 'technical_boss_instrument_verify_msg',\r\n        url: 'tsr7Sign/technical_boss_instrument',\r\n        hold: 'general_boss_instrument_verify',\r\n        firstName: 'technical_boss_instrument_verify_firstName',\r\n        lastName: 'technical_boss_instrument_verify_lastName',\r\n        filter: 'technical_boss',\r\n        filter2: 'value',\r\n        system: true\r\n      }\r\n    ],\r\n    tsr7_4: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'building_author',\r\n        select: 'building_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'building_author_verify_allow',\r\n        state: 'building_author_verify',\r\n        message: 'building_author_verify_msg',\r\n        url: 'tsr7Sign/building_author',\r\n        firstName: 'building_author_verify_firstName',\r\n        lastName: 'building_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست',\r\n        value: 'building_supervisor',\r\n        select: 'building_supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'building_supervisor_verify_allow',\r\n        state: 'building_supervisor_verify',\r\n        message: 'building_supervisor_verify_msg',\r\n        url: 'tsr7Sign/building_supervisor',\r\n        filter: 'مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'building_supervisor_firstName',\r\n        lastName: 'building_supervisor_lastName',\r\n        hold: 'building_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss_building',\r\n        select: 'general_boss_building_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_building_verify_allow',\r\n        state: 'general_boss_building_verify',\r\n        message: 'general_boss_building_verify_msg',\r\n        url: 'tsr7Sign/general_boss_building',\r\n        hold: 'building_supervisor_verify',\r\n        firstName: 'general_boss_building_verify_firstName',\r\n        lastName: 'general_boss_building_verify_lastName',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس خدمات فنی',\r\n        value: 'technical_boss_building',\r\n        select: 'technical_boss_building_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'technical_boss_building_verify_allow',\r\n        state: 'technical_boss_building_verify',\r\n        message: 'technical_boss_building_verify_msg',\r\n        url: 'tsr7Sign/technical_boss_building',\r\n        hold: 'general_boss_building_verify',\r\n        firstName: 'technical_boss_building_verify_firstName',\r\n        lastName: 'technical_boss_building_verify_lastName',\r\n        filter: 'technical_boss',\r\n        filter2: 'value',\r\n        system: true\r\n      }\r\n    ],\r\n    tsr8_1: [\r\n      {\r\n        name: 'کارشناس',\r\n        value: 'electrical_author',\r\n        select: 'electrical_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_author_verify_allow',\r\n        state: 'electrical_author_verify',\r\n        message: 'electrical_author_verify_msg',\r\n        url: 'tsr8Sign/electrical_author',\r\n        firstName: 'electrical_author_verify_firstName',\r\n        lastName: 'electrical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست گروه',\r\n        value: 'electrical_supervisor_verify',\r\n        select: 'electrical_supervisor_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_supervisor_verify_allow',\r\n        state: 'electrical_supervisor_verify',\r\n        message: 'electrical_supervisor_verify_msg',\r\n        url: 'tsr8Sign/electrical_supervisor',\r\n        filter: 'بازرسی فنی',\r\n        filter2: 'user_unit',\r\n        firstName: 'electrical_supervisor_firstName',\r\n        lastName: 'electrical_supervisor_lastName',\r\n        hold: 'electrical_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس اداره بازرسی',\r\n        value: 'electrical_inspection_boss_verify',\r\n        select: 'electrical_inspection_boss_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_inspection_boss_verify_allow',\r\n        state: 'electrical_inspection_boss_verify',\r\n        message: 'electrical_inspection_boss_verify_msg',\r\n        url: 'tsr8Sign/electrical_inspection_boss',\r\n        filter: 'inspection_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'electrical_inspection_boss_verify_firstName',\r\n        lastName: 'electrical_inspection_boss_verify_lastName',\r\n        hold: 'electrical_supervisor_verify',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr8_2: [\r\n      {\r\n        name: 'کارشناس',\r\n        value: 'mechanical_author',\r\n        select: 'mechanical_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'mechanical_author_verify_allow',\r\n        state: 'mechanical_author_verify',\r\n        message: 'mechanical_author_verify_msg',\r\n        url: 'tsr8Sign/mechanical_author',\r\n        firstName: 'mechanical_author_verify_firstName',\r\n        lastName: 'mechanical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست گروه',\r\n        value: 'mechanical_supervisor_verify',\r\n        select: 'mechanical_supervisor_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'mechanical_supervisor_verify_allow',\r\n        state: 'mechanical_supervisor_verify',\r\n        message: 'mechanical_supervisor_verify_msg',\r\n        url: 'tsr8Sign/mechanical_supervisor',\r\n        filter: 'بازرسی فنی',\r\n        filter2: 'user_unit',\r\n        firstName: 'mechanical_supervisor_firstName',\r\n        lastName: 'mechanical_supervisor_lastName',\r\n        hold: 'mechanical_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس اداره بازرسی',\r\n        value: 'mechanical_inspection_boss_verify',\r\n        select: 'mechanical_inspection_boss_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'mechanical_inspection_boss_verify_allow',\r\n        state: 'mechanical_inspection_boss_verify',\r\n        message: 'mechanical_inspection_boss_verify_msg',\r\n        url: 'tsr8Sign/mechanical_inspection_boss',\r\n        filter: 'inspection_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'mechanical_inspection_boss_verify_firstName',\r\n        lastName: 'mechanical_inspection_boss_verify_lastName',\r\n        hold: 'mechanical_supervisor_verify',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr8_3: [\r\n      {\r\n        name: 'کارشناس',\r\n        value: 'protection_author',\r\n        select: 'protection_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'protection_author_verify_allow',\r\n        state: 'protection_author_verify',\r\n        message: 'protection_author_verify_msg',\r\n        url: 'tsr8Sign/protection_author',\r\n        firstName: 'protection_author_verify_firstName',\r\n        lastName: 'protection_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست گروه',\r\n        value: 'protection_supervisor_verify',\r\n        select: 'protection_supervisor_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'protection_supervisor_verify_allow',\r\n        state: 'protection_supervisor_verify',\r\n        message: 'protection_supervisor_verify_msg',\r\n        url: 'tsr8Sign/protection_supervisor',\r\n        filter: 'بازرسی فنی',\r\n        filter2: 'user_unit',\r\n        firstName: 'protection_supervisor_firstName',\r\n        lastName: 'protection_supervisor_lastName',\r\n        hold: 'protection_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس اداره بازرسی',\r\n        value: 'protection_inspection_boss_verify',\r\n        select: 'protection_inspection_boss_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'protection_inspection_boss_verify_allow',\r\n        state: 'protection_inspection_boss_verify',\r\n        message: 'protection_inspection_boss_verify_msg',\r\n        url: 'tsr8Sign/protection_inspection_boss',\r\n        filter: 'inspection_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'protection_inspection_boss_verify_firstName',\r\n        lastName: 'protection_inspection_boss_verify_lastName',\r\n        hold: 'protection_supervisor_verify',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr8_4: [\r\n      {\r\n        name: 'کارشناس',\r\n        value: 'welding_author',\r\n        select: 'welding_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'welding_author_verify_allow',\r\n        state: 'welding_author_verify',\r\n        message: 'welding_author_verify_msg',\r\n        url: 'tsr8Sign/welding_author',\r\n        firstName: 'welding_author_verify_firstName',\r\n        lastName: 'welding_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'سرپرست گروه',\r\n        value: 'welding_supervisor_verify',\r\n        select: 'welding_supervisor_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'welding_supervisor_verify_allow',\r\n        state: 'welding_supervisor_verify',\r\n        message: 'welding_supervisor_verify_msg',\r\n        url: 'tsr8Sign/welding_supervisor',\r\n        filter: 'بازرسی فنی',\r\n        filter2: 'user_unit',\r\n        firstName: 'welding_supervisor_firstName',\r\n        lastName: 'welding_supervisor_lastName',\r\n        hold: 'welding_author_verify'\r\n      },\r\n      {\r\n        name: 'رئیس اداره بازرسی',\r\n        value: 'welding_inspection_boss_verify',\r\n        select: 'welding_inspection_boss_verify_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'welding_inspection_boss_verify_allow',\r\n        state: 'welding_inspection_boss_verify',\r\n        message: 'welding_inspection_boss_verify_msg',\r\n        url: 'tsr8Sign/welding_inspection_boss',\r\n        filter: 'inspection_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'welding_inspection_boss_verify_firstName',\r\n        lastName: 'welding_inspection_boss_verify_lastName',\r\n        hold: 'welding_supervisor_verify',\r\n        not_dispatch: true\r\n      }\r\n    ],\r\n    tsr9_1: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'fixed_mechanical_author',\r\n        select: 'fixed_mechanical_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fixed_mechanical_author_verify_allow',\r\n        state: 'fixed_mechanical_author_verify',\r\n        message: 'fixed_mechanical_author_verify_msg',\r\n        url: 'tsr9Sign/fixed_mechanical_author',\r\n        firstName: 'fixed_mechanical_author_verify_firstName',\r\n        lastName: 'fixed_mechanical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'fixed_mechanical_unit_boss',\r\n        select: 'fixed_mechanical_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fixed_mechanical_unit_boss_verify_allow',\r\n        state: 'fixed_mechanical_unit_boss_verify',\r\n        message: 'fixed_mechanical_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/fixed_mechanical_unit_boss',\r\n        firstName: 'fixed_mechanical_unit_boss_verify_firstName',\r\n        lastName: 'fixed_mechanical_unit_boss_verify_lastName',\r\n        filter: 'fixed_mechanical_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        hold: 'fixed_mechanical_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'fixed_mechanical_planning_boss',\r\n        select: 'fixed_mechanical_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fixed_mechanical_planning_unit_boss_verify_allow',\r\n        state: 'fixed_mechanical_planning_boss_verify',\r\n        message: 'fixed_mechanical_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/fixed_mechanical_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'fixed_mechanical_planning_unit_boss_verify_firstName',\r\n        lastName: 'fixed_mechanical_planning_unit_boss_verify_lastName',\r\n        hold: 'fixed_mechanical_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr9_2: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'rotating_mechanical_author',\r\n        select: 'rotating_mechanical_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'rotating_mechanical_author_verify_allow',\r\n        state: 'rotating_mechanical_author_verify',\r\n        message: 'rotating_mechanical_author_verify_msg',\r\n        url: 'tsr9Sign/rotating_mechanical_author',\r\n        firstName: 'rotating_mechanical_author_verify_firstName',\r\n        lastName: 'rotating_mechanical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'rotating_mechanical_unit_boss',\r\n        select: 'rotating_mechanical_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'rotating_mechanical_unit_boss_verify_allow',\r\n        state: 'rotating_mechanical_unit_boss_verify',\r\n        message: 'rotating_mechanical_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/rotating_mechanical_unit_boss',\r\n        filter: 'rotating_mechanical_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'rotating_mechanical_unit_boss_verify_firstName',\r\n        lastName: 'rotating_mechanical_unit_boss_verify_lastName',\r\n        hold: 'rotating_mechanical_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'rotating_mechanical_planning_boss',\r\n        select: 'rotating_mechanical_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'rotating_mechanical_planning_unit_boss_verify_allow',\r\n        state: 'rotating_mechanical_planning_boss_verify',\r\n        message: 'rotating_mechanical_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/rotating_mechanical_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'rotating_mechanical_planning_unit_boss_verify_firstName',\r\n        lastName: 'rotating_mechanical_planning_unit_boss_verify_lastName',\r\n        hold: 'rotating_mechanical_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr9_3: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'electrical_author',\r\n        select: 'electrical_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_author_verify_allow',\r\n        state: 'electrical_author_verify',\r\n        message: 'electrical_author_verify_msg',\r\n        url: 'tsr9Sign/electrical_author',\r\n        firstName: 'electrical_author_verify_firstName',\r\n        lastName: 'electrical_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'electrical_boss',\r\n        select: 'electrical_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_unit_boss_verify_allow',\r\n        state: 'electrical_unit_boss_verify',\r\n        message: 'electrical_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/electrical_unit_boss',\r\n        filter: 'electrical_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'electrical_unit_boss_verify_firstName',\r\n        lastName: 'electrical_unit_boss_verify_lastName',\r\n        hold: 'electrical_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'electrical_planning_boss',\r\n        select: 'electrical_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'electrical_planning_unit_boss_verify_allow',\r\n        state: 'electrical_planning_boss_verify',\r\n        message: 'electrical_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/electrical_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'electrical_planning_unit_boss_verify_firstName',\r\n        lastName: 'electrical_planning_unit_boss_verify_lastName',\r\n        hold: 'electrical_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr9_4: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'instrument_author',\r\n        select: 'instrument_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'instrument_author_verify_allow',\r\n        state: 'instrument_author_verify',\r\n        message: 'instrument_author_verify_msg',\r\n        url: 'tsr9Sign/instrument_author',\r\n        firstName: 'instrument_author_verify_firstName',\r\n        lastName: 'instrument_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'instrument_unit_boss_verify',\r\n        select: 'instrument_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'instrument_unit_boss_verify_allow',\r\n        state: 'instrument_unit_boss_verify',\r\n        message: 'instrument_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/instrument_unit_boss',\r\n        filter: 'instrument_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'instrument_unit_boss_verify_firstName',\r\n        lastName: 'instrument_unit_boss_verify_lastName',\r\n        hold: 'instrument_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'instrument_planning_boss',\r\n        select: 'instrument_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'instrument_planning_unit_boss_verify_allow',\r\n        state: 'instrument_planning_boss_verify',\r\n        message: 'instrument_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/instrument_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'instrument_planning_unit_boss_verify_firstName',\r\n        lastName: 'instrument_planning_unit_boss_verify_lastName',\r\n        hold: 'instrument_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr9_5: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'sensitive_equipment_author',\r\n        select: 'sensitive_equipment_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'sensitive_equipment_author_verify_allow',\r\n        state: 'sensitive_equipment_author_verify',\r\n        message: 'sensitive_equipment_author_verify_msg',\r\n        url: 'tsr9Sign/sensitive_equipment_author',\r\n        firstName: 'sensitive_equipment_author_verify_firstName',\r\n        lastName: 'sensitive_equipment_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'sensitive_equipment_boss',\r\n        select: 'sensitive_equipment_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'sensitive_equipment_unit_boss_verify_allow',\r\n        state: 'sensitive_equipment_unit_boss_verify',\r\n        message: 'sensitive_equipment_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/sensitive_equipment_unit_boss',\r\n        filter: 'sensitive_equipment_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'sensitive_equipment_unit_boss_verify_firstName',\r\n        lastName: 'sensitive_equipment_unit_boss_verify_lastName',\r\n        hold: 'sensitive_equipment_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'sensitive_equipment_planning_boss',\r\n        select: 'sensitive_equipment_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'sensitive_equipment_planning_unit_boss_verify_allow',\r\n        state: 'sensitive_equipment_planning_boss_verify',\r\n        message: 'sensitive_equipment_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/sensitive_equipment_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'sensitive_equipment_planning_unit_boss_verify_firstName',\r\n        lastName: 'sensitive_equipment_planning_unit_boss_verify_lastName',\r\n        hold: 'sensitive_equipment_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr9_6: [\r\n      {\r\n        name: 'مسئول اجرا',\r\n        value: 'repair_services_author',\r\n        select: 'repair_services_author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'repair_services_author_verify_allow',\r\n        state: 'repair_services_author_verify',\r\n        message: 'repair_services_author_verify_msg',\r\n        url: 'tsr9Sign/repair_services_author',\r\n        firstName: 'repair_services_author_verify_firstName',\r\n        lastName: 'repair_services_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'repair_services_boss',\r\n        select: 'repair_services_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'repair_services_unit_boss_verify_allow',\r\n        state: 'repair_services_unit_boss_verify',\r\n        message: 'repair_services_unit_boss_verify_msg',\r\n        url: 'tsr9Sign/repair_services_unit_boss',\r\n        filter: 'repair_services_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'repair_services_unit_boss_verify_firstName',\r\n        lastName: 'repair_services_unit_boss_verify_lastName',\r\n        hold: 'repair_services_author_verify',\r\n        not_dispatch: true\r\n      },\r\n      {\r\n        name: 'رئیس برنامه ریزی',\r\n        value: 'repair_services_planning_boss',\r\n        select: 'repair_services_planning_unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'repair_services_planning_unit_boss_verify_allow',\r\n        state: 'repair_services_planning_boss_verify',\r\n        message: 'repair_services_planning_boss_verify_msg',\r\n        url: 'tsr9Sign/repair_services_planning_boss',\r\n        filter: 'planning_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'repair_services_planning_unit_boss_verify_firstName',\r\n        lastName: 'repair_services_planning_unit_boss_verify_lastName',\r\n        hold: 'repair_services_unit_boss_verify'\r\n      }\r\n    ],\r\n    tsr10_1: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'repair_author',\r\n        select: 'repair_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'repair_author_verify_allow',\r\n        state: 'repair_author_verify',\r\n        message: 'repair_author_verify_msg',\r\n        url: 'tsr10Sign/repair_author',\r\n        firstName: 'repair_author_verify_firstName',\r\n        lastName: 'repair_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس تعمیرات',\r\n        value: 'repair_boss',\r\n        select: 'repair_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'repair_boss_verify_allow',\r\n        state: 'repair_boss_verify',\r\n        message: 'repair_boss_verify_msg',\r\n        url: 'tsr10Sign/repair_boss',\r\n        filter: 'repair_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'repair_boss_verify_firstName',\r\n        lastName: 'repair_boss_verify_lastName',\r\n        hold: 'repair_boss_author_verify',\r\n        hold: 'repair_author_verify',\r\n        not_dispatch: true,\r\n        filter3: 'repair_supervisor_id',\r\n      }\r\n    ],\r\n    tsr10_2: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'operation_author',\r\n        select: 'operation_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'operation_author_verify_allow',\r\n        state: 'operation_author_verify',\r\n        message: 'operation_author_verify_msg',\r\n        url: 'tsr10Sign/operation_author',\r\n        firstName: 'operation_author_verify_firstName',\r\n        lastName: 'operation_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس بهره‌برداری',\r\n        value: 'operation_boss',\r\n        select: 'operation_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'operation_boss_verify_allow',\r\n        state: 'operation_boss_verify',\r\n        message: 'operation_boss_verify_msg',\r\n        url: 'tsr10Sign/operation_boss',\r\n        filter: 'operation_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'operation_boss_verify_firstName',\r\n        lastName: 'operation_boss_verify_lastName',\r\n        hold: 'operation_author_verify',\r\n        not_dispatch: true,\r\n        filter3: 'operation_supervisor_id',\r\n      }\r\n    ],\r\n    tsr10_3: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'fire_author',\r\n        select: 'fire_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fire_author_verify_allow',\r\n        state: 'fire_author_verify',\r\n        message: 'fire_author_verify_msg',\r\n        url: 'tsr10Sign/fire_author',\r\n        firstName: 'fire_author_verify_firstName',\r\n        lastName: 'fire_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس ایمنی و آتش نشانی',\r\n        value: 'fire_boss',\r\n        select: 'fire_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'fire_boss_verify_allow',\r\n        state: 'fire_boss_verify',\r\n        message: 'fire_boss_verify_msg',\r\n        url: 'tsr10Sign/fire_boss',\r\n        filter: 'fire_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'fire_boss_verify_firstName',\r\n        lastName: 'fire_boss_verify_lastName',\r\n        hold: 'fire_author_verify',\r\n        not_dispatch: true,\r\n        filter3: 'fire_supervisor_id',\r\n      }\r\n    ],\r\n    tsr10_4: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'process_author',\r\n        select: 'process_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'process_author_verify_allow',\r\n        state: 'process_author_verify',\r\n        message: 'process_author_verify_msg',\r\n        url: 'tsr10Sign/process_author',\r\n        firstName: 'process_author_verify_firstName',\r\n        lastName: 'process_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی فرآیند',\r\n        value: 'process_boss',\r\n        select: 'process_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'process_boss_verify_allow',\r\n        state: 'process_boss_verify',\r\n        message: 'process_boss_verify_msg',\r\n        url: 'tsr10Sign/process_boss',\r\n        filter: 'process_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'process_boss_verify_firstName',\r\n        lastName: 'process_boss_verify_lastName',\r\n        not_dispatch: true,\r\n        filter3: 'process_supervisor_id',\r\n      }\r\n    ],\r\n    tsr10_5: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'inspection_author',\r\n        select: 'inspection_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'inspection_author_verify_allow',\r\n        state: 'inspection_author_verify',\r\n        message: 'inspection_author_verify_msg',\r\n        url: 'tsr10Sign/inspection_author',\r\n        firstName: 'inspection_author_verify_firstName',\r\n        lastName: 'inspection_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس بازرسی فنی',\r\n        value: 'inspection_boss',\r\n        select: 'inspection_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'inspection_boss_verify_allow',\r\n        state: 'inspection_boss_verify',\r\n        message: 'inspection_boss_verify_msg',\r\n        url: 'tsr10Sign/inspection_boss',\r\n        filter: 'inspection_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'inspection_boss_verify_firstName',\r\n        lastName: 'inspection_boss_verify_lastName',\r\n        not_dispatch: true,\r\n        filter3: 'inspection_supervisor_id',\r\n      }\r\n    ],\r\n    tsr10_6: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'general_author',\r\n        select: 'general_author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_author_verify_allow',\r\n        state: 'general_author_verify',\r\n        message: 'general_author_verify_msg',\r\n        url: 'tsr10Sign/general_author',\r\n        firstName: 'general_author_verify_firstName',\r\n        lastName: 'general_author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss',\r\n        select: 'general_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_verify_allow',\r\n        state: 'general_boss_verify',\r\n        message: 'general_boss_verify_msg',\r\n        url: 'tsr10Sign/general_boss',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName',\r\n        not_dispatch: true,\r\n        filter3: 'general_supervisor_id',\r\n      }\r\n    ],\r\n    tsr11: [\r\n      {\r\n        name: 'مسئول TSR',\r\n        value: 'author',\r\n        select: 'author_select',\r\n        // itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'author_verify_allow',\r\n        state: 'author_verify',\r\n        message: 'author_verify_msg',\r\n        url: 'tsr10Sign/author',\r\n        firstName: 'author_firstName',\r\n        lastName: 'author_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true,\r\n        not_have_check: true\r\n      },\r\n      {\r\n        name: 'سرپرست گروه',\r\n        value: 'supervisor',\r\n        select: 'supervisor_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'supervisor_verify_allow',\r\n        state: 'supervisor_verify',\r\n        message: 'supervisor_verify_msg',\r\n        url: 'tsr11Sign/supervisor',\r\n        filter: 'خدمات فنی_SD_مهندسی فرآیند و کنترل تولید_SD_بازرسی فنی_SD_آزمایشگاه_SD_مهندسی عمومی و پروژه ها',\r\n        filter2: 'user_unit',\r\n        firstName: 'supervisor_verify_firstName',\r\n        lastName: 'supervisor_verify_lastName'\r\n      },\r\n      {\r\n        name: 'رئیس مهندسی عمومی',\r\n        value: 'general_boss',\r\n        select: 'general_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'general_boss_verify_allow',\r\n        state: 'general_boss_verify',\r\n        message: 'general_boss_verify_msg',\r\n        url: 'tsr11Sign/general_boss',\r\n        filter: 'general_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'general_boss_verify_firstName',\r\n        lastName: 'general_boss_verify_lastName'\r\n      }\r\n    ],\r\n    tsr12: [\r\n      {\r\n        name: 'بررسی کننده',\r\n        value: 'author',\r\n        select: 'author_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'author_verify_allow',\r\n        state: 'author_verify',\r\n        message: 'author_verify_msg',\r\n        url: 'tsr12Sign/author',\r\n        // filter2: 'value',\r\n        // filter: 'author',\r\n        // system: true,\r\n        firstName: 'author_verify_firstName',\r\n        lastName: 'author_verify_lastName',\r\n        notShowDefault: true,\r\n        cantReject: true\r\n      },\r\n      {\r\n        name: 'رئیس واحد',\r\n        value: 'unit_boss',\r\n        select: 'unit_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'unit_boss_verify_allow',\r\n        state: 'unit_boss_verify',\r\n        message: 'unit_boss_verify_msg',\r\n        url: 'tsr12Sign/unit_boss',\r\n        filter: 'unit_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'unit_boss_verify_firstName',\r\n        lastName: 'unit_boss_verify_lastName'\r\n      },\r\n      {\r\n        name: 'رئیس اداره/امور',\r\n        value: 'office_boss',\r\n        select: 'office_boss_select',\r\n        itemReject: [{ name: 'اصلاحیه', value: 'comment' }],\r\n        permission: 'office_boss_verify_allow',\r\n        state: 'office_boss_verify',\r\n        message: 'office_boss_verify_msg',\r\n        url: 'tsr12Sign/office_boss',\r\n        filter: 'office_boss',\r\n        filter2: 'value',\r\n        system: true,\r\n        firstName: 'office_boss_verify_firstName',\r\n        lastName: 'office_boss_verify_lastName',\r\n        not_dispatch: true\r\n      }\r\n    ]\r\n  }\r\n}\r\nexport default ListSign\r\n","E:\\bidboland\\src\\tsrNew\\tsr1\\TechnicalServiceApplication.js",[],"E:\\bidboland\\src\\layout\\CancelButton.js",[],"E:\\bidboland\\src\\Chart\\Chart.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\TableVertical.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\TableHorizontal.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\PieOfPie.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\LastSituationBox.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\TSR7.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\dashboard\\DurationValueAxis.js",[],"E:\\bidboland\\src\\tsrNew\\index\\AcceptedList.js",[],"E:\\bidboland\\src\\Customization\\CounterTab.js",[],"E:\\bidboland\\src\\tsrNew\\index\\DrafList.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\TSR6.js",[],"E:\\bidboland\\src\\Tools\\TaskManagement\\AllTasks.js",[],"E:\\bidboland\\src\\Form\\Form.js",[],"E:\\bidboland\\src\\Print\\TSR\\page11.js",[],"E:\\bidboland\\src\\Print\\TSR\\page12.js",[],"E:\\bidboland\\src\\Print\\TSR\\page10.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\access.js",[],"E:\\bidboland\\src\\library\\TablePublishers.js",["3103","3104","3105"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nimport Loading from '../layout/loading'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Row from '../table/Row'\r\nimport OutputFilter from '../table/OutputFilter'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n// import { Link } from 'react-router-dom'\r\n// import VisibilityIcon from '@material-ui/icons/Visibility';\r\n// import PrintIcon from '@material-ui/icons/Print';\r\nimport Permision from '../permision/permision'\r\nimport GetAppRoundedIcon from '@material-ui/icons/GetAppRounded'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nexport default class TableWriters extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'ردیف', value: 'id' },\r\n        { name: 'نام', value: 'name' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      search: '',\r\n      loading: 'table',\r\n      letterNumber: '',\r\n      idLetter: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/LibraryManager/publisher/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                columns: response.data.content.columns\r\n                  ? response.data.content.columns\r\n                  : this.state.columns\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      await this.setState({ loading: 'table' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/LibraryManager/publisher/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/LibraryManager/publisher/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await this.setState({ loading: 'table', search: '' })\r\n      await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            // let permision = new Permision()\r\n            // if(permision.handlePermision(response.data.role , 'main_transmittal')){\r\n\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns,\r\n              role: response.data.role\r\n            })\r\n            // }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (index, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: index,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table rtl persian w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        key={index}\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={true}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, index) => (\r\n                  <tr\r\n                    className={this.state._active === index ? '_active' : ''}\r\n                    key={index}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={index}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 justify-content-end ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TSR\\ListSign.js",[],"E:\\bidboland\\src\\tsrNew\\report\\content.js",[],"E:\\bidboland\\src\\library\\TableWriters.js",["3106"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nimport Loading from '../layout/loading'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Row from '../table/Row'\r\nimport OutputFilter from '../table/OutputFilter'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n// import { Link } from 'react-router-dom'\r\n// import VisibilityIcon from '@material-ui/icons/Visibility';\r\n// import PrintIcon from '@material-ui/icons/Print';\r\nimport Permision from '../permision/permision'\r\n// import GetAppRoundedIcon from '@material-ui/icons/GetAppRounded'\r\n// import EditIcon from '@material-ui/icons/Edit'\r\nexport default class TableWriters extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'ردیف', value: 'id' },\r\n        { name: 'نام', value: 'name' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      search: '',\r\n      loading: 'table',\r\n      letterNumber: '',\r\n      idLetter: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/LibraryManager/author/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                columns: response.data.content.columns\r\n                  ? response.data.content.columns\r\n                  : this.state.columns\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      await this.setState({ loading: 'table' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/LibraryManager/author/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/LibraryManager/author/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await this.setState({ loading: 'table', search: '' })\r\n      await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            // let permision = new Permision()\r\n            // if(permision.handlePermision(response.data.role , 'main_transmittal')){\r\n\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns,\r\n              role: response.data.role\r\n            })\r\n            // }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (index, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: index,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table rtl persian w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        key={index}\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={true}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, index) => (\r\n                  <tr\r\n                    className={this.state._active === index ? '_active' : ''}\r\n                    key={index}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={index}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 justify-content-end ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\CheckPersianText.js",[],"E:\\bidboland\\src\\index-builder\\EditRow.js",[],"E:\\bidboland\\src\\ConvertNumber.js",[],"E:\\bidboland\\src\\layout\\LinkReality.js",[],"E:\\bidboland\\src\\layout\\Bulletin.js",[],"E:\\bidboland\\src\\layout\\itemSide.js.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TextAreaWithRotate.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\Date.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR12\\ResultReview.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\Office.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\Documents.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\Problems.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\InstructionNumber.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\ReviewResult.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\Page9.js",["3107"],"import React from 'react'\r\n// import handleString from '../../../handleString'\r\nimport Header from '../Header/Header'\r\nimport Implemented from './Implemented'\r\nimport TextAreaWithRotate from '../TextAreaWithRotate'\r\nimport Attachment from '../Attachment/Attachment'\r\nimport CheckBox from './CheckBox'\r\nimport Sign from '../Sign/Sign'\r\nconst Page9 = props => {\r\n  const { value, numTab, data } = props\r\n  let name_note = `${value}_note`\r\n  const name_foreign = `${value}_foreign_attachment`\r\n  const name_internal = `${value}_internal_attachment`\r\n  // const mark_up_show = data[`${value}_marked_document`] === '1'\r\n  // const test_result_show = data[`${value}_test_result`] === '1'\r\n  return (\r\n    <page className='portrate'>\r\n      <div className='holder'>\r\n        <div className='holder_right position-relative flex-custome'></div>\r\n        <div className='holder_left'>\r\n          <Header {...props} />\r\n          <div className='___mainSign'>\r\n            <p className='b f16 tealc'>\r\n              صفحه نهم -اعلام پايان كار توسط مسئول اجرا\r\n              {/* <span className='fss gray-color mr-2'>\r\n                ({handleString(props.name)})\r\n              </span> */}\r\n            </p>\r\n            <Implemented {...props} />\r\n            <TextAreaWithRotate\r\n              {...props}\r\n              boxText={true}\r\n              className='halk'\r\n              label='ملاحظات'\r\n              value={name_note}\r\n            />\r\n            {/* {mark_up_show && (\r\n              )} */}\r\n            <CheckBox\r\n              {...props}\r\n              label='مدارك MARK UP شده'\r\n              name_value={`${value}_marked_document`}\r\n            />\r\n            {/* {test_result_show && (\r\n              )} */}\r\n            <CheckBox\r\n              {...props}\r\n              label='نتایج تست'\r\n              name_value={`${value}_test_result`}\r\n            />\r\n            <Attachment\r\n              {...props}\r\n              foreign={name_foreign}\r\n              internal={name_internal}\r\n            />\r\n            <Sign {...props} id={9} numTab={numTab} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </page>\r\n  )\r\n}\r\nexport default Page9\r\n","E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\Page8.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Sign\\Sign.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Header\\Header.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\ListTab.js",[],"E:\\bidboland\\src\\tsrNew\\CCDisabled.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\Internal.js",[],"E:\\bidboland\\src\\table\\Row.js",[],"E:\\bidboland\\src\\tsrNew\\index\\Undo.js",[],"E:\\bidboland\\src\\tsrNew\\index\\AcceptedListAction.js",["3108"],"import React from 'react'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility'\r\nimport PrintIcon from '@material-ui/icons/Print'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\r\nimport UndoIcon from '@material-ui/icons/Undo'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nconst AcceptedListAction = props => {\r\n  const checkPermision = props.Permision.handlePermision\r\n  const { role } = props.state\r\n  const data = props.data || {}\r\n  const key = props._key\r\n  return (\r\n    <td className='action justify-content-start' key={key}>\r\n      {checkPermision(role, 'tsr_show') && (\r\n        <a className='mr-1 ml-1' href={`new-tsr-${data.id}`}>\r\n          <span className='edit'>\r\n            <VisibilityIcon />\r\n          </span>\r\n        </a>\r\n      )}\r\n      {checkPermision(role, 'tsr_print') && (\r\n        <a className='mr-1 ml-1' href={`/new-tsr/print/${data.id}`}>\r\n          <span className='edit'>\r\n            <PrintIcon />\r\n          </span>\r\n        </a>\r\n      )}\r\n      <span\r\n        className='edit'\r\n        onClick={() => props.handleState({ determinant: true })}\r\n      >\r\n        <MoreHorizIcon />\r\n      </span>\r\n      {data.undo_verify && (\r\n        <span\r\n          className='edit position-relative'\r\n          onClick={() =>\r\n            props.handleState({\r\n              id_undo: data.id\r\n            })\r\n          }\r\n        >\r\n          <UndoIcon />\r\n        </span>\r\n      )}\r\n      {/* {data.rejected &&\r\n        <span className='delete' onClick={() => props.handleState({ reject_id: data.id })}>\r\n          <CloseIcon />\r\n        </span>\r\n      } */}\r\n    </td>\r\n  )\r\n}\r\nexport default AcceptedListAction\r\n","E:\\bidboland\\src\\tsrNew\\index\\Reject.js",["3109"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Loading from \"../../layout/loading\";\r\nimport axios from \"axios\";\r\nimport Notification from \"../../notification/notification\";\r\nimport Message from \"../../notification/Message\";\r\nimport StaticData from '../../staticData'\r\nimport handleString from \"../../handleString\";\r\nconst Reject = props => {\r\n    const [load, setLoad] = useState(true)\r\n    const [txt, setTxt] = useState('')\r\n    const { state, handleRefs } = props\r\n    const { reject_id, token } = state\r\n    const myElm = useRef()\r\n    useEffect(() => {\r\n        handleRefs(`_reject_${reject_id}`, myElm?.current)\r\n        fetchData()\r\n    }, [myElm])\r\n    const fetchData = () => {\r\n        const url = `${StaticData.domainIp}/tsr_v1/showRejectReason/${reject_id}`\r\n        axios({\r\n            method: 'get',\r\n            url: url,\r\n            headers: {\r\n                Authorization: token ? `Bearer ${token}` : null\r\n            }\r\n        })\r\n            .then(async response => {\r\n                setLoad(false)\r\n                if (response.status === 200) {\r\n                    setTxt(response.data)\r\n                }\r\n                else {\r\n                    Notification.notify(Message.text(response.status), 'error')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setLoad(false)\r\n                if (err.response) {\r\n                    Notification.notify(Message.text(err.response.status), 'error')\r\n                }\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"backGroundPopup\">\r\n            <div className=\"col-xl-4 col-lg-4 col-md-6 col-sm-10 m-auto\">\r\n                <div className=\"box-wellcome\" ref={myElm}>\r\n                    {load ?\r\n                        <LoadingBox />\r\n                        :\r\n                        <>\r\n                            <div className=\"title-wellcome\">\r\n                                <h3>دلیل رد شدن TSR {reject_id}</h3>\r\n                            </div>\r\n                            <div className=\"main-text\">\r\n                                <p className=\"text\">\r\n                                    {handleString(txt)}\r\n                                </p>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst LoadingBox = () => {\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <Loading className='table d-flex justify-content-center' />\r\n            <span className=\"d-block mt-2\">\r\n                در حال بارگزاری اطلاعات\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\nexport default Reject","E:\\bidboland\\src\\tsrNew\\index\\ConfirmReject.js",["3110","3111","3112","3113","3114","3115"],"import React, { useState } from 'react'\r\nimport Loading from '../../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport ThumbDownAltRoundedIcon from '@material-ui/icons/ThumbDownAltRounded'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport axios from 'axios'\r\nimport StaticData from '../../staticData'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nconst ConfirmReject = props => {\r\n  const [value, setValue] = useState('')\r\n  async function handleSubmit (status) {\r\n    const { handleVerfy } = props.FetchApi\r\n    handleVerfy(status, value)\r\n  }\r\n  const { loading, disabled } = props.state\r\n  return (\r\n    <div className='backGroundPopup'>\r\n      <div className='col-xl-4 col-lg-4 col-md-8 col-12 mb-5'>\r\n        <div className='box-wellcome'>\r\n          <div className='title-wellcome'>\r\n            <span className='col p-0'>بررسی اولیه درخواست خدمات فنی</span>\r\n            <CloseIcon onClick={() => props.handleState({ IdSelected: '' })} />\r\n          </div>\r\n          <div className='w-100'>\r\n            <div className='main-textarea'>\r\n              <textarea\r\n                className='rtl'\r\n                onChange={e => setValue(handleString(e.target.value).slice(0, 300))}\r\n                placeholder='لطفا دلیل خود را جهت رد کردن وارد کنید(اجباری)'\r\n                value={handleString(value)}\r\n              ></textarea>\r\n            </div>\r\n            <div className='buttons-wellcome justify-content-center'>\r\n              <button\r\n                className='_accept_ pt-0 pb-0'\r\n                onClick={() => handleSubmit('accepted')}\r\n                disabled={disabled}\r\n              >\r\n                {loading === 'accepted' ? (\r\n                  <Loading className='form-loader mr-0 ml-2' />\r\n                ) : (\r\n                  <DoneIcon className='ml-2 mt-2 mb-2' />\r\n                )}\r\n                تائید\r\n              </button>\r\n              <button\r\n                className='pt-0 pb-0 reject'\r\n                onClick={() => handleSubmit('reject')}\r\n                disabled={disabled}\r\n              >\r\n                {loading === 'reject' ? (\r\n                  <Loading className='form-loader mr-0 ml-2' />\r\n                ) : (\r\n                  <CloseIcon className='ml-2 mt-2 mb-2' />\r\n                )}\r\n                رد\r\n              </button>\r\n              <button\r\n                className='pt-0 pb-0 comment'\r\n                onClick={() => handleSubmit('comment')}\r\n                disabled={disabled}\r\n              >\r\n                {loading === 'comment' ? (\r\n                  <Loading className='form-loader mr-0 ml-2' />\r\n                ) : (\r\n                  <EditIcon className='ml-2 mt-2 mb-2' />\r\n                )}\r\n                اصلاحیه\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ConfirmReject\r\n","E:\\bidboland\\src\\table\\FooterTable.js",["3116"],"import React, { useRef, useEffect } from 'react'\r\nimport handleCheckText from '../handleCheckText'\r\n// import StaticData from '../staticData'\r\n// import OutputFilter from './OutputFilter'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\n// import CheckPersianText from '../CheckPersianText'\r\nimport handleString from '../handleString'\r\nimport API from './API'\r\nimport OutputCorrective from '../ARP/outputCorrective'\r\nconst FooterTable = props => {\r\n  const fns = new API(props)\r\n  const { ManageDownloadFile } = fns\r\n  let {\r\n    row,\r\n    search,\r\n    loading,\r\n    role,\r\n    // textSearch,\r\n    totalLength,\r\n    contentPerPage,\r\n    page,\r\n    pageNumber,\r\n    length,\r\n    testObject,\r\n    objFiltered\r\n  } = props.state\r\n  const parentProps = props.props\r\n  const parentState = parentProps.state || {}\r\n  const parentSearch = parentState.search\r\n  let finalSearch = handleString(parentSearch || search)\r\n  row = row || []\r\n  const contentPerPageElm = useRef()\r\n  const pageElm = useRef()\r\n  useEffect(() => {\r\n    handleRefs('contentPerPage', contentPerPageElm.current)\r\n    handleRefs('page', pageElm.current)\r\n  }, [])\r\n  function handleRefs(name, elm) {\r\n    props.handleRefs(name, elm)\r\n  }\r\n  const CheckShow = (name1, name2) => {\r\n    let state1 = props.Permision.handlePermision(role, name1)\r\n    let state2 = handleCheckText(name2)\r\n    let result = state1 && state2\r\n    return result\r\n  }\r\n  function FoundNmae(header, value) {\r\n    let filter = header.filter(head => head.value === value) || []\r\n    let result = filter[0] || {}\r\n    const { name } = result\r\n    return name\r\n  }\r\n  function handleFiltered() {\r\n    let { testObject, header } = props.state\r\n    let convert = Object.keys(testObject).map(value => {\r\n      let label = handleString(testObject[value])\r\n      let array = label.split('*')\r\n      let resultLabel = array.join(',')\r\n      let name = FoundNmae(header, value)\r\n      let obj = {\r\n        value,\r\n        name: handleCheckText(name) ? name : value,\r\n        label: resultLabel\r\n      }\r\n      return obj\r\n    })\r\n    return convert\r\n  }\r\n  async function handleEditFilter(data) {\r\n    let state = props.state || {}\r\n    await props.handleState({\r\n      loading: 'table'\r\n    })\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        if (value.includes(data.value)) {\r\n          state[value] = await false\r\n        }\r\n      }\r\n    }\r\n    let ListText = [],\r\n      dbNameList = [],\r\n      text = '',\r\n      objfil = objFiltered || {}\r\n    let newJson = testObject || {}\r\n    await delete newJson[data.value]\r\n    await delete objfil[data.value]\r\n    for (let txt in newJson) {\r\n      await dbNameList.push(txt)\r\n      let _text = await `${txt}=${encodeURIComponent(newJson[txt])}`\r\n      await ListText.push(_text)\r\n    }\r\n    dbNameList = await [...new Set(dbNameList)]\r\n    text = await `${ListText.join('|$')}`\r\n    let secondObj = await {\r\n      textSearch: text,\r\n      testObject: newJson,\r\n      loading: 'table',\r\n      objFiltered: objfil,\r\n      page: 1,\r\n      contentPerPage: 25,\r\n      pageAdvance: 1,\r\n      totalAdvance: 0\r\n      // _listData_: list\r\n    }\r\n    let merge = await { ...state, ...secondObj }\r\n    await props.handleState(merge)\r\n    await props.fetchData(\r\n      handleCheckText(text) ? `searchByFields=${text}` : null\r\n    )\r\n  }\r\n  let state1Class = row.length === 0 && !handleCheckText(finalSearch)\r\n  let state2Class = loading === 'table'\r\n  const resultClass = state1Class || state2Class\r\n  const listFilter = handleFiltered()\r\n  const myProps = { ...fns, ...props }\r\n  return (\r\n    <div\r\n      className={`footer-table row mr-0 ml-0 w-100 ${resultClass ? 'd-none' : ''\r\n        }`}\r\n    >\r\n      <div className='col-xl-4 col-lg-4 col-md-12 col-12 d-flex align-items-center'>\r\n        <div className='link-footer'>\r\n          {CheckShow(props.xlsName, props.xls) && (\r\n            <button\r\n              onClick={() => ManageDownloadFile(props.xls)}\r\n              className='pointer xls'\r\n            >\r\n              <img src='/img/XLS.svg' alt='xls' /> خروجی اکسل\r\n            </button>\r\n          )}\r\n          {CheckShow(props.pdfName, props.pdf) && (\r\n            <button\r\n              onClick={() => ManageDownloadFile(props.pdf)}\r\n              className='pointer pdf'\r\n            >\r\n              <img src='/img/PDF.svg' alt='PDF' />\r\n              خروجی pdf\r\n            </button>\r\n          )}\r\n          {props.corrective &&\r\n            <OutputCorrective {...myProps} />\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className='col-xl-8 col-lg-8 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n        <div className='main-item-footer'>\r\n          <div className='item num-row'>\r\n            <label>تعداد ردیف در هر صفحه :</label>\r\n            <select\r\n              name='contentPerPage'\r\n              ref={contentPerPageElm}\r\n              onChange={e => props.changeRowNumber(e)}\r\n            >\r\n              <option value={25}>25</option>\r\n              <option value={50}>50</option>\r\n              <option value={100}>100</option>\r\n            </select>\r\n          </div>\r\n          <div className='item'>\r\n            <label>\r\n              آیتم\r\n              {totalLength < contentPerPage * page\r\n                ? ` ${totalLength} `\r\n                : ` ${contentPerPage * page} `}\r\n              از\r\n              {length}\r\n              {` ${totalLength} `}- صفحه\r\n            </label>\r\n            <select\r\n              ref={pageElm}\r\n              name='page'\r\n              onChange={e => props.changeRowNumber(e)}\r\n            >\r\n              {props.handleNumberPage()}\r\n            </select>\r\n            <label>از {pageNumber}</label>\r\n          </div>\r\n          <div className='item arrow'>\r\n            <button onClick={() => props.handleClick('right')}>\r\n              <ChevronRightIcon />\r\n            </button>\r\n            <button onClick={() => props.handleClick('left')}>\r\n              <ChevronLeftIcon />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {listFilter.length > 0 && (\r\n        <div className='col-12'>\r\n          <div className='list-filter row mx-0 justify-content-start ltr'>\r\n            {listFilter.map((data, key) => (\r\n              <span key={key} className={`box-filter my-1 ltr ml-2`}>\r\n                <CloseRoundedIcon\r\n                  className='pointer'\r\n                  onClick={() => handleEditFilter(data)}\r\n                />\r\n                {handleString(data.name)}:\r\n                <span className='label_value'>{handleString(data.label)}</span>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default FooterTable\r\n","E:\\bidboland\\src\\Form\\Switch.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\Submit.js",[],"E:\\bidboland\\src\\table\\OutputFilter.js",[],"E:\\bidboland\\src\\table\\notFound.js",[],"E:\\bidboland\\src\\Customization\\advancedSearch.js",["3117","3118","3119","3120","3121","3122"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport IndeterminateCheckBoxRoundedIcon from '@material-ui/icons/IndeterminateCheckBoxRounded'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\r\nimport Loading from '../layout/loading'\r\n// import handleCheckText from '../handleCheckText'\r\nimport CheckPersianText from '../CheckPersianText'\r\nimport handleString from '../handleString'\r\nfunction AdvanceSearch(props) {\r\n  const Elm = useRef(null)\r\n  const [list, setList] = useState([])\r\n  const [search, setSearch] = useState('')\r\n  let [page, setPage] = useState(1)\r\n  const parentData = props.data || {}\r\n  let state = props.state || {}\r\n  useEffect(\r\n    () => {\r\n      // handlecheckTik()\r\n      if (state.list) {\r\n        let length = state.list.length\r\n        let count = length / 10\r\n        if (count > 0) {\r\n          setPage(parseInt(count))\r\n        }\r\n        setList(state.list)\r\n      }\r\n    },\r\n    handleEffect() ? [props] : []\r\n  )\r\n  async function handleChange(checked, data) {\r\n    if (!handleLoading()) {\r\n      let name = await `_header_${data}__DARA__${parentData.value}`\r\n      await props.handleSelect(checked, name)\r\n    }\r\n  }\r\n  function handleEffect() {\r\n    if (props.bigSearch || props.newSearch) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  async function handleFilter(e) {\r\n    await setSearch(handleString(e.target.value))\r\n    if (handleEffect()) {\r\n      props.handleState({\r\n        pageAdvance: 1,\r\n        loading: 'advance',\r\n        page: 1\r\n      })\r\n      props.handleSearchAdvance(handleString(e.target.value))\r\n    } else {\r\n      let filter = await state.list.filter(\r\n        data =>\r\n          data.toUpperCase().includes(\r\n            handleString(e.target.value)\r\n              .trim()\r\n              .toUpperCase()\r\n          ) ||\r\n          data.toLowerCase().includes(\r\n            handleString(e.target.value)\r\n              .trim()\r\n              .toLowerCase()\r\n          )\r\n      )\r\n      await setList(filter)\r\n    }\r\n  }\r\n  function handlecheck(name) {\r\n    // if (name) {\r\n    let result = ''\r\n    name = name ? handleString(name) : '-'\r\n    switch (name) {\r\n      case 'create':\r\n      case 'sign':\r\n      case 'update':\r\n        if (parentData.verified === '0') {\r\n          result = 'بسته شده'\r\n          break\r\n        }\r\n      case 'no':\r\n        result = 'ندارد'\r\n        break\r\n      case 'yes':\r\n        result = 'دارد'\r\n        break\r\n      case 'in':\r\n        result = 'وارده'\r\n        break\r\n      case 'out':\r\n        result = 'صادره'\r\n        break\r\n      case 'create':\r\n        result = 'ساخت'\r\n        break\r\n      case 'sign':\r\n        result = 'امضا'\r\n        break\r\n      case 'update':\r\n        result = 'ویرایش'\r\n        break\r\n      case 'close':\r\n        result = 'بسته شده'\r\n        break\r\n      case 'complete':\r\n        result = 'به اتمام رسیده'\r\n        break\r\n      default:\r\n        result = handleString(name)\r\n    }\r\n    return result\r\n  }\r\n  function handleClassName() {\r\n    switch (props.index) {\r\n      case 0:\r\n        return props.rtl ? 'end' : 'first'\r\n      case state.header.length - 1:\r\n        return !props.rtl ? 'end' : 'first'\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n  function CheckRow(name) {\r\n    if (state.header[props.index].check) {\r\n      if (name.length >= 4) {\r\n        return true\r\n      } else return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  function CheckFiltered() {\r\n    const list = state.list ? state.list : []\r\n    let i = 0\r\n    let result = false\r\n    while (i < list.length) {\r\n      let _value = list[i]\r\n      let name = `_header_${_value}__DARA__${parentData.value}`\r\n      result = state[name]\r\n      if (result) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return result\r\n  }\r\n  async function handleSubmit() {\r\n    const objFiltered = state.objFiltered ? state.objFiltered : {}\r\n    if (!state.loading) {\r\n      objFiltered[parentData.value] = await []\r\n      let _list = await objFiltered[parentData.value]\r\n      if (CheckFiltered()) {\r\n        await _list.push(parentData.value)\r\n      }\r\n      await props.handleSelect(objFiltered, 'objFiltered')\r\n      await props.handleActions(parentData)\r\n    }\r\n  }\r\n  function handleLoading() {\r\n    const result = state.loading === 'advance' && handleEffect()\r\n    return result\r\n  }\r\n  function Moredata() {\r\n    if (props.bigSearch) {\r\n      if (state.list.length < state.totalAdvance) {\r\n        page++\r\n        setPage(page)\r\n        setTimeout(async () => {\r\n          props.handleSelect(page, 'pageAdvance')\r\n          if (search !== '') {\r\n            props.handleSearchAdvance(search)\r\n          } else {\r\n            props._handleClick(props.index, parentData, true)\r\n          }\r\n        }, 100)\r\n      }\r\n    } else if (props.newSearch) {\r\n      if (!handleLoading()) {\r\n        let array = state.list\r\n        if (state.count > array.length) {\r\n          page++\r\n          setPage(page)\r\n          props.handleState('advancePage', page)\r\n          props.handleState('loading', 'advance')\r\n          setTimeout(() => {\r\n            props._handleClick(props.index, parentData, true)\r\n          }, 100)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function FullSelect() {\r\n    list.forEach(async data => {\r\n      let name = await `_header_${data}__DARA__${parentData.value}`\r\n      await props.handleSelect(!CheckFull(), name)\r\n    })\r\n  }\r\n  function CheckFull() {\r\n    let result = false\r\n    let i = 0\r\n    while (i < list.length) {\r\n      let data = list[i]\r\n      let name = `_header_${data}__DARA__${parentData.value}`\r\n      result = state[name] ? true : false\r\n      if (!result) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return result\r\n  }\r\n  function handleShowIcon() {\r\n    let i = 0,\r\n      array = []\r\n    while (i < list.length) {\r\n      let data = list[i]\r\n      let name = `_header_${data}__DARA__${parentData.value}`\r\n      let value = state[name] ? true : false\r\n      if (value) {\r\n        array.push(name)\r\n      }\r\n      i++\r\n    }\r\n    switch (array.length) {\r\n      case 0:\r\n        return <CheckBoxOutlineBlankRoundedIcon />\r\n      case list.length:\r\n        return <CheckBoxRoundedIcon />\r\n      default:\r\n        return <IndeterminateCheckBoxRoundedIcon />\r\n    }\r\n  }\r\n  const ShowMore = state.list.length < state.totalAdvance && handleEffect()\r\n  return (\r\n    <section\r\n      className={`box-customization ${handleClassName()} ${props ? 'mr-0' : 'ml-0'\r\n        }`}\r\n    >\r\n      <section className='search-box'>\r\n        <input\r\n          className={`${CheckPersianText(handleString(search)) ? 'text-right rtl' : 'text-left ltr'} IranSans_Medium_FA`}\r\n          placeholder='search...'\r\n          value={handleString(search)}\r\n          onChange={handleFilter}\r\n          onPaste={handleFilter}\r\n        />\r\n      </section>\r\n      <section className={`main-field-box position-relative`} ref={Elm}>\r\n        {list.length === 0 && !state.loading ? (\r\n          <span className='notFound'>موردی یافت نشد</span>\r\n        ) : (\r\n          <React.Fragment>\r\n            {!handleLoading() && list && list.length > 0 ? (\r\n              <section className='field-box mt-1 mb-1 _fixed'>\r\n                <label htmlFor='_full'>\r\n                  <input\r\n                    type='checkbox'\r\n                    className='d-none'\r\n                    onChange={FullSelect}\r\n                    id='_full'\r\n                  />\r\n                  {handleShowIcon()}\r\n                  <span>انتخاب همه</span>\r\n                </label>\r\n              </section>\r\n            ) : (\r\n              ''\r\n            )}\r\n            {list.map((data, key) =>\r\n              data !== '' && data && CheckRow(data) ? (\r\n                <section className='field-box mt-1 mb-1' key={key}>\r\n                  <label htmlFor={`${key}__${data}`}>\r\n                    {handleLoading() ? (\r\n                      ''\r\n                    ) : (\r\n                      <input\r\n                        type='checkbox'\r\n                        className='d-none'\r\n                        id={`${key}__${data}`}\r\n                        onChange={e => handleChange(e.target.checked, data)}\r\n                        checked={\r\n                          state[`_header_${data}__DARA__${parentData.value}`]\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    )}\r\n                    {state[`_header_${data}__DARA__${parentData.value}`] ? (\r\n                      <CheckBoxRoundedIcon />\r\n                    ) : (\r\n                      <CheckBoxOutlineBlankRoundedIcon />\r\n                    )}\r\n                    <span>{handleString(handlecheck(data))}</span>\r\n                  </label>\r\n                </section>\r\n              ) : (\r\n                ''\r\n              )\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n        {ShowMore || handleLoading() ? (\r\n          <section className='more-field-advance'>\r\n            <button\r\n              onClick={Moredata}\r\n              className={handleLoading() ? 'loading' : ''}\r\n            >\r\n              {handleLoading() ? (\r\n                <React.Fragment>\r\n                  <Loading className='form-loader advance ml-1' /> درحال\r\n                  بارگزاری اطلاعات\r\n                </React.Fragment>\r\n              ) : (\r\n                <MoreHorizIcon />\r\n              )}\r\n            </button>\r\n          </section>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </section>\r\n      <section className='submit-search rtl'>\r\n        <button onClick={handleSubmit} disabled={handleLoading()}>\r\n          اعمال\r\n        </button>\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\nexport default AdvanceSearch\r\n","E:\\bidboland\\src\\layout\\Events.js",[],"E:\\bidboland\\src\\layout\\MessagesNote.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\SetAccessLevels.js",["3123"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport AccessLevel from './AccessLevel'\r\n// import TabAccsess from \"./tabAccsess\";\r\nimport APIAccess from \"./API/APIAccess\";\r\nimport Tab from \"./tab\";\r\n// import handleCheckText from \"../../handleCheckText\";\r\nconst SetAccessLevels = props => {\r\n    // const { values, indexParent } = props\r\n    const [activeTab, setActiveTab] = useState(0)\r\n    const [ref, setRef] = useState({})\r\n    const [right, setRight] = useState(0)\r\n    const [width, setWidth] = useState(0)\r\n    const [totalCounter, setTotalCounter] = useState(0)\r\n    const [stateHook, setStateHook] = useState({})\r\n    const propsState = { stateHook, setStateHook, activeTab, setActiveTab, totalCounter, setTotalCounter, right, setRight, width, setWidth, ref, setRef, ...props }\r\n    const fns = new APIAccess(propsState)\r\n    const { handleElms } = fns\r\n    const tabElm = useRef()\r\n    const myProps = { tabElm, ...propsState, ...fns }\r\n    useEffect(() => handleElms('tab', tabElm), [tabElm])\r\n    const { state } = props\r\n    const { accessList } = state\r\n    return (\r\n        <div className='col-12'>\r\n            <div className='access'>\r\n                <div className='title-access'>\r\n                    <h3 className='text-title'>\r\n                        تعیین سطوح دسترسی\r\n                    </h3>\r\n                    <div className='line col pl-0'></div>\r\n                </div>\r\n                <div className='main-accsess'>\r\n                    <Tab {...myProps} />\r\n                    {accessList.map((data, key) =>\r\n                        activeTab === key &&\r\n                        <AccessLevel\r\n                            {...myProps}\r\n                            data={data}\r\n                            key={key}\r\n                            id={key}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SetAccessLevels","E:\\bidboland\\src\\createUser\\CreateUserGroup\\delete.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\add.js",[],"E:\\bidboland\\src\\Form\\CheckBox.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\partArea.js",[],"E:\\bidboland\\src\\Form\\Location.js",[],"E:\\bidboland\\src\\Form\\Radio.js",[],"E:\\bidboland\\src\\Form\\MultiSelect.js",[],"E:\\bidboland\\src\\Form\\Upload.js",[],"E:\\bidboland\\src\\Form\\Select.js",[],"E:\\bidboland\\src\\Form\\Default.js",[],"E:\\bidboland\\src\\Form\\TextArea.js",[],"E:\\bidboland\\src\\Form\\Date.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\ItemDoc.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\ItemOffice.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR10\\ItemProblem.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\CheckBox.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIAccessLevel.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\PurchaseRequest.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Sign\\ListSign.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Sign\\ItemSign.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR8\\InstructionsHead.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\Implemented.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\MultiAttachment.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Attachment\\Attachment.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\TextAreaWithRotateMulti.js",["3124"],"import React from 'react'\r\nimport handleCheckText from '../../../handleCheckText'\r\nimport handleString from '../../../handleString'\r\nconst TextAreaWithRotateMulti = props => {\r\n  const {\r\n    data,\r\n    text_rotate,\r\n    timeValue,\r\n    className,\r\n    // boxText,\r\n    label,\r\n    // time,\r\n    value,\r\n    status\r\n  } = props\r\n  // let text = handleString(data[value])\r\n  let _value = handleString(text_rotate)\r\n  // let { suggest_time } = data\r\n  let suggest_time = data[timeValue]\r\n  function ClassName() {\r\n    let classname = className || 'he35'\r\n    return classname\r\n  }\r\n  function handleParagraph(label, text) {\r\n    const check = handleCheckText(text)\r\n    if (check) {\r\n      return (\r\n        <p className='little-font mx-1'>\r\n          <span className='b'>{handleString(label)} :</span>\r\n          {` ${handleString(text)} `}\r\n        </p>\r\n      )\r\n    }\r\n    return ''\r\n  }\r\n  let { tech_result } = data\r\n  let result = status === 'accept' ? tech_result === '1' : tech_result === '0'\r\n  const list_check_result = [\r\n    { name: 'مهندسی فرآیند', value: `process_${value}` },\r\n    { name: 'مهندسی عمومی', value: `general_${value}` },\r\n    { name: 'بازرسی فنی', value: `inspection_${value}` },\r\n    { name: 'خدمات فنی', value: `tech_text` }\r\n  ]\r\n  const list_check_not_result = [\r\n    { name: 'مهندسی فرآیند', value: `process_${value}` },\r\n    { name: 'مهندسی عمومی', value: `general_${value}` },\r\n    { name: 'بازرسی فنی', value: `inspection_${value}` }\r\n  ]\r\n  const list_check = result ? list_check_result : list_check_not_result\r\n  const checkShow = () => {\r\n    let _result = false\r\n    let i = 0\r\n    while (i < list_check.length) {\r\n      const obj_check = list_check[i] || {}\r\n      let value_name = obj_check.value\r\n      const value = handleString(data[value_name])\r\n      _result = handleCheckText(value)\r\n      if (_result) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return _result\r\n  }\r\n  // const check_show = checkShow() && boxText\r\n  // const check_time = handleCheckText(suggest_time) && time\r\n  return (\r\n    <div className='conti position-relative flex-custome flex-wrap justify-content-start mx-2'>\r\n      <span className='conti_span'>{label}</span>\r\n      <table>\r\n        <tbody>\r\n          {/* {check_show && (\r\n                )} */}\r\n          <tr className={ClassName()}>\r\n            <td className='_base_line'>\r\n              {list_check.map(item_check =>\r\n                handleParagraph(item_check.name, data[item_check.value])\r\n              )}\r\n            </td>\r\n          </tr>\r\n          {/* {check_time && (\r\n              )} */}\r\n          {handleCheckText(props.laeblTime) &&\r\n            <tr>\r\n              <td\r\n                className='pt-1mm pb_1mm hsss b'\r\n                style={{ paddingRight: '4mm' }}\r\n              >\r\n                {props.laeblTime}:\r\n                <span className='value mr-2'>{suggest_time}</span>\r\n              </td>\r\n            </tr>\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {/* {check_show && (\r\n          )} */}\r\n      <div className='justify-content-end rotate_text_textarea white-space'>\r\n        <span className='value'>({_value})</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default TextAreaWithRotateMulti\r\n","E:\\bidboland\\src\\Print\\NewTSR\\TSR6\\ReviewResult.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\ItemInternal.js",[],"E:\\bidboland\\src\\tsrNew\\report\\lastStatusDiscipline\\index.js",["3125","3126"],"import { useEffect, useMemo, useState } from 'react'\r\nimport { BarChart } from '../../../Component/chart/barChart'\r\nimport { PieChart } from '../../../Component/chart/pieChart'\r\nimport { SituationBox } from '../../../Component/situation/box'\r\nimport { BoxChart } from '../boxChart'\r\nimport { get } from '../../../api'\r\nimport { Switch } from '../switch'\r\n\r\nexport const LastStatusDiscipline = ({ list }) => {\r\n  const [index, setIndex] = useState()\r\n  const [state, setState] = useState('barChart')\r\n\r\n  const [data, setData] = useState()\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [index])\r\n\r\n\r\n  const fetchData = async () => {\r\n    if (index) {\r\n      const lastStatus = await get(`tsrMg/getByDiscipline?discipline=${index}`)\r\n      setData(lastStatus)\r\n    }\r\n  }\r\n\r\n  const titleElm = useMemo(() => {\r\n    return (\r\n      <>\r\n        آخرین وضعیت TSR در گروه‌کاری مهندسی عمومی{' '}\r\n        <Switch setValue={setIndex} list={list} multi />\r\n      </>\r\n    )\r\n  }, [index, list])\r\n\r\n  const dataLastStatus = useMemo(() => {\r\n    if (data) {\r\n      const {\r\n        discipline_checkable,\r\n        discipline_checked,\r\n        discipline_finish,\r\n        discipline_checking\r\n      } = data\r\n      return [\r\n        {\r\n          value: discipline_checkable,\r\n          label: 'قابل بررسی-وروری',\r\n          color: '#33c9fe'\r\n        },\r\n        { value: discipline_checked, label: 'بررسی شده', color: '#5b85d9' },\r\n        { value: discipline_finish, label: 'به اتمام رسید', color: '#ffd600' },\r\n        {\r\n          value: discipline_checking,\r\n          label: 'دردست بررسی-درحال انجام',\r\n          color: '#0ee67b'\r\n        }\r\n      ]\r\n    }\r\n    return []\r\n  }, [data])\r\n  const filteredData = useMemo(() => {\r\n    return dataLastStatus.filter(d => d.label === 'دردست بررسی-درحال انجام' || d.label === 'بررسی شده')\r\n  }, [dataLastStatus])\r\n  return (\r\n    <div className='w-100 d-flex'>\r\n      <div style={{ width: 408 }}>\r\n        <SituationBox title={titleElm} data={dataLastStatus} />\r\n      </div>\r\n      <div className='col'>\r\n        <BoxChart\r\n          onClick={() =>\r\n            setState(s => (s === 'barChart' ? 'pieChart' : 'barChart'))\r\n          }\r\n          state={state}\r\n        >\r\n          {state === 'barChart' && <BarChart data={filteredData} />}\r\n          {state === 'pieChart' && <PieChart data={filteredData} />}\r\n        </BoxChart>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","E:\\bidboland\\src\\table\\API.js",[],"E:\\bidboland\\src\\api\\index.js",[],"E:\\bidboland\\src\\tsrNew\\report\\generalInfo\\index.js",[],"E:\\bidboland\\src\\tsrNew\\report\\lastStatusOffice\\index.js",["3127","3128"],"import { useEffect, useMemo, useState } from 'react'\r\nimport { SituationBox } from '../../../Component/situation/box'\r\nimport { Switch } from '../switch'\r\nimport { get } from '../../../api'\r\nimport { BoxChart } from '../boxChart'\r\nimport { BarChart } from '../../../Component/chart/barChart'\r\nimport { PieChart } from '../../../Component/chart/pieChart'\r\n\r\nexport function LastStatusOffice({ list }) {\r\n  const [index, setIndex] = useState()\r\n\r\n  const [data, setData] = useState()\r\n  const [state, setState] = useState('barChart')\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [index])\r\n\r\n  const fetchData = async () => {\r\n    if (index) {\r\n      const lastStatus = await get(`tsrMg/getByOffice?office=${index}`)\r\n      setData(lastStatus)\r\n    }\r\n  }\r\n\r\n  const titleElm = useMemo(() => {\r\n    return (\r\n      <>\r\n        آخرین وضعیت TSR در اداره <Switch setValue={setIndex} list={list} multi />\r\n      </>\r\n    )\r\n  }, [index, list])\r\n\r\n  const dataLastStatus = useMemo(() => {\r\n    if (data) {\r\n      const {\r\n        office_checkable,\r\n        office_reject,\r\n        office_finish,\r\n        office_checking\r\n      } = data\r\n      return [\r\n        {\r\n          value: office_checkable,\r\n          label: 'قابل بررسی-وروری',\r\n          color: '#33c9fe'\r\n        },\r\n        { value: office_reject, label: 'رد شده', color: '#f03a34' },\r\n        { value: office_finish, label: 'به اتمام رسید', color: '#ffd600' },\r\n        {\r\n          value: office_checking,\r\n          label: 'دردست بررسی-درحال انجام',\r\n          color: '#0ee67b'\r\n        }\r\n      ]\r\n    }\r\n    return []\r\n  }, [data])\r\n  const dataFiltered = useMemo(() => {\r\n    return dataLastStatus.filter(d => d.label !== 'قابل بررسی-وروری')\r\n  }, [dataLastStatus])\r\n  return (\r\n    <div className='w-100 d-flex'>\r\n      <div style={{ width: 408 }}>\r\n        <SituationBox title={titleElm} data={dataLastStatus} />\r\n      </div>\r\n      <div className='col'>\r\n        <BoxChart\r\n          onClick={() =>\r\n            setState(s => (s === 'barChart' ? 'pieChart' : 'barChart'))\r\n          }\r\n          state={state}\r\n        >\r\n          {state === 'barChart' && <BarChart data={dataFiltered} />}\r\n          {state === 'pieChart' && <PieChart data={dataFiltered} />}\r\n        </BoxChart>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\report\\lastStatusForm\\index.js",["3129","3130"],"import { useEffect, useMemo, useState } from 'react'\r\nimport { SituationBox } from '../../../Component/situation/box'\r\nimport { Switch } from '../switch'\r\nimport { get } from '../../../api'\r\nimport { BoxChart } from '../boxChart'\r\nimport { BarChart } from '../../../Component/chart/barChart'\r\nimport { PieChart } from '../../../Component/chart/pieChart'\r\n\r\nexport function LastStatusForm({ list }) {\r\n  const [index, setIndex] = useState()\r\n  const [state, setState] = useState('barChart')\r\n\r\n  const [data, setData] = useState()\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [index])\r\n\r\n  const fetchData = async () => {\r\n    if(index){\r\n      const lastStatus = await get(`tsrMg/getByForm?form=${index}`)\r\n      setData(lastStatus)\r\n    }\r\n  }\r\n\r\n  const titleElm = useMemo(() => {\r\n    return (\r\n      <>\r\n        آخرین وضعیت TSR در <Switch setValue={setIndex} list={list}/>\r\n      </>\r\n    )\r\n  }, [index, list])\r\n\r\n  const dataLastStatus = useMemo(() => {\r\n    if (data) {\r\n      const {\r\n        form_checkable,\r\n        form_reject,\r\n        form_checking,\r\n        form_accept,\r\n        form_performance,\r\n        form_remainder\r\n      } = data\r\n      return [\r\n        { value: form_checkable, label: 'قابل بررسی-وروری', color: '#33c9fe' },\r\n        { value: form_reject, label: 'رد شده', color: '#f03a34' },\r\n        {\r\n          value: form_checking,\r\n          label: 'در دست بررسی-درحال انجام',\r\n          color: '#ffd600'\r\n        },\r\n        { value: form_accept, label: 'تایید شده', color: '#0ee67b' },\r\n        {\r\n          value: form_performance + '%',\r\n          label: 'درصد عملکرد',\r\n          color: '#405d80'\r\n        },\r\n        {\r\n          value: form_remainder + '%',\r\n          label: 'درصد باقی‌مانده',\r\n          color: '#5b85d9'\r\n        }\r\n      ]\r\n    }\r\n    return []\r\n  }, [data])\r\n  const filteredData = useMemo(\r\n    () =>\r\n      dataLastStatus.filter(\r\n        d => d.label !== 'درصد باقی‌مانده' && d.label !== 'درصد عملکرد' && d.label !== 'قابل بررسی-وروری'\r\n      ),\r\n    [dataLastStatus]\r\n  )\r\n  return (\r\n    <div className='w-100 d-flex'>\r\n      <div style={{width : 408}}>\r\n      <SituationBox title={titleElm} data={dataLastStatus} />\r\n      </div>\r\n      <div className='col'>\r\n        <BoxChart\r\n          onClick={() =>\r\n            setState(s => (s === 'barChart' ? 'pieChart' : 'barChart'))\r\n          }\r\n          state={state}\r\n        >\r\n          {state === 'barChart' && <BarChart data={filteredData} />}\r\n          {state === 'pieChart' && <PieChart data={filteredData} />}\r\n        </BoxChart>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","E:\\bidboland\\src\\ARP\\outputCorrective.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\tab.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIAccess.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\AccessLevel.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR9\\ImplementedItem.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\Attachment\\ItemAttach.js",[],"E:\\bidboland\\src\\tsrNew\\report\\switch.js",[],"E:\\bidboland\\src\\tsrNew\\report\\boxChart.js",[],"E:\\bidboland\\src\\Component\\situation\\box.js",[],"E:\\bidboland\\src\\Component\\chart\\pieChart.js",["3131"],"import React, { useLayoutEffect, useRef } from 'react'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\n\r\nconst PieChart = ({ data }) => {\r\n  const chartRef = useRef(null)\r\n  const id = `pie-${Math.random()}`\r\n  useLayoutEffect(() => {\r\n    let chart = am4core.create(id, am4charts.PieChart)\r\n\r\n    chart.logo.disabled = true\r\n\r\n    chart.data = data\r\n\r\n    // Create Pie Series\r\n    let pieSeries = chart.series.push(new am4charts.PieSeries())\r\n    pieSeries.dataFields.value = 'value'\r\n    pieSeries.dataFields.category = 'label'\r\n    pieSeries.slices.template.propertyFields.fill = 'color' // Assign colors\r\n\r\n    pieSeries.tooltip.disabled = false\r\n    pieSeries.tooltip.label.textAlign = 'middle'\r\n    pieSeries.labels.template.textAlign = 'middle'\r\n\r\n    // Animation\r\n    pieSeries.hiddenState.properties.opacity = 1\r\n    pieSeries.hiddenState.properties.endAngle = -90\r\n    pieSeries.hiddenState.properties.startAngle = -90\r\n\r\n    chartRef.current = chart\r\n\r\n    return () => {\r\n      chart.dispose()\r\n    }\r\n  }, [data])\r\n\r\n  return <div id={id} style={{ width: '100%' }} />\r\n}\r\n\r\n// Named Export\r\nexport { PieChart }\r\n","E:\\bidboland\\src\\Component\\chart\\barChart.js",["3132","3133"],"import React, { useEffect, useRef } from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nexport const BarChart = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const id = `chart-${Math.random().toString(36).substr(2, 9)}`; // Unique ID\r\n\r\n  useEffect(() => {\r\n    am4core.useTheme(am4themes_animated);\r\n\r\n    let chart = am4core.create(id, am4charts.XYChart);\r\n    chartRef.current = chart;\r\n\r\n    chart.data = data;\r\n\r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = \"label\";\r\n\r\n\r\n    categoryAxis.renderer.labels._template.textAlign = 'middle'\r\n    categoryAxis.renderer.grid.template.location = 0;\r\n\r\n    categoryAxis.renderer.cellStartLocation = 0.2;\r\n    categoryAxis.renderer.cellEndLocation = 0.8;\r\n\r\n    categoryAxis.renderer.labels.template.fontSize = 9;\r\n    categoryAxis.renderer.labels.template.truncate = false;\r\n    categoryAxis.renderer.labels.template.wrap = true;\r\n\r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n\r\n    let series = chart.series.push(new am4charts.ColumnSeries());\r\n    series.dataFields.valueY = \"value\";\r\n    series.dataFields.categoryX = \"label\";\r\n\r\n    series.columns.template.propertyFields.fill = \"color\";\r\n\r\n    series.columns.template.width = am4core.percent(50);\r\n\r\n    chart.logo.disabled = true;\r\n\r\n    return () => {\r\n      chart.dispose();\r\n    };\r\n  }, [data]);\r\n\r\n  return <div id={id} style={{ width: \"100%\", height: \"100%\" }}></div>;\r\n};\r\n","E:\\bidboland\\src\\createUser\\CreateUserGroup\\tabAccsess.js",["3134"],"import React, { useRef, useEffect } from \"react\";\r\nconst TabAccsess = props => {\r\n    const { handleElms, tab, index, handleActive, activeTab } = props\r\n    const elm = useRef()\r\n    const name = `label_${index}`\r\n    useEffect(()=>handleElms(name , elm) , [elm])\r\n    return (\r\n        <span\r\n            ref={elm}\r\n            key={index}\r\n            className={`col-3 px-0 label fix_width ${activeTab === index ? 'active IranSans_Bold' : ''}`}\r\n            onClick={() => handleActive(index)}\r\n        >\r\n            {tab.label}\r\n        </span>\r\n    )\r\n}\r\nexport default TabAccsess","E:\\bidboland\\src\\createUser\\CreateUserGroup\\subField.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\selectAll.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\Fields.js",[],"E:\\bidboland\\src\\CheckDownload.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\DocumentInternal.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\toogleBtn.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\nameFields.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APIFields.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\BoxResultDocument.js",[],"E:\\bidboland\\src\\tsrNew\\index\\DraftListAction.js",[],"E:\\bidboland\\src\\tsrNew\\index\\DeterminantStatus.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\ShowItems.js",[],"E:\\bidboland\\src\\tsrNew\\index\\FetchApi.js",[],"E:\\bidboland\\src\\table\\HeaderTable.js",[],"E:\\bidboland\\src\\table\\BodyTable.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\ListTab.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\API.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\TypeRecovery.js",["3135"],"import React, { Fragment, useEffect } from 'react'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport ListRecovery from './listRecovery'\r\nconst TypeRecovery = props => {\r\n  useEffect(() => {\r\n    let { canUpdate } = props.props\r\n    if (props.handleDisabled() || canUpdate) {\r\n      TrueCheck()\r\n    }\r\n  }, [])\r\n  function TrueCheck () {\r\n    let improvement_type = props.state.improvement_type || ''\r\n    let _list = improvement_type.split(' , ')\r\n    _list.forEach(_value => {\r\n      let _data = `_improvement_${_value}`\r\n      props.handleState({ [_data]: true })\r\n    })\r\n  }\r\n  function handleCheck (e) {\r\n    const { name, checked } = e.target\r\n    props.handleState({ [name]: checked })\r\n  }\r\n  const _array = ListRecovery.list\r\n  return (\r\n    <Fragment>\r\n      <div className='title-password col-12 mt-3 mb-2'>\r\n        <h2 className='IranSans_Bold'>نوع بهبود</h2>\r\n        <div className='line'></div>\r\n      </div>\r\n      {_array.map((data, key) => (\r\n        <div\r\n          className='disiplin-checkbox col-xl-6 col-lg-6 col-md-4 col-6 w-auto mt-3 mb-3'\r\n          key={key}\r\n        >\r\n          <div className='checkbox m-0'>\r\n            {!props.handleDisabled() && (\r\n              <input\r\n                className='d-none'\r\n                id={`_improvement_${data.value}`}\r\n                name={`_improvement_${data.value}`}\r\n                type='checkbox'\r\n                onChange={handleCheck}\r\n                checked={\r\n                  props.state[`_improvement_${data.value}`] ? true : false\r\n                }\r\n              />\r\n            )}\r\n            <label\r\n              className={`full ${props.handleDisabled() ? 'disabled' : ''}`}\r\n              htmlFor={`_improvement_${data.value}`}\r\n            >\r\n              {props.state[`_improvement_${data.value}`] ? (\r\n                <CheckBoxRoundedIcon />\r\n              ) : (\r\n                <CheckBoxOutlineBlankRoundedIcon />\r\n              )}\r\n              {data.label}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </Fragment>\r\n  )\r\n}\r\nexport default TypeRecovery\r\n","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Foreign.js",[],"E:\\bidboland\\src\\tsrNew\\TOCC.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR11\\TypeDocuments.js",[],"E:\\bidboland\\src\\tsrNew\\sign\\Sign.js",[],"E:\\bidboland\\src\\layout\\SideOpen.js",[],"E:\\bidboland\\src\\layout\\SideClose.js",[],"E:\\bidboland\\src\\notification\\NotificationCotainer.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\Category.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\UnitOffice.js",[],"E:\\bidboland\\src\\createUser\\CreateUserGroup\\SecondBox.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\UnitOffice.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\Category.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\SecondBox.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\access.js",["3136"],"import React, { useState, useEffect } from \"react\";\r\nimport APIAccessLevel from \"./API/APIAccessLevel\";\r\nimport PartArea from './partArea'\r\nimport SetAccessLevels from \"./SetAccessLevels\";\r\nimport ADD from \"./add\";\r\nimport Delete from \"./delete\";\r\nimport Submit from './Submit'\r\nconst Access = props => {\r\n    const [values, setValues] = useState([])\r\n    const [counter, setCounter] = useState(1)\r\n    const [listSelected, setListSelected] = useState([])\r\n    const propsState = { ...props, values, setValues, counter, setCounter, listSelected, setListSelected }\r\n    const fns = new APIAccessLevel(propsState)\r\n    const { ValuesCategory } = fns\r\n    const myProps = { ...propsState, ...fns }\r\n    const { state } = myProps\r\n    const { category_list, permission } = state\r\n    const list = category_list || []\r\n    const checkAdd = list.length > 0 && counter < list.length\r\n    useEffect(ValuesCategory, [permission?.length])\r\n    return (\r\n        <div className=\"w-100\">\r\n            {list.map((cat, index) =>\r\n                index < counter &&\r\n                <div className=\"w-100\" key={cat.value}>\r\n                    <PartArea\r\n                        cat={cat}\r\n                        index={index}\r\n                        {...myProps}\r\n                        value={values[index]}\r\n                    />\r\n                    <SetAccessLevels {...myProps} indexParent={index} />\r\n                    <Delete {...myProps} index={index} />\r\n                </div>\r\n            )}\r\n            {checkAdd && < ADD {...myProps} />}\r\n            <Submit {...myProps} />\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Access","E:\\bidboland\\src\\createUser\\CreateUserGroup\\API\\APICreate.js",[],"E:\\bidboland\\src\\Print\\TSR\\page8.js",[],"E:\\bidboland\\src\\Print\\TSR\\page6.js",[],"E:\\bidboland\\src\\Print\\TSR\\page9.js",[],"E:\\bidboland\\src\\Print\\TSR\\page7.js",[],"E:\\bidboland\\src\\Print\\TSR\\page5.js",[],"E:\\bidboland\\src\\Print\\TSR\\page4.js",[],"E:\\bidboland\\src\\Print\\TSR\\page2.js",[],"E:\\bidboland\\src\\Print\\TSR\\page3.js",[],"E:\\bidboland\\src\\Print\\TSR\\page1.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIEdit.js",[],"E:\\bidboland\\src\\Print\\ARP\\Form_3.js",[],"E:\\bidboland\\src\\Print\\ARP\\Form_1.js",[],"E:\\bidboland\\src\\Print\\ARP\\Form_4.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\DeleteEmail.js",[],"E:\\bidboland\\src\\Print\\ARP\\Form_2.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\Drafts.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\AddEmail.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\HeaderItem.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\StaticList.js",[],"E:\\bidboland\\src\\table\\ItemBody.js",[],"E:\\bidboland\\src\\table\\LoadingTable.js",[],"E:\\bidboland\\src\\table\\ItemHeader.js",["3137","3138"],"import React, { useRef, useEffect } from 'react'\r\nimport handleString from '../handleString'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nconst ItemHeader = props => {\r\n  let data = props.data || {}\r\n  let index = props._key\r\n  let { open_header } = props.state\r\n  const { value } = data\r\n  let name_state = `${value}_sort`\r\n  const Elm = useRef()\r\n  useEffect(() => {\r\n    handleRefs()\r\n  }, [])\r\n  function handleRefs() {\r\n    let name = `_header_${index}`\r\n    props.handleRefs(name, Elm.current)\r\n  }\r\n  function handleClick() {\r\n    props.handleState({\r\n      loading: 'advance'\r\n    })\r\n    props._handleClick(index, data)\r\n  }\r\n  // function handleSort() {\r\n  // const { row } = props.state\r\n  // props.handleState({\r\n  // loading: 'table',\r\n  // })\r\n  // let check = props.state[name_state] ? true : false\r\n  // alert(check)\r\n  // let result_array = [...row].sort((a, b) =>\r\n  // a[value] > b[value] ? 1 : -1,\r\n  // );\r\n  // props.handleState({\r\n  // loading: '',\r\n  // row: result_array,\r\n  // [name_state]: !check\r\n  // })\r\n  // }\r\n  const class_name = () => `${props.handleFilter(data.name)} ${handleString(data.class_name)}`\r\n  return (\r\n    <th key={index} className={class_name().trim()} ref={Elm}>\r\n      <span className='head-click'>\r\n        <span onClick={handleClick}>\r\n          {handleString(data.name)}\r\n        </span>\r\n        <span className='filter d-inline-block'\r\n        // onClick={handleSort}\r\n        >\r\n          <img src='img/Sort_Icon.svg' alt='filter' />\r\n        </span>\r\n      </span>\r\n      {open_header === index && (\r\n        <AdvanceSearch\r\n          index={index}\r\n          data={data}\r\n          {...props}\r\n          rtl={props.rtl ? true : false}\r\n          handleSelect={(checked, name) =>\r\n            props.handleState({ [name]: checked })\r\n          }\r\n          bigSearch={true}\r\n        />\r\n      )}\r\n    </th>\r\n  )\r\n}\r\nexport default ItemHeader\r\n","E:\\bidboland\\src\\Tools\\E-mail\\header.js",[],"E:\\bidboland\\src\\Tools\\TaskManagement\\SideTask.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\ItemForeign.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\InBox.js",[],"E:\\bidboland\\src\\tsrNew\\tsr1\\listRecovery.js",[],"E:\\bidboland\\src\\tsrNew\\sign\\Rejected.js",[],"E:\\bidboland\\src\\tsrNew\\sign\\Accepted.js",[],"E:\\bidboland\\src\\tsrNew\\sign\\DefaultStatus.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR5\\TSR5.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR4\\TSR4.js",[],"E:\\bidboland\\src\\Tools\\Chat\\UserProfile.js",[],"E:\\bidboland\\src\\Tools\\Chat\\ContactsList.js",[],"E:\\bidboland\\src\\Tools\\Chat\\BoxChat.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\API\\API.js",["3139","3140"],"import Notification from '../../../notification/notification'\r\nimport Message from '../../../notification/Message'\r\nimport StaticData from '../../../staticData'\r\nimport handleCheckText from '../../../handleCheckText'\r\nimport handleString from '../../../handleString'\r\nimport axios from 'axios'\r\nimport ListRecovery from '../../../tsrNew/tsr1/listRecovery'\r\n// import StaticList from '../../../tsrNew/TSR9/StaticList'\r\nimport StaticList from '../../../tsrNew/TSR10/StaticList'\r\nimport ListTab from '../../../tsrNew/TSR7/ListTab'\r\nimport CheckDownload from '../../../CheckDownload'\r\nimport moment from 'moment-jalaali'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  handleResponsible = (array) => {\r\n    let result = []\r\n    if (array.length === 0) result = [{ user_unit: '', value: '', user_role: '' }]\r\n    else result = array\r\n    return result\r\n  }\r\n  handleSeparation = (num, data) => {\r\n    let name = `tsr${num}_`\r\n    let result = {}\r\n    for (let value in data) {\r\n      if (value.includes(name)) {\r\n        let final_value = value.replace(name, '')\r\n        let _nameRebuild = final_value\r\n        const check_tsr2 = _nameRebuild === 'responsible' || _nameRebuild === 'experts'\r\n        if (final_value.includes('foreign_attachment')) result[_nameRebuild] = this.handleForeignLink(data[value] || [])\r\n        else if (final_value.includes('internal_attachment')) result[_nameRebuild] = this.handleLinkInternal(data[value] || [])\r\n        else if (check_tsr2) result[_nameRebuild] = this.handleResponsible(data[value] || [])\r\n        else result[_nameRebuild] = data[value]\r\n      }\r\n    }\r\n    let obj = { [`tsr${num}`]: result }\r\n    return obj\r\n  }\r\n  handleLinkInternal = (array) => {\r\n    let result = Object.keys(array).map(item => {\r\n      let obj = array[item] || {}\r\n      let url,\r\n        _check = false\r\n      const { transmitallNumber, documentNumber, revision } = obj\r\n      if (handleCheckText(transmitallNumber) && handleCheckText(documentNumber) && handleCheckText(revision)) {\r\n        let baseUrl = `${StaticData.link_file}/upload/dcc/Engineering/Documents/${handleString(transmitallNumber)}`\r\n        let pdf = `${`${handleString(documentNumber)}_${handleString(revision)}`}.pdf`\r\n        let _PDF = `${`${handleString(documentNumber)}_${handleString(revision)}`}.PDF`\r\n        if (CheckDownload(`${baseUrl}/${pdf}`)) {\r\n          url = `${baseUrl}/${pdf}`\r\n          _check = true\r\n        } else if (CheckDownload(`${baseUrl}/${_PDF}`)) {\r\n          url = `${baseUrl}/${_PDF}`\r\n          _check = true\r\n        }\r\n      }\r\n      obj['check'] = _check\r\n      obj['url'] = url\r\n      return obj\r\n    })\r\n    return result\r\n  }\r\n  FoundSelect = (edit_form, _obj) => {\r\n    let num = parseInt(edit_form) || 1\r\n    let checkLarger = num > 12\r\n    if (checkLarger) {\r\n      let { number } = this.SplitNum(num)\r\n      num = number\r\n      // _obj[`tab_edit_${number}`] = tab\r\n    }\r\n    return num\r\n  }\r\n  handleSetSelect = (data, _obj) => {\r\n    let { tsr1_edit, tsr1_page, tsr1_edit_form } = data\r\n    const check = tsr1_edit === '1'\r\n    let select = check\r\n      ? this.FoundSelect(tsr1_edit_form, _obj)\r\n      : parseInt(tsr1_page)\r\n    return select\r\n  }\r\n  fetchDataAPI = async () => {\r\n    const { state, handleState } = this.data\r\n    let { token, id } = state\r\n    let url = `${StaticData.domainIp}/tsr_v1/get/${id}`\r\n    await axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        handleState({ loading: '' })\r\n        if (response.status === 200) {\r\n          const { content, role } = response.data\r\n          const { data } = content\r\n          let _obj = {}\r\n          let _select = this.handleSetSelect(data, _obj)\r\n          for (let i = 1; i < 13; i++) {\r\n            _obj = await { ..._obj, ...this.handleSeparation(i, data) }\r\n          }\r\n          _obj['page'] = await parseInt(data.tsr1_page)\r\n          _obj['role'] = await role\r\n          _obj['level'] = await _select\r\n          _obj['tsr_no'] = await _obj.tsr1.tsr_no\r\n          _obj['created_at_date'] = await _obj.tsr1.created_at_date\r\n          _obj['subject'] = await _obj.tsr1.subject\r\n          _obj['applicant_unit'] = await _obj.tsr1.applicant_unit\r\n          _obj['firstLoading'] = false\r\n          await handleState(_obj)\r\n        } else {\r\n          handleState({ firstLoading: false })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '', firstLoading: false })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleClassName = str => {\r\n    let text = handleString(str)\r\n    let p = /^[\\u0600-\\u06FF\\s]+$/\r\n    const check = p.test(text)\r\n    let className = `${check ? 'rtl' : 'ltr'} text-center`\r\n    return className\r\n  }\r\n  handleChekboxSelected = (value, delimiter = ' , ') => {\r\n    let { state } = this.data\r\n    let tsr2 = state.tsr2 || {}\r\n    let totalText = handleString(tsr2.reject_reasons)\r\n    let array = totalText.split(delimiter)\r\n    const check = array.includes(value)\r\n    return check\r\n  }\r\n  handleCheckboxImprovement = value => {\r\n    let { state } = this.data\r\n    let tsr1 = state.tsr1 || {}\r\n    let totalText = handleString(tsr1.improvement_type)\r\n    let array = totalText.split(' , ')\r\n    const check = array.includes(value)\r\n    return check\r\n  }\r\n  handleCheckOther = array => {\r\n    let arrayValue = Object.keys(array).map(row => {\r\n      let obj = array[row]\r\n      return obj.value\r\n    })\r\n    let list2 = ListRecovery.list\r\n    let filter = list2.filter(item => arrayValue.includes(item.value))\r\n    let state1 = filter.length === 0 && array.length > 0\r\n    let state2 = arrayValue.includes('سایر موارد')\r\n    const { state } = this.data\r\n    const tsr2 = state.tsr2 || {}\r\n    const { issued_status } = tsr2\r\n    const check1 = issued_status === '0'\r\n    const check2 = state1 || state2\r\n    const result = check1 && check2\r\n    return result\r\n  }\r\n  DocumentaArray = (foreign, internal) => {\r\n    const _foreign = foreign ? this.handleCheckEmptyForeign(foreign) : [],\r\n      _internal = internal ? this.handleCheckEmptyInternal(internal) : []\r\n    const merge = _foreign.concat(_internal)\r\n    const result = this.handleFinalFilter(merge)\r\n    return result\r\n  }\r\n  handleCheckItemFinal = (data) => {\r\n    const { documentNumber, degreeTitle, numberPages, descriptionAttachment, Attachement, AttachementName } = data\r\n    let list = Attachement || []\r\n    let list_name = AttachementName || []\r\n    const state1 = handleCheckText(documentNumber) || handleCheckText(degreeTitle) || handleCheckText(numberPages) || handleCheckText(descriptionAttachment)\r\n    const state2 = list.length > 0 && list_name.length > 0 && list_name.length === list.length\r\n    const result = state1 || state2\r\n    return result\r\n  }\r\n  handleFinalFilter = (list) => {\r\n    let result = list.filter(data => this.handleCheckItemFinal(data))\r\n    if (result.length === 0) result = [{ documentNumber: '', degreeTitle: '', numberPages: '', descriptionAttachment: '' }]\r\n    return result\r\n  }\r\n  handleCheckEmptyForeign = foreign => {\r\n    let list = Object.keys(foreign).map(value => {\r\n      foreign[value]['Attachement'] = foreign[value]['Attachement']\r\n        ? Object.keys(foreign[value]['Attachement']).map(att => {\r\n          return foreign[value]['Attachement'][att]\r\n        })\r\n        : []\r\n      return foreign[value]\r\n    })\r\n    list = list.filter(\r\n      data =>\r\n        handleCheckText(data.documentNumber) ||\r\n        handleCheckText(data.degreeTitle) ||\r\n        handleCheckText(data.numberPages) ||\r\n        handleCheckText(data.descriptionAttachment) ||\r\n        data.Attachement.length > 0\r\n    )\r\n    return list\r\n  }\r\n  handleCheckEmptyInternal = internal => {\r\n    let list = Object.keys(internal).map(value => {\r\n      return internal[value]\r\n    })\r\n    list = list.filter(\r\n      data =>\r\n        handleCheckText(data.documentNumber) ||\r\n        handleCheckText(data.degreeTitle) ||\r\n        handleCheckText(data.numberPages) ||\r\n        handleCheckText(data.descriptionAttachment)\r\n    )\r\n    return list\r\n  }\r\n  handleShowNameDoc = (data) => {\r\n    const { degreeTitle, AttachementName, url } = data\r\n    let attachName_list = AttachementName || []\r\n    let name = attachName_list[0]\r\n    let result = '-'\r\n    if (handleCheckText(degreeTitle)) result = handleString(degreeTitle)\r\n    else if (handleCheckText(name)) result = handleString(name)\r\n    else result = handleString(url)\r\n    return result\r\n  }\r\n  DocumnentShow = data => {\r\n    const array = []\r\n    const { degreeTitle, check, Attachement } = data\r\n    let list_attachement = Attachement || []\r\n    const url = list_attachement[0]\r\n    const final_check = check && url !== '#' && handleCheckText(url)\r\n    if (final_check) {\r\n      array.push(\r\n        <a\r\n          href={`/${url}`}\r\n          target='_blank'\r\n          rel={`noreferrer`}\r\n          className='link-document'\r\n        >\r\n          {this.handleShowNameDoc(data)}\r\n        </a>\r\n      )\r\n    } else {\r\n      array.push(<span className='value'>{handleString(degreeTitle)}</span>)\r\n    }\r\n    return array\r\n  }\r\n  UniqList = array => {\r\n    const unique = Array.from(new Set(array.map(a => a.value))).map(value => {\r\n      return array.find(a => a.value === value)\r\n    })\r\n    return unique\r\n  }\r\n  handleConvertDateImplemented = (list) => {\r\n    const result = Object.keys(list).map(item => {\r\n      let obj = list[item] || {}\r\n      const { dateIssuanceInstructions } = obj\r\n      let new_date = handleString(dateIssuanceInstructions)\r\n      let array_date = new_date.split('-')\r\n      let date = array_date[1]\r\n      obj['dateIssuanceInstructions'] = date\r\n      return obj\r\n    })\r\n    return result\r\n  }\r\n  handleListImplemented = (name, data) => {\r\n    const instruction_name = `${name}_instruction`\r\n    const list = data[instruction_name] || []\r\n    const result = this.handleConvertDateImplemented(list)\r\n    return result\r\n  }\r\n  PRItemShow = array => {\r\n    let i = 0,\r\n      result = false\r\n    while (i < array.length) {\r\n      let obj_array = array[i] || {}\r\n      const { date, description, number } = obj_array\r\n      result =\r\n        handleCheckText(date) ||\r\n        handleCheckText(description) ||\r\n        handleCheckText(number)\r\n      if (result) break\r\n      i++\r\n    }\r\n    return result\r\n  }\r\n  PRCheck = (value) => {\r\n    const { state } = this.data\r\n    const data8 = state.tsr8 || {}\r\n    const list = data8[`${value}_purchase_request`] || []\r\n    const check = this.PRItemShow(list)\r\n    return check\r\n  }\r\n  handleAddFollowUp = (array, name) => {\r\n    let result = Object.keys(array).map(item => {\r\n      let obj_item = array[item] || {}\r\n      const { followUp } = obj_item\r\n      const result_fl = `${followUp} - ${name}`\r\n      obj_item.followUp = result_fl\r\n      return obj_item\r\n    })\r\n    return result\r\n  }\r\n  handleFilterPr = array => {\r\n    let filter = array.filter(\r\n      value =>\r\n        handleCheckText(value.actionDate) || handleCheckText(value.description)\r\n    )\r\n    if (filter.length === 0) filter = [{ description: '', followUp: '', actionDate: '', confirmation: 'false' }]\r\n    return filter\r\n  }\r\n  handleMergeListProblem = () => {\r\n    const { state } = this.data\r\n    const data10 = state.tsr10 || {}\r\n    const listTab = StaticList.listTab || []\r\n    let result = []\r\n    listTab.forEach(item => {\r\n      let nameState = `${item.value}_executed_problems`\r\n      let list = data10[nameState] || []\r\n      const final_list = this.handleAddFollowUp(list, item.label)\r\n      result = result.concat(final_list)\r\n    })\r\n    const final_list = this.handleFilterPr(result)\r\n    return final_list\r\n  }\r\n  handleFilterCheck8 = (data) => {\r\n    const { state } = this.data\r\n    const parentState = state.tsr8 || {}\r\n    const state1 = handleCheckText(parentState[`${data.value}_instruction_description`])\r\n    const state2 = parentState[`${data.value}_is_dispatch`] === '1'\r\n    const check = state1 || state2\r\n    return check\r\n  }\r\n  handleCheckShow8 = (list) => {\r\n    const filter1 = list.filter(data => this.handleFilterCheck8(data))\r\n    const filter2 = list.filter((data, key) => data && key === 0)\r\n    const final = filter1.length > 0 ? filter1 : filter2\r\n    return final\r\n  }\r\n  handleCheckFilter11 = (data) => {\r\n    const { documentNumber, title, editNumber, Attachement } = data\r\n    const state1 = Attachement.length > 0\r\n    const state2 = handleCheckText(documentNumber) || handleCheckText(title) | handleCheckText(editNumber)\r\n    const result = state1 || state2\r\n    return result\r\n  }\r\n  handleFilter11 = (array) => {\r\n    let result = array.filter(data => this.handleCheckFilter11(data))\r\n    if (result.length === 0) result = [{ attachment: [], attachementName: [], title: '', editNumber: '', documentNumber: '' }]\r\n    return result\r\n  }\r\n  handleShowNameDoc11 = (link, counterLink, data) => {\r\n    const { documentNumber, attachementName } = data\r\n    let attachName_list = attachementName || []\r\n    let name = attachName_list[counterLink]\r\n    let result = '-'\r\n    if (handleCheckText(documentNumber)) {\r\n      result = handleString(documentNumber)\r\n    } else if (handleCheckText(name)) {\r\n      result = handleString(name)\r\n    } else {\r\n      result = handleString(link)\r\n    }\r\n    return result\r\n  }\r\n  DocumnentShow11 = (data) => {\r\n    const { attachment, documentNumber, attachmentName } = data\r\n    let attach_list = attachment || []\r\n    let attach_name = attachmentName || []\r\n    const check = attach_list.length > 0\r\n    const array = []\r\n    if (check) {\r\n      array.push(\r\n        attachment.map((link, counterLink) => (\r\n          <a\r\n            key={counterLink}\r\n            href={this.handleCheckLinkFr(link, attach_name[counterLink])}\r\n            target='_blank'\r\n            rel={`noreferrer`}\r\n            className='link-document'\r\n          >\r\n            {this.handleShowNameDoc11(link, counterLink, data)}\r\n          </a>\r\n        ))\r\n      )\r\n    } else {\r\n      array.push(<span className='value'>{handleString(documentNumber)}</span>)\r\n    }\r\n    return array\r\n  }\r\n  FilterOffice11 = (array) => {\r\n    let filter = array.filter(data => handleCheckText(data.officeName) || handleCheckText(data.number))\r\n    if (filter.length === 0) filter = [{ officeName: '', number: '' }]\r\n    return filter\r\n  }\r\n  handleFiltershow7 = (data) => {\r\n    const { state } = this.data\r\n    const dataState = state.tsr7 || {}\r\n    let name_text = `${data.value}_instruction`\r\n    let text = dataState[name_text]\r\n    let firstName = `${data.value}_dispatch_firstName`\r\n    let lastName = `${data.value}_dispatch_lastName`\r\n    let fname = dataState[firstName]\r\n    let lname = dataState[lastName]\r\n    const state1 = handleCheckText(fname) && handleCheckText(lname)\r\n    const state2 = handleCheckText(text)\r\n    const result = state1 || state2\r\n    return result\r\n  }\r\n  handlecheShow7 = () => {\r\n    const tab_array = ListTab.List || []\r\n    const filter1 = tab_array.filter(data => this.handleFiltershow7(data))\r\n    const filter2 = tab_array.filter((data, key) => data && key === 0)\r\n    const final = filter1.length > 0 ? filter1 : filter2\r\n    return final\r\n  }\r\n  handleCheckLinkFr = (link, name) => {\r\n    let result,\r\n      final_url = '#'\r\n    if (handleCheckText(link)) {\r\n      const ch_full = link.includes('http://')\r\n      if (ch_full) {\r\n        final_url = `${link}`\r\n      } else {\r\n        result = `${StaticData.domainIp}/${link}`\r\n        let link1 = result\r\n        let array_link = result.split('/')\r\n        let length = array_link.length\r\n        array_link[length - 1] = name\r\n        let link2 = array_link.join('/')\r\n        if (CheckDownload(link1)) final_url = link1\r\n        else if (CheckDownload(link2)) final_url = link2\r\n      }\r\n    }\r\n    return final_url\r\n  }\r\n  handleCheckurl = (url) => {\r\n    const state1 = handleString(url)\r\n    const state2 = url !== '#'\r\n    const result = state1 && state2\r\n    return result\r\n  }\r\n  handleSetLink = (data) => {\r\n    const { Attachement, AttachementName } = data\r\n    let link = handleString(Attachement[0])\r\n    let name = handleString(AttachementName[0])\r\n    let url = this.handleCheckurl(data.url) ? data.url : this.handleCheckLinkFr(link, name)\r\n    data['url'] = url\r\n    data['check'] = true\r\n    return data\r\n  }\r\n  handleForeignLink = (array) => {\r\n    // const filter = array.filter(data => this.handleFilterForeign(data))\r\n    const result = Object.keys(array).map((index) => this.handleSetLink(array[index] || {}))\r\n    return result\r\n  }\r\n  handleSortList = array => {\r\n    let sort = array.sort(function (a, b) {\r\n      let result = new Date(b.date) - new Date(a.date)\r\n      return result\r\n    })\r\n    return sort\r\n  }\r\n  handleConvert = (date) => {\r\n    let convert = moment(date)\r\n      .locale('fa')\r\n      .format(' jYYYY/jMM/jDD ')\r\n    return convert\r\n  }\r\n  handleEndDate = () => {\r\n    const { state } = this.data\r\n    const data8 = state.tsr8 || {}\r\n    const { electrical_export_date, mechanical_export_date, protection_export_date, welding_export_date } = data8\r\n    let list = [{ date: electrical_export_date }, { date: mechanical_export_date }, { date: protection_export_date }, { date: welding_export_date }]\r\n    list = list.filter(time => handleCheckText(time.date))\r\n    const sort = this.handleSortList(list) || []\r\n    let end = sort[0] || {}\r\n    let end_date = this.handleConvert(handleString(end.date))\r\n    return handleString(end_date)\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\Print\\NewTSR\\TSR3\\TSR3.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\TSR1.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\TSR2.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\SecondTotal.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\Total.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\reports\\RowItems.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\add.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\Submit.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\partArea.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\delete.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\SetAccessLevels.js",["3141"],"E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIAccessLevel.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\TransmittalDisabled.js",["3142","3143","3144","3145","3146","3147","3148"],"import React, { Component } from 'react'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport VisibilityIcon from '@material-ui/icons/VisibilityRounded'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Loading from '../../../../layout/loading'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../../../../staticData'\r\nimport axios from 'axios'\r\nimport Permision from '../../../../permision/permision'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport handleString from '../../../../handleString'\r\nimport handleCheckText from '../../../../handleCheckText'\r\n\r\nexport default class TransmittalDisabled extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      foucs: '',\r\n      counter: 1,\r\n      token: Cookies.get('token'),\r\n      approveBy: {},\r\n      redirect: false,\r\n      permision: '',\r\n      documents: [],\r\n      pictureShow: '',\r\n      back: false,\r\n      reject: false,\r\n      loading: '',\r\n      disabled: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.setState(this.props)\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      this.props = nextProps\r\n      this.setState(this.props)\r\n    }\r\n  }\r\n  haldeShowName = obj => {\r\n    let allData = []\r\n    for (let value in obj) {\r\n      allData.push(obj[value])\r\n    }\r\n    return allData\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='form row justify-content-end'>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state.id) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                Transmittal No.\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                className='text-left'\r\n                name='id'\r\n                value={handleString(this.state.id)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form data ${\r\n                handleCheckText(this.state.created_at) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <div className='icon-field'>\r\n                <DateRangeRoundedIcon />\r\n              </div>\r\n              <div className='col p-0'>\r\n                <label>\r\n                  Transmittal Date.\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  readOnly={true}\r\n                  className='text-left'\r\n                  name='created_at'\r\n                  value={\r\n                    this.state.created_at\r\n                      ? handleString(this.state.created_at)\r\n                      : ''\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state.contractNo) ? 'active' : ''\r\n              } `}\r\n            >\r\n              <label>\r\n                Contract No.\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                className='text-left'\r\n                name='contractNo'\r\n                value={\r\n                  this.state.contractNo\r\n                    ? handleString(this.state.contractNo)\r\n                    : ''\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state._from) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                From.\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                className='text-left'\r\n                name='_from'\r\n                value={this.state._from ? handleString(this.state._from) : ''}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state.letterNo) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <label>Letter NO.</label>\r\n              <input\r\n                readOnly={true}\r\n                className='text-left'\r\n                name='letterNo'\r\n                value={handleString(this.state.letterNo)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state.cc) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <label>CC.</label>\r\n              <input\r\n                readOnly={true}\r\n                name='cc'\r\n                className='text-left'\r\n                value={handleString(this.state.cc)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                handleCheckText(this.state._to) ? 'active' : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                To.\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                className='text-left'\r\n                name='_to'\r\n                value={this.state._to ? handleString(this.state._to) : ''}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-12'>\r\n            {this.state.documents.map((data, key) => (\r\n              <div className={`box-add row`} key={key}>\r\n                <div className='w-100 row m-0'>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.disc) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Discipline\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        name={`disc_${key}`}\r\n                        readOnly={true}\r\n                        value={handleString(data.disc)}\r\n                        className='text-left'\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.documentNumber) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Document No.\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`documentNumber_${key}`}\r\n                        value={handleString(data.documentNumber)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.docType) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Doc. Type.\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`docType_${key}`}\r\n                        value={handleString(data.docType)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.description) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Document Description\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`description_${key}`}\r\n                        value={handleString(data.description)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.revision) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Rev.\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        read\r\n                        name={`revision_${key}`}\r\n                        value={handleString(data.revision)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.class) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Doc. Class\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`class_${key}`}\r\n                        value={handleString(data.class)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.size) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        Size\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`size_${key}`}\r\n                        value={handleString(data.size)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.pageNumber) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        NO. Of Page\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`pageNumber_${key}`}\r\n                        value={handleString(data.pageNumber)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.poi) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        P.O.I\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`POI_${key}`}\r\n                        value={handleString(data.poi)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                    <div\r\n                      className={`field-form ${\r\n                        handleCheckText(data.copiesNumber) ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        No. Of Coples\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        readOnly={true}\r\n                        className='text-left'\r\n                        name={`copiesNumber_${key}`}\r\n                        value={handleString(data.copiesNumber)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                    <div className={`field-form persian`}>\r\n                      <label>\r\n                        پیوست فایل PDF\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <div className='pl-1 allName col row m-0 justify-content-end'>\r\n                        {this.haldeShowName(data.attachment).map(\r\n                          (data, key) => (\r\n                            <a href={data} target='_blank' rel='noreferrer'>\r\n                              <span key={key}>\r\n                                <VisibilityIcon className='ml-1' />\r\n                                {`پیوست ${key + 1}`}\r\n                              </span>\r\n                            </a>\r\n                          )\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                    <div className={`field-form persian`}>\r\n                      <label>\r\n                        پیوست فایل اصلی\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <div className='pl-1 allName col row m-0 justify-content-end'>\r\n                        {this.haldeShowName(data.native).map((data, key) => (\r\n                          <a\r\n                            key={key}\r\n                            href={data}\r\n                            target='_blank'\r\n                            rel='noreferrer'\r\n                          >\r\n                            <span>\r\n                              <VisibilityIcon className='ml-1' />\r\n                              {`پیوست ${key + 1}`}\r\n                            </span>\r\n                          </a>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {data.replyAttachment && data.replyAttachment.length > 0 ? (\r\n                    <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                      <div className={`field-form persian`}>\r\n                        <label>فایل ضمیمه reply</label>\r\n                        <div className='pl-1 allName col row m-0 justify-content-end'>\r\n                          {data.replyAttachment.map((data, key) => (\r\n                            <a\r\n                              key={key}\r\n                              href={data}\r\n                              target='_blank'\r\n                              rel='noreferrer'\r\n                            >\r\n                              <span>\r\n                                <VisibilityIcon className='ml-1' />\r\n                                {`فایل ضمیمه ${key + 1}`}\r\n                              </span>\r\n                            </a>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className='col-12'>\r\n            <div className='guide'>\r\n              <div className='row-guide'>\r\n                <label>Type:</label>\r\n                <p>G: Original , P: Print , C: Compact Disk</p>\r\n              </div>\r\n              <div className='row-guide'>\r\n                <label>Purpose of Issue (P.O.I):</label>\r\n                <p>\r\n                  IFC: First Issued For Comment , AFC: Approved For Construction\r\n                  , IFA: Issued For Approval , Fis: Final Issued , IFI: Issued\r\n                  For Information , FI: First Issue (Endorsement Report)\r\n                </p>\r\n              </div>\r\n              <div className='row-guide'>\r\n                <label>Class:</label>\r\n                <p>\r\n                  Class A: Issue for Approval (AFC) , Class B: Issue for\r\n                  Approval (Approved) , Class C: Issue for Information\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\ReplaySheet.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\CommentSheet.js",[],"E:\\bidboland\\src\\Print\\ARP\\sign.js",["3149"],"import React from 'react'\r\nconst Sign = props => {\r\n  const detail = props.state[props.detail] ? props.state[props.detail] : {}\r\n  const checkVerify =\r\n    props.state[props.checksign] === '1' ||\r\n    (props.checksign === 'author' && props.checkAuthor)\r\n  return (\r\n    <td\r\n      className='sign bt'\r\n      style={{ verticalAlign: 'top', paddingTop: '2mm' }}\r\n      name='author'\r\n    >\r\n      <span className='end d-flex px-1' style={{ paddingBottom: '1mm' }}>\r\n        {props.label}\r\n      </span>\r\n      <span className='px-1 d-block'>\r\n        <span\r\n          className='d-block sign-text'\r\n          style={{ marginTop: '1mm', marginBottom: '1mm' }}\r\n        >\r\n          نام و نام خانوادگی :\r\n          <span className='value'>\r\n            {checkVerify ? ` ${detail.first_name} ${detail.last_name} ` : ''}\r\n          </span>\r\n        </span>\r\n        <span\r\n          className='d-block sign-text'\r\n          style={{ marginBottom: '1mm', marginBottom: '1mm' }}\r\n        >\r\n          تاریخ :\r\n          <span className='value'>\r\n            {checkVerify ? props.handleDate(props.date) : ''}\r\n          </span>\r\n        </span>\r\n        {detail.sign && checkVerify ? (\r\n          <img\r\n            alt={`${detail.first_name} ${detail.last_name}`}\r\n            src={`/${detail.sign}`}\r\n            style={{\r\n              width: '30mm',\r\n              height: '20mm',\r\n              display: 'flex',\r\n              padding: '1mm'\r\n            }}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </span>\r\n    </td>\r\n  )\r\n}\r\nexport default Sign\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\TransmittalDisabled.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\CommentSheet.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\ReplaySheet.js",[],"E:\\bidboland\\src\\Print\\ARP\\head.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\Drafts\\ContentDrafts.js",["3150"],"import React, { useState, useEffect } from 'react'\r\nimport HeaderContent from '../HeaderContent'\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded'\r\nimport CreateRoundedIcon from '@material-ui/icons/CreateRounded'\r\nimport CalendarTodayRoundedIcon from '@material-ui/icons/CalendarTodayRounded'\r\nimport AccessTimeRoundedIcon from '@material-ui/icons/AccessTimeRounded'\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded'\r\nimport ReplyRoundedIcon from '@material-ui/icons/ReplyRounded'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\r\nimport RemoveRedEyeRoundedIcon from '@material-ui/icons/RemoveRedEyeRounded'\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nconst ContentInBox = props => {\r\n  const [close, setClose] = useState('')\r\n  const {\r\n    title,\r\n    nameAuthor,\r\n    date,\r\n    time,\r\n    text,\r\n    attachList,\r\n    attach,\r\n    reply\r\n  } = props.state.dataSelected\r\n  useEffect(() => {\r\n    if (close === '') {\r\n      if (reply) {\r\n        setClose('reply')\r\n      }\r\n    }\r\n  }, [props])\r\n  return (\r\n    <div className='col-xl-8 col-lg-8 col-md-8 col-12 py-1'>\r\n      <div className='main-content'>\r\n        <HeaderContent {...props} />\r\n        <div\r\n          className={`content-email row mx-0 ${\r\n            close === 'message' ? '_close' : ''\r\n          }`}\r\n        >\r\n          <div className='avatar'>\r\n            <div className='image'>\r\n              <PersonRoundedIcon />\r\n            </div>\r\n          </div>\r\n          <div className='content-text'>\r\n            <div className='head-content-text'>\r\n              <div className='w-100'>\r\n                <h4 className='title'>{title}</h4>\r\n                <div className='row mx-0 w-100'>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <CreateRoundedIcon className='ml-1' />\r\n                    {nameAuthor}\r\n                  </span>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <CalendarTodayRoundedIcon className='ml-1' />\r\n                    {date}\r\n                  </span>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <AccessTimeRoundedIcon className='ml-1' />\r\n                    {time}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              {reply && close === 'message' && (\r\n                <div className='more'>\r\n                  <span className='pointer' onClick={() => setClose('reply')}>\r\n                    مشاهده پیام\r\n                    <ArrowDropDownIcon />\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className='main-text'>\r\n              <p className='text'>{text}</p>\r\n              {attach ? (\r\n                <div className='attachFile'>\r\n                  <span className='title'>فایل‌های پیوست شده‎</span>\r\n                  <div className='w-100 row mx-0 mt-2'>\r\n                    {attachList.map((data, key) => (\r\n                      <a className='link-attachment ltr' href={data} key={key}>\r\n                        <DescriptionRoundedIcon />\r\n                        {`Attachment-file${key + 1}.pdf`}\r\n                        <RemoveRedEyeRoundedIcon className='ml-2 view'/>\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <div className='handle-buttons-content'>\r\n                <a href='/edit-drafts' className='reply'>\r\n                  <EditRoundedIcon className='ml-1' />\r\n                  ویرایش و ارسال\r\n                </a>\r\n                {attach && (\r\n                  <a href='#/' className='download'>\r\n                    <ReplyRoundedIcon className='ml-1' />\r\n                    ارسال ایمیل\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ContentInBox\r\n","E:\\bidboland\\src\\CheckEmail.js",["3151","3152","3153","3154"],"const CheckEmail = email => {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n  return re.test(email)\r\n}\r\nmodule.exports = { CheckEmail }\r\n","E:\\bidboland\\src\\Tools\\E-mail\\SideBar.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR7\\ItemCheckBox.js",["3155","3156"],"import React from 'react'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport IndeterminateCheckBoxRoundedIcon from '@material-ui/icons/IndeterminateCheckBoxRounded'\r\nimport ListTab from '../../../tsrNew/TSR7/ListTab'\r\nimport handleString from '../../../handleString'\r\nconst ItemCheckBox = props => {\r\n  let list = ListTab.List || []\r\n  function handleCheckBox(data) {\r\n    let listChecked = props.listChecked || []\r\n    const result = listChecked.findIndex(item => item.value == data.value)\r\n    const check = result >= 0\r\n    return check\r\n  }\r\n  function CheckBoxShow(data) {\r\n    const check = data.label === props.name\r\n    let result = ''\r\n    const list = props.data.groups || []\r\n    const ch_list = list.includes(handleString(data.value))\r\n    if (ch_list) {\r\n      result = <IndeterminateCheckBoxRoundedIcon className='mr-2 ml-2' />\r\n      if (check) {\r\n        result = <CheckBoxRoundedIcon className='mr-2 ml-2' />\r\n      }\r\n    } else result = <CheckBoxOutlineBlankRoundedIcon className='mr-2 ml-2' />\r\n    return result\r\n  }\r\n  return (\r\n    <td colSpan={2}>\r\n      <span>نوع کار:</span>\r\n      {list.map((data, key) => (\r\n        <span className='mr-2 ml-2 px-2' key={key}>\r\n          <span className='padRight'>{data.label}</span>\r\n          <span className='_tikbox'>\r\n            {CheckBoxShow(data)}\r\n          </span>\r\n        </span>\r\n      ))}\r\n    </td>\r\n  )\r\n}\r\nexport default ItemCheckBox\r\n","E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\ContentInBox.js",["3157"],"import React, { useState, useEffect } from 'react'\r\nimport HeaderContent from '../HeaderContent'\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded'\r\nimport CreateRoundedIcon from '@material-ui/icons/CreateRounded'\r\nimport CalendarTodayRoundedIcon from '@material-ui/icons/CalendarTodayRounded'\r\nimport AccessTimeRoundedIcon from '@material-ui/icons/AccessTimeRounded'\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded'\r\nimport ReplyRoundedIcon from '@material-ui/icons/ReplyRounded'\r\nimport CloudDownloadRoundedIcon from '@material-ui/icons/CloudDownloadRounded'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\r\nimport Reply from './Reply'\r\nconst ContentInBox = props => {\r\n  const [close, setClose] = useState('')\r\n  const {\r\n    title,\r\n    nameAuthor,\r\n    date,\r\n    time,\r\n    text,\r\n    attachList,\r\n    attach,\r\n    reply\r\n  } = props.state.dataSelected\r\n  useEffect(() => {\r\n    if (close === '') {\r\n      if (reply) {\r\n        setClose('reply')\r\n      }\r\n    }\r\n  }, [props])\r\n  function handleClose (status) {\r\n    setClose(status)\r\n  }\r\n  return (\r\n    <div className='col-xl-8 col-lg-8 col-md-8 col-12 py-1'>\r\n      <div className='main-content'>\r\n        <HeaderContent {...props} />\r\n        <div\r\n          className={`content-email row mx-0 ${\r\n            close === 'message' ? '_close' : ''\r\n          }`}\r\n        >\r\n          <div className='avatar'>\r\n            <div className='image'>\r\n              <PersonRoundedIcon />\r\n            </div>\r\n          </div>\r\n          <div className='content-text'>\r\n            <div className='head-content-text'>\r\n              <div className='w-100'>\r\n                <h4 className='title'>{title}</h4>\r\n                <div className='row mx-0 w-100'>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <CreateRoundedIcon className='ml-1' />\r\n                    {nameAuthor}\r\n                  </span>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <CalendarTodayRoundedIcon className='ml-1' />\r\n                    {date}\r\n                  </span>\r\n                  <span className='status ml-2 mt-2'>\r\n                    <AccessTimeRoundedIcon className='ml-1' />\r\n                    {time}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              {reply && close === 'message' && (\r\n                <div className='more'>\r\n                  <span className='pointer' onClick={()=>setClose('reply')}>\r\n                    مشاهده پیام\r\n                    <ArrowDropDownIcon />\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className='main-text'>\r\n              <p className='text'>{text}</p>\r\n              {attach ? (\r\n                <div className='attachFile'>\r\n                  <span className='title'>فایل‌های پیوست شده‎</span>\r\n                  <div className='w-100 row mx-0 mt-2'>\r\n                    {attachList.map((data, key) => (\r\n                      <a className='link-attachment ltr' href={data} key={key}>\r\n                        <DescriptionRoundedIcon />\r\n                        {`Attachment-file${key + 1}.pdf`}\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <div className='handle-buttons-content'>\r\n                <a href='#/' className='reply'>\r\n                  <ReplyRoundedIcon className='ml-1' />\r\n                  نوشتن پاسخ\r\n                </a>\r\n                {attach && (\r\n                  <a href='#/' className='download'>\r\n                    <CloudDownloadRoundedIcon className='ml-1' />\r\n                    دانلود فایل‌های پیوست\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {reply && <Reply {...props} close={close} handleClose={handleClose} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ContentInBox\r\n","E:\\bidboland\\src\\tsrNew\\sign\\PopUpReject.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\DocumentControlCenter\\DocumentControlCenter.js",["3158"],"import React, { Component } from \"react\";\r\nexport default class EngineeringManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n\r\n  }\r\n  render() {\r\n    return 's'\r\n  }\r\n} ","E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\SubsidiaryIndex.js",["3159","3160","3161","3162","3163","3164","3165","3166"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport StaticData from '../../../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility'\r\nimport PrintIcon from '@material-ui/icons/Print'\r\nimport ModeCommentRoundedIcon from '@material-ui/icons/ModeCommentRounded'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport NotFoundTable from '../../../../table/notFound'\r\nimport Loading from '../../../../layout/loading'\r\nimport Row from '../../../../table/Row'\r\nimport Permision from '../../../../permision/permision'\r\nimport AdvanceSearch from '../../../../Customization/advancedSearch'\r\nimport OutputFilter from '../../../../table/OutputFilter'\r\nexport default class MainInternalTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'Row', value: 'id' },\r\n        { name: 'Transmittal Number', value: 'transmittalNumber' },\r\n        { name: 'Letter Number', value: 'letterNo' },\r\n        { name: 'From', value: '_from' },\r\n        { name: 'To', value: '_to' },\r\n        { name: 'CC', value: 'cc' },\r\n        { name: 'Creator', value: 'author' },\r\n        { name: 'Approved By', value: 'approveBy' },\r\n        { name: 'Verify at', value: 'verify_at' },\r\n        { name: 'Created At', value: 'created_at' },\r\n        { name: 'Last Activity Date', value: 'updated_at' }\r\n        // {name : \"Action\"},\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      selectNumber: '',\r\n      secondSelectNumber: '',\r\n      documentSelected: '',\r\n      firstData: [],\r\n      secondData: {},\r\n      search: '',\r\n      filter: '',\r\n      loading: 'table',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    this.props.getReset(this.Reset)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    window.addEventListener('click', async e => {\r\n      if (this.state.selectNumber !== '') {\r\n        if (\r\n          e.target !== this.refs[`more_${this.state.selectNumber}`] ||\r\n          e.target !== this.refs[`moresvg_${this.state.selectNumber}`]\r\n        ) {\r\n          if (\r\n            e.target === this.refs[`boxMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`titleMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`textMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`mainitemMore_${this.state.selectNumber}`] ||\r\n            e.target ===\r\n              this.refs[\r\n                `itemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ] ||\r\n            e.target ===\r\n              this.refs[\r\n                `svgItemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ] ||\r\n            e.target ===\r\n              this.refs[\r\n                `spanItemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ]\r\n          ) {\r\n            this.setState({ selectNumber: '' })\r\n          } else {\r\n            if (this.state.secondSelectNumber !== '') {\r\n              this.setState({ secondSelectNumber: '' })\r\n            } else {\r\n              this.setState({ selectNumber: '' })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          this.setState({ [value]: false })\r\n        }\r\n      }\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      axios\r\n        .get(\r\n          `${StaticData.domainIp}/internalTransmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      await this.props.resetSearch()\r\n      this.setState({ loading: 'table', search: '' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/internalTransmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/internalTransmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              role: response.data.role,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.props.getRole(null, '')\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  GetMore = async key => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      let id = await this.state.row[key].id\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/internalTransmittal/getDocumentList?transmittalCode=${id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              firstData: response.data.content,\r\n              selectNumber: key,\r\n              documentSelected: id\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  GetSecondData = async (data, index, key) => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/mdl/getDocumentRevisionDetail?documentId=${data.id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              secondData: response.data.content,\r\n              selectNumber: key,\r\n              secondSelectNumber: index\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  handlePositionBox = key => {\r\n    const half = this.state.contentPerPage / 2\r\n    if (key >= half) {\r\n      return 'bottomBox'\r\n    } else return ''\r\n  }\r\n  handlePositionSecondBox = (key, index) => {\r\n    const halfKey = this.state.contentPerPage / 2,\r\n      halfIndex = parseInt(index / 2)\r\n    if (key >= halfKey) {\r\n      return 'bottomBox'\r\n    } else if (key >= halfIndex) {\r\n      return 'middleBox'\r\n    } else return ''\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table transmittal w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n                <th className='action'>action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      download={'Transmittal Number'}\r\n                      _linkDownload='internalTransmittal/getZipArchive'\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                    <td\r\n                      className={`action justify-content-start ${\r\n                        this.state.selectNumber === key ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'secondary_transmittal'\r\n                      ) && (\r\n                        <span\r\n                          className='more'\r\n                          ref={`more_${key}`}\r\n                          onClick={() => this.GetMore(key)}\r\n                        >\r\n                          <MoreVertRoundedIcon ref={`moresvg_${key}`} />\r\n                        </span>\r\n                      )}\r\n\r\n                      {data.status === '0' &&\r\n                      this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'internal_transmittal_edit'\r\n                      ) ? (\r\n                        <Link to={`/InternalEditTransmittal-${data.id}`}>\r\n                          <span className='edit'>\r\n                            <EditIcon />\r\n                          </span>\r\n                        </Link>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'internal_transmittal_comment_sheet'\r\n                      ) ? (\r\n                        data.status === '1' ? (\r\n                          <Link\r\n                            to={{\r\n                              pathname: `/InternalTransmittal-${data.id}`,\r\n                              state: { status: 2 }\r\n                            }}\r\n                          >\r\n                            <span className='edit'>\r\n                              <ModeCommentRoundedIcon />\r\n                            </span>\r\n                          </Link>\r\n                        ) : (\r\n                          <span className='edit disabled'>\r\n                            <ModeCommentRoundedIcon />\r\n                          </span>\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'secondary_transmittal'\r\n                      ) ? (\r\n                        <Link\r\n                          to={{\r\n                            pathname: `/InternalTransmittal-${data.id}`,\r\n                            state: { status: 1 }\r\n                          }}\r\n                        >\r\n                          <span className='edit'>\r\n                            <VisibilityIcon />\r\n                          </span>\r\n                        </Link>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'secondary_transmittal'\r\n                      ) ? (\r\n                        data.status === '1' ? (\r\n                          <a\r\n                            href={`${StaticData.domainIp}/internalTransmittal/print/${data.id}`}\r\n                            target='_blank'\r\n                            rel='noreferrer'\r\n                          >\r\n                            <span className='edit'>\r\n                              <PrintIcon />\r\n                            </span>\r\n                          </a>\r\n                        ) : (\r\n                          <span className='edit disabled'>\r\n                            <PrintIcon />\r\n                          </span>\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n\r\n                      {this.state.selectNumber === key ? (\r\n                        <div\r\n                          ref={`boxMore_${key}`}\r\n                          className={`box-more ${this.handlePositionBox(key)}`}\r\n                        >\r\n                          <div\r\n                            ref={`titleMore_${key}`}\r\n                            className='title w-100 pl-0 pr-4 text-left'\r\n                          >\r\n                            <h4 ref={`textMore_${key}`} className='w-100'>\r\n                              {this.state.firstData.length > 0\r\n                                ? `Transmittal ${this.state.documentSelected}`\r\n                                : 'اطلاعات ثبت نشده است'}\r\n                            </h4>\r\n                          </div>\r\n                          <div\r\n                            ref={`mainitemMore_${key}`}\r\n                            className='main-item'\r\n                          >\r\n                            {this.state.firstData.map((data2, index) => (\r\n                              <div\r\n                                key={index}\r\n                                ref={`itemMore_${key}_${index}`}\r\n                                className={`item ${\r\n                                  this.state.secondSelectNumber === index\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                onClick={() =>\r\n                                  this.GetSecondData(data2, index, key)\r\n                                }\r\n                              >\r\n                                <ChevronLeftRoundedIcon\r\n                                  ref={`svgItemMore_${key}_${index}`}\r\n                                />\r\n                                <span ref={`spanItemMore_${key}_${index}`}>\r\n                                  {data2.documentNumber} : {data2.revision}\r\n                                </span>\r\n                                {this.state.secondSelectNumber === index ? (\r\n                                  <div className='second-box'>\r\n                                    <div className='col-12 p-0 row m-0'>\r\n                                      <div className='col-6'>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            this.state.secondData.native !==\r\n                                              null ||\r\n                                            this.state.secondData.attachment !==\r\n                                              null\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>REV</span>\r\n                                          <label>\r\n                                            {this.state.secondData.revision}\r\n                                          </label>\r\n                                          <div className='hover-link rtl'>\r\n                                            {this.state.secondData.native !==\r\n                                            null ? (\r\n                                              <a\r\n                                                href={\r\n                                                  this.state.secondData.native[\r\n                                                    '0'\r\n                                                  ]\r\n                                                }\r\n                                                className='link-download'\r\n                                                target='_blank'\r\n                                                rel='noreferrer'\r\n                                              >\r\n                                                دانلود فایل native\r\n                                              </a>\r\n                                            ) : (\r\n                                              ''\r\n                                            )}\r\n                                            ‍\r\n                                            {this.state.secondData\r\n                                              .attachment !== null ? (\r\n                                              <a\r\n                                                href={\r\n                                                  this.state.secondData\r\n                                                    .attachment['0']\r\n                                                }\r\n                                                className='link-download'\r\n                                                target='_blank'\r\n                                                rel='noreferrer'\r\n                                              >\r\n                                                دانلود فایل pdf\r\n                                              </a>\r\n                                            ) : (\r\n                                              ''\r\n                                            )}\r\n                                          </div>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Transmittal No.</span>\r\n                                          <label>{data.id}</label>\r\n                                          <a\r\n                                            href={`/internalTransmittal/print/${data.id}`}\r\n                                            target='_blank'\r\n                                            rel='noreferrer'\r\n                                          >\r\n                                            مشاهده جزئیات\r\n                                          </a>\r\n                                        </div>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            (this.state.secondData\r\n                                              .commentNative &&\r\n                                              this.state.secondData\r\n                                                .commentNative.length > 0) ||\r\n                                            (this.state.secondData.commentPdf &&\r\n                                              this.state.secondData.commentPdf\r\n                                                .length > 0)\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>Comment No.</span>\r\n                                          <label>\r\n                                            {\r\n                                              this.state.secondData\r\n                                                .commentNumber\r\n                                            }\r\n                                          </label>\r\n                                          {(this.state.secondData\r\n                                            .commentNative &&\r\n                                            this.state.secondData.commentNative\r\n                                              .length > 0) ||\r\n                                          (this.state.secondData.commentPdf &&\r\n                                            this.state.secondData.commentPdf\r\n                                              .length > 0) ? (\r\n                                            <div className='hover-link rtl'>\r\n                                              <div className='second-item'>\r\n                                                <label>\r\n                                                  دانلود فایل native\r\n                                                </label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .commentNative &&\r\n                                                  this.state.secondData\r\n                                                    .commentNative.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.commentNative.map(\r\n                                                        (__data1, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data1}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className='second-item'>\r\n                                                <label>دانلود فایل pdf</label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .commentPdf &&\r\n                                                  this.state.secondData\r\n                                                    .commentPdf.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.commentPdf.map(\r\n                                                        (__data2, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data2}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : (\r\n                                            ''\r\n                                          )}\r\n                                        </div>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            (this.state.secondData\r\n                                              .replyNative !== undefined &&\r\n                                              this.state.secondData.replyNative\r\n                                                .length > 0) ||\r\n                                            (this.state.secondData\r\n                                              .replyAttachment !== undefined &&\r\n                                              this.state.secondData\r\n                                                .replyAttachment.length > 0)\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>Reply No.</span>\r\n                                          <label>\r\n                                            {this.state.secondData.replyNumber}\r\n                                          </label>\r\n                                          {(this.state.secondData\r\n                                            .replyNative !== undefined &&\r\n                                            this.state.secondData.replyNative\r\n                                              .length > 0) ||\r\n                                          (this.state.secondData.commentPdf !==\r\n                                            undefined &&\r\n                                            this.state.secondData.commentPdf\r\n                                              .length > 0) ? (\r\n                                            <div className='hover-link rtl'>\r\n                                              <div className='second-item'>\r\n                                                <label>\r\n                                                  دانلود فایل native\r\n                                                </label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .replyNative !==\r\n                                                    undefined &&\r\n                                                  this.state.secondData\r\n                                                    .replyNative.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.replyNative.map(\r\n                                                        (__data1, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data1}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className='second-item'>\r\n                                                <label>دانلود فایل pdf</label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .replyAttachment !==\r\n                                                    undefined &&\r\n                                                  this.state.secondData\r\n                                                    .replyAttachment.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.replyAttachment.map(\r\n                                                        (__data2, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data2}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : (\r\n                                            ''\r\n                                          )}\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Comment Status</span>\r\n                                          <label>\r\n                                            {\r\n                                              this.state.secondData\r\n                                                .commentStatus\r\n                                            }\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                      <div className='col-6'>\r\n                                        <div className='item'>\r\n                                          <span>POI</span>\r\n                                          <label>\r\n                                            {this.state.secondData.poi}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.date}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Comment Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.commentDate}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Reply Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.replyDate}\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                ) : (\r\n                                  ''\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'secondary_transmittal_export'\r\n                ) && (\r\n                  <a\r\n                    href={OutputFilter.handleFilter(\r\n                      this.state.textSearch,\r\n                      this.state.search,\r\n                      `${StaticData.domainIp}/internalTransmittal/exportExcel`\r\n                    )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='xls'\r\n                  >\r\n                    <img src='/img/XLS.svg' alt='xls' />\r\n                    خروجی اکسل\r\n                  </a>\r\n                )}\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'secondary_transmittal_export'\r\n                ) && (\r\n                  <a\r\n                    href={OutputFilter.handleFilter(\r\n                      this.state.textSearch,\r\n                      this.state.search,\r\n                      `${StaticData.domainIp}/internalTransmittal/exportPdf`\r\n                    )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='pdf'\r\n                  >\r\n                    <img src='/img/PDF.svg' alt='PDF' />\r\n                    خروجی pdf\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\index-transmittal.js",["3167","3168","3169","3170","3171","3172","3173","3174","3175"],"import React, { Component } from 'react'\r\n// import { Link, Redirect } from 'react-router-dom'\r\nimport StaticData from '../../../../staticData'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility'\r\nimport PrintIcon from '@material-ui/icons/Print'\r\nimport ModeCommentRoundedIcon from '@material-ui/icons/ModeCommentRounded'\r\nimport Notification from '../../../../notification/notification'\r\nimport Message from '../../../../notification/Message'\r\nimport NotFoundTable from '../../../../table/notFound'\r\nimport Loading from '../../../../layout/loading'\r\nimport Row from '../../../../table/Row'\r\nimport AdvanceSearch from '../../../../Customization/advancedSearch'\r\nimport OutputFilter from '../../../../table/OutputFilter'\r\nimport Permision from '../../../../permision/permision'\r\nimport { Link } from 'react-router-dom'\r\n// import UndoIcon from '@material-ui/icons/Undo';\r\nexport default class MainTransmittal extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'Row', value: 'id' },\r\n        { name: 'Transmittal Number', value: 'transmittalNumber' },\r\n        { name: 'Letter Number', value: 'letterNo' },\r\n        { name: 'From', value: '_from' },\r\n        { name: 'To', value: '_to' },\r\n        { name: 'CC', value: 'cc' },\r\n        { name: 'Creator', value: 'author' },\r\n        { name: 'Approved By', value: 'approveBy' },\r\n        { name: 'Verify at', value: 'verify_at' },\r\n        { name: 'Created At', value: 'created_at' },\r\n        { name: 'Last Activity Date', value: 'updated_at' }\r\n        // {name : \"Action\"},\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      selectNumber: '',\r\n      secondSelectNumber: '',\r\n      documentSelected: '',\r\n      firstData: [],\r\n      secondData: {},\r\n      search: '',\r\n      filter: '',\r\n      loading: 'table',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      role: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    this.props.getReset(this.Reset)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    window.addEventListener('click', async e => {\r\n      if (this.state.selectNumber !== '') {\r\n        if (\r\n          e.target !== this.refs[`more_${this.state.selectNumber}`] ||\r\n          e.target !== this.refs[`moresvg_${this.state.selectNumber}`]\r\n        ) {\r\n          if (\r\n            e.target === this.refs[`boxMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`titleMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`textMore_${this.state.selectNumber}`] ||\r\n            e.target === this.refs[`mainitemMore_${this.state.selectNumber}`] ||\r\n            e.target ===\r\n              this.refs[\r\n                `itemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ] ||\r\n            e.target ===\r\n              this.refs[\r\n                `svgItemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ] ||\r\n            e.target ===\r\n              this.refs[\r\n                `spanItemMore_${this.state.selectNumber}_${this.state.secondSelectNumber}`\r\n              ]\r\n          ) {\r\n            this.setState({ selectNumber: '' })\r\n          } else {\r\n            if (this.state.secondSelectNumber !== '') {\r\n              this.setState({ secondSelectNumber: '' })\r\n            } else {\r\n              this.setState({ selectNumber: '' })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          this.setState({ [value]: false })\r\n        }\r\n      }\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      axios\r\n        .get(\r\n          `${StaticData.domainIp}/transmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      await this.props.resetSearch()\r\n      this.setState({ loading: 'table', search: '' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/transmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/transmittal/getList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              role: response.data.role,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            this.props.getRole(response.data.role, '')\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  GetMore = async key => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      let id = await this.state.row[key].id\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/transmittal/getDocumentList?transmittalCode=${id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              firstData: response.data.content,\r\n              selectNumber: key,\r\n              documentSelected: id\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  GetSecondData = async (data, index, key) => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/mdl/getDocumentRevisionDetail?documentId=${data.id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              secondData: response.data.content,\r\n              selectNumber: key,\r\n              secondSelectNumber: index\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  handlePositionBox = key => {\r\n    const half = this.state.contentPerPage / 2\r\n    if (key >= half) {\r\n      return 'bottomBox'\r\n    } else return ''\r\n  }\r\n  handlePositionSecondBox = (key, index) => {\r\n    const halfKey = this.state.contentPerPage / 2,\r\n      halfIndex = parseInt(index / 2)\r\n    if (key >= halfKey) {\r\n      return 'bottomBox'\r\n    } else if (key >= halfIndex) {\r\n      return 'middleBox'\r\n    } else return ''\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table transmittal w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={false}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n                <th className='action'>action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      download={'Transmittal Number'}\r\n                      objFiltered={this.state.objFiltered}\r\n                    />\r\n                    <td\r\n                      className={`action justify-content-center ${\r\n                        this.state.selectNumber === key ? 'active' : ''\r\n                      }`}\r\n                    >\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'main_transmittal'\r\n                      ) && (\r\n                        <span\r\n                          className='more'\r\n                          ref={`more_${key}`}\r\n                          onClick={() => this.GetMore(key)}\r\n                        >\r\n                          <MoreVertRoundedIcon ref={`moresvg_${key}`} />\r\n                        </span>\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'transmittal_edit'\r\n                      ) &&\r\n                      (data.status === '0' || data.status === 0) ? (\r\n                        <Link to={`/editTransmittal-${data.id}`}>\r\n                          <span className='edit'>\r\n                            <EditIcon />\r\n                          </span>\r\n                        </Link>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'transmittal_comment_sheet_show'\r\n                      ) ? (\r\n                        data.status === '1' ? (\r\n                          <Link\r\n                            to={{\r\n                              pathname: `/transmittal-${data.id}`,\r\n                              state: { status: 2 }\r\n                            }}\r\n                          >\r\n                            <span className='edit'>\r\n                              <ModeCommentRoundedIcon />\r\n                            </span>\r\n                          </Link>\r\n                        ) : (\r\n                          <span className='edit disabled'>\r\n                            <ModeCommentRoundedIcon />\r\n                          </span>\r\n                        )\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'main_transmittal'\r\n                      ) ? (\r\n                        <Link\r\n                          to={{\r\n                            pathname: `/transmittal-${data.id}`,\r\n                            state: { status: 1 }\r\n                          }}\r\n                        >\r\n                          <span className='edit'>\r\n                            <VisibilityIcon />\r\n                          </span>\r\n                        </Link>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      {data.status === '1' &&\r\n                      this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'transmittal_edit'\r\n                      ) ? (\r\n                        <a\r\n                          href={`${StaticData.domainIp}/transmittal/print/${data.id}`}\r\n                          target='_blank'\r\n                          rel='noreferrer'\r\n                        >\r\n                          <span className='edit'>\r\n                            <PrintIcon />\r\n                          </span>\r\n                        </a>\r\n                      ) : (\r\n                        <span className='edit disabled'>\r\n                          <PrintIcon />\r\n                        </span>\r\n                      )}\r\n\r\n                      {this.state.selectNumber === key ? (\r\n                        <div\r\n                          ref={`boxMore_${key}`}\r\n                          className={`box-more ${this.handlePositionBox(key)}`}\r\n                        >\r\n                          <div\r\n                            ref={`titleMore_${key}`}\r\n                            className='title w-100 pl-0 pr-4 text-left'\r\n                          >\r\n                            <h4 ref={`textMore_${key}`} className='w-100'>\r\n                              {this.state.firstData.length > 0\r\n                                ? `Transmittal ${this.state.documentSelected}`\r\n                                : 'اطلاعات ثبت نشده است'}\r\n                            </h4>\r\n                          </div>\r\n                          <div\r\n                            ref={`mainitemMore_${key}`}\r\n                            className='main-item'\r\n                          >\r\n                            {this.state.firstData.map((data2, index) => (\r\n                              <div\r\n                                key={index}\r\n                                ref={`itemMore_${key}_${index}`}\r\n                                className={`item ${\r\n                                  this.state.secondSelectNumber === index\r\n                                    ? 'active'\r\n                                    : ''\r\n                                }`}\r\n                                onClick={() =>\r\n                                  this.GetSecondData(data2, index, key)\r\n                                }\r\n                              >\r\n                                <ChevronLeftRoundedIcon\r\n                                  ref={`svgItemMore_${key}_${index}`}\r\n                                />\r\n                                <span ref={`spanItemMore_${key}_${index}`}>\r\n                                  {data2.documentNumber} : {data2.revision}\r\n                                </span>\r\n                                {this.state.secondSelectNumber === index ? (\r\n                                  <div\r\n                                    className={`second-box ${this.handlePositionSecondBox(\r\n                                      key,\r\n                                      this.state.firstData.length\r\n                                    )}`}\r\n                                  >\r\n                                    <div className='col-12 p-0 row m-0'>\r\n                                      <div className='col-6'>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            this.Permision.handlePermision(\r\n                                              this.state.role,\r\n                                              'main_transmittal_download'\r\n                                            ) &&\r\n                                            (this.state.secondData.native !==\r\n                                              null ||\r\n                                              this.state.secondData\r\n                                                .attachment !== null)\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>REV</span>\r\n                                          <label>\r\n                                            {this.state.secondData.revision}\r\n                                          </label>\r\n                                          {this.Permision.handlePermision(\r\n                                            this.state.role,\r\n                                            'main_transmittal_download'\r\n                                          ) && (\r\n                                            <div className='hover-link rtl'>\r\n                                              {this.state.secondData.native !==\r\n                                              null ? (\r\n                                                <a\r\n                                                  href={\r\n                                                    this.state.secondData\r\n                                                      .native['0']\r\n                                                  }\r\n                                                  className='link-download'\r\n                                                  target='_blank'\r\n                                                  rel='noreferrer'\r\n                                                >\r\n                                                  دانلود فایل native\r\n                                                </a>\r\n                                              ) : (\r\n                                                ''\r\n                                              )}\r\n                                              ‍\r\n                                              {this.state.secondData\r\n                                                .attachment !== null ? (\r\n                                                <a\r\n                                                  href={\r\n                                                    this.state.secondData\r\n                                                      .attachment['0']\r\n                                                  }\r\n                                                  className='link-download'\r\n                                                  target='_blank'\r\n                                                  rel='noreferrer'\r\n                                                >\r\n                                                  دانلود فایل pdf\r\n                                                </a>\r\n                                              ) : (\r\n                                                ''\r\n                                              )}\r\n                                            </div>\r\n                                          )}\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Transmittal No.</span>\r\n                                          <label>{data.id}</label>\r\n                                          <a\r\n                                            href={`/transmittal-${data.id}`}\r\n                                            target='_blank'\r\n                                            rel='noreferrer'\r\n                                          >\r\n                                            مشاهده جزئیات\r\n                                          </a>\r\n                                        </div>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            this.Permision.handlePermision(\r\n                                              this.state.role,\r\n                                              'main_transmittal_download'\r\n                                            ) &&\r\n                                            ((this.state.secondData\r\n                                              .commentNative &&\r\n                                              this.state.secondData\r\n                                                .commentNative.length > 0) ||\r\n                                              (this.state.secondData\r\n                                                .commentPdf &&\r\n                                                this.state.secondData.commentPdf\r\n                                                  .length > 0))\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>Comment No.</span>\r\n                                          <label>\r\n                                            {\r\n                                              this.state.secondData\r\n                                                .commentNumber\r\n                                            }\r\n                                          </label>\r\n                                          {this.Permision.handlePermision(\r\n                                            this.state.role,\r\n                                            'main_transmittal_download'\r\n                                          ) &&\r\n                                          ((this.state.secondData\r\n                                            .commentNative &&\r\n                                            this.state.secondData.commentNative\r\n                                              .length > 0) ||\r\n                                            (this.state.secondData.commentPdf &&\r\n                                              this.state.secondData.commentPdf\r\n                                                .length > 0)) ? (\r\n                                            <div className='hover-link rtl'>\r\n                                              <div className='second-item'>\r\n                                                <label>\r\n                                                  دانلود فایل native\r\n                                                </label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .commentNative &&\r\n                                                  this.state.secondData\r\n                                                    .commentNative.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.commentNative.map(\r\n                                                        (__data1, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data1}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className='second-item'>\r\n                                                <label>دانلود فایل pdf</label>\r\n                                                <div className='absolute'>\r\n                                                  {this.Permision.handlePermision(\r\n                                                    this.state.role,\r\n                                                    'main_transmittal_download'\r\n                                                  ) &&\r\n                                                  this.state.secondData\r\n                                                    .commentPdf &&\r\n                                                  this.state.secondData\r\n                                                    .commentPdf.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.commentPdf.map(\r\n                                                        (__data2, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data2}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : (\r\n                                            ''\r\n                                          )}\r\n                                        </div>\r\n                                        <div\r\n                                          className={`item ${\r\n                                            (this.Permision.handlePermision(\r\n                                              this.state.role,\r\n                                              'main_transmittal_download'\r\n                                            ) &&\r\n                                              this.state.secondData\r\n                                                .replyNative !== undefined &&\r\n                                              this.state.secondData.replyNative\r\n                                                .length > 0) ||\r\n                                            (this.state.secondData\r\n                                              .replyAttachment !== undefined &&\r\n                                              this.state.secondData\r\n                                                .replyAttachment.length > 0)\r\n                                              ? 'hashover'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          <span>Reply No.</span>\r\n                                          <label>\r\n                                            {this.state.secondData.replyNumber}\r\n                                          </label>\r\n                                          {this.Permision.handlePermision(\r\n                                            this.state.role,\r\n                                            'main_transmittal_download'\r\n                                          ) &&\r\n                                          ((this.state.secondData\r\n                                            .replyNative !== undefined &&\r\n                                            this.state.secondData.replyNative\r\n                                              .length > 0) ||\r\n                                            (this.state.secondData\r\n                                              .commentPdf !== undefined &&\r\n                                              this.state.secondData.commentPdf\r\n                                                .length > 0)) ? (\r\n                                            <div className='hover-link rtl'>\r\n                                              <div className='second-item'>\r\n                                                <label>\r\n                                                  دانلود فایل native\r\n                                                </label>\r\n                                                <div className='absolute'>\r\n                                                  {this.state.secondData\r\n                                                    .replyNative !==\r\n                                                    undefined &&\r\n                                                  this.state.secondData\r\n                                                    .replyNative.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.replyNative.map(\r\n                                                        (__data1, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data1}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className='second-item'>\r\n                                                <label>دانلود فایل pdf</label>\r\n                                                <div className='absolute'>\r\n                                                  {this.Permision.handlePermision(\r\n                                                    this.state.role,\r\n                                                    'main_transmittal_download'\r\n                                                  ) &&\r\n                                                  this.state.secondData\r\n                                                    .replyAttachment !==\r\n                                                    undefined &&\r\n                                                  this.state.secondData\r\n                                                    .replyAttachment.length >\r\n                                                    0 !==\r\n                                                    null\r\n                                                    ? this.state.secondData.replyAttachment.map(\r\n                                                        (__data2, __key) => (\r\n                                                          <div\r\n                                                            className='item-hover mt-1'\r\n                                                            key={__key}\r\n                                                          >\r\n                                                            <a\r\n                                                              href={__data2}\r\n                                                              className='link-download'\r\n                                                              target='_blank'\r\n                                                              rel='noreferrer'\r\n                                                            >\r\n                                                              فایل {__key + 1}\r\n                                                            </a>\r\n                                                          </div>\r\n                                                        )\r\n                                                      )\r\n                                                    : ''}\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          ) : (\r\n                                            ''\r\n                                          )}\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Comment Status</span>\r\n                                          <label>\r\n                                            {\r\n                                              this.state.secondData\r\n                                                .commentStatus\r\n                                            }\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                      <div className='col-6'>\r\n                                        <div className='item'>\r\n                                          <span>POI</span>\r\n                                          <label>\r\n                                            {this.state.secondData.poi}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.date}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Comment Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.commentDate}\r\n                                          </label>\r\n                                        </div>\r\n                                        <div className='item'>\r\n                                          <span>Reply Date</span>\r\n                                          <label>\r\n                                            {this.state.secondData.replyDate}\r\n                                          </label>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                ) : (\r\n                                  ''\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'main_transmittal_export'\r\n                ) && (\r\n                  <a\r\n                    // href={OutputFilter.handleFilter(\r\n                    //   this.state.textSearch,\r\n                    //   this.state.search,\r\n                    //   `${StaticData.domainIp}/transmittal/exportExcel`\r\n                    // )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='xls'\r\n                  >\r\n                    <img src='/img/XLS.svg' alt='xls' />\r\n                    خروجی اکسل\r\n                  </a>\r\n                )}\r\n                {this.Permision.handlePermision(\r\n                  this.state.role,\r\n                  'main_transmittal_export'\r\n                ) && (\r\n                  <a\r\n                    href={OutputFilter.handleFilter(\r\n                      this.state.textSearch,\r\n                      this.state.search,\r\n                      `${StaticData.domainIp}/transmittal/exportPdf`\r\n                    )}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                    className='pdf'\r\n                  >\r\n                    <img src='/img/PDF.svg' alt='PDF' />\r\n                    خروجی pdf\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Customization\\listLink.js",["3176","3177","3178"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport handleString from '../handleString'\r\nfunction ListLink (props) {\r\n  const [array, setArray] = useState([])\r\n  const [value, setValue] = useState('')\r\n  useEffect(() => {\r\n    setArray(\r\n      Object.keys(props.list).map(data => {\r\n        return props.list[data]\r\n      })\r\n    )\r\n  }, props)\r\n  function handleFilter (e) {\r\n    let { value } = e.target\r\n    setValue(value)\r\n    let filter = props.list.filter(data => data.value.includes(value))\r\n    setArray(filter)\r\n  }\r\n  return (\r\n    <div className='main-list-create'>\r\n      <div className='search'>\r\n        <input\r\n          placeholder='جستجو...'\r\n          onChange={handleFilter}\r\n          value={handleString(value)}\r\n        />\r\n      </div>\r\n      <div className='main-list ltr'>\r\n        {array.map((data, key) =>\r\n          !data.enabled ? (\r\n            <a className='disabled ltr' key={key}>\r\n              {data.label}\r\n            </a>\r\n          ) : (\r\n            <Link\r\n              to={{\r\n                pathname: `/create-vendor-document`,\r\n                state: { status: data.label }\r\n              }}\r\n            >\r\n              {handleString(data.label)}\r\n            </Link>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ListLink\r\n","E:\\bidboland\\src\\Project\\vendorTransmittal\\ConstructionEngineer.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\index-transmittal.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR5\\ReviewResult.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR4\\HSE_HAZOOP.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\Responsible.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\handleDescription.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\RejectReasons.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\ImprovementType.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIAccess.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\tab.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\AccessLevel.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR3\\ReviewResult.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\StaticList.js",[],"E:\\bidboland\\src\\Project\\TQ\\Moshaver.js",[],"E:\\bidboland\\src\\Project\\TQ\\create-show.js",[],"E:\\bidboland\\src\\Project\\TQ\\PeyMankarControl.js",[],"E:\\bidboland\\src\\Project\\TQ\\Karfarma.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\NCM.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\AN.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\AP.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\addReplay.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\RJ.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\subsidiary\\CM.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\ReplaySheet.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\TransmittalDisabled.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\CommentSheet.js",["3179","3180"],"import React, { Component } from 'react'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport Cookies from 'js-cookie'\r\nimport DatePicker from 'react-datepicker2'\r\nimport Select from 'react-select'\r\nimport axios from 'axios'\r\nimport StaticData from '../../staticData'\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport RJ from './RJ'\r\nimport AN from './AN'\r\nimport CM from './CM'\r\nimport AP from './AP'\r\nimport NCM from './NCM'\r\nimport Loading from '../../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport getCustomFormat from '../../getCustomFormat'\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded'\r\nimport moment from 'moment-jalaali'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport Permision from '../../permision/permision'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\n\r\nexport default class CommetnSheet extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Date = null\r\n    this.Permision = new Permision()\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.text = ''\r\n    this.state = {\r\n      popUp: false,\r\n      foucs: '',\r\n      token: Cookies.get('token'),\r\n      userDetail: Cookies.get('userDetail')\r\n        ? JSON.parse(Cookies.get('userDetail'))\r\n        : null,\r\n      cc: '',\r\n      commentSheetDate: '',\r\n      contractNumber: '',\r\n      documentList: [],\r\n      from: '',\r\n      to: '',\r\n      transmittalDate: '',\r\n      transmittalNumber: '',\r\n      CommentSheetNo: this.text,\r\n      momDate: null,\r\n      momNo: '',\r\n      documentNumberSelected: '',\r\n      documentDetail: {},\r\n      status2: '',\r\n      letterNo: '',\r\n      data: {},\r\n      pictureShow: '',\r\n      redirect: false,\r\n      disabled: false,\r\n      detail: {},\r\n      dateDisabld: '',\r\n      redirectContinue: false,\r\n      disabledButton: false,\r\n      id_Commnet: '',\r\n      checkPermision: false,\r\n      transmittal_id: '',\r\n      CheckVendor: true,\r\n      reject: false,\r\n      popUp: false,\r\n      verify: '',\r\n      savedStatus: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.setState(this.props)\r\n    this.Date = this.props.commentSheetDate\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      this.props = nextProps\r\n      this.setState(this.props)\r\n      this.Date = this.props.commentSheetDate\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = async e => {\r\n    await this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  handleBlurCommentSheetNo = e => {\r\n    this.setState({ foucs: '' })\r\n    // if (!this.state.CommentSheetNo.includes(this.text) && e.target.value !== '') {\r\n    //     this.setState({ CommentSheetNo: this.text + e.target.value })\r\n    // }\r\n  }\r\n  handleDocumentNumber = async newValue => {\r\n    await axios\r\n      .get(\r\n        `${StaticData.domainIp}/vendorCommentSheet/getByDocumentCode?documentCode=${newValue.value}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        }\r\n      )\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          await this.setState({\r\n            documentDetail: response.data.content,\r\n            disabled: response.data.content.readonly,\r\n            id_Commnet: response.data.content.commentsheet\r\n              ? response.data.content.commentsheet.id\r\n              : '',\r\n            verify: response.data.content.commentsheet\r\n              ? response.data.content.commentsheet.verify\r\n              : '',\r\n            documentNumberSelected: newValue,\r\n            message: response.data.content.commentsheet\r\n              ? response.data.content.commentsheet.message\r\n              : '',\r\n            CommentSheetNo: response.data.content.commentNo\r\n          })\r\n          if (response.data.content.readonly) {\r\n            let data\r\n            if (\r\n              response.data.content.commentsheet &&\r\n              response.data.content.commentsheet.status === 'CM'\r\n            ) {\r\n              data = await Object.keys(\r\n                response.data.content.commentsheet.detail\r\n              ).map(_data => {\r\n                return response.data.content.commentsheet.detail[_data]\r\n              })\r\n            } else {\r\n              data = (await response.data.content.commentsheet)\r\n                ? response.data.content.commentsheet.detail\r\n                : {}\r\n            }\r\n            await this.setState({\r\n              commentSheetDate: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.commentSheetDate\r\n                : '',\r\n              letterNo: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.letterNo\r\n                : '',\r\n              momNo: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.momNo\r\n                : '',\r\n              status2: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.status\r\n                : '',\r\n              savedStatus: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.status\r\n                : '',\r\n              detail: response.data.content.commentsheet ? data : {},\r\n              data: data,\r\n              dateDisabld: response.data.content.commentsheet\r\n                ? response.data.content.commentsheet.momDate\r\n                : null,\r\n              momDate: response.data.content.commentsheet.momDate\r\n                ? moment(\r\n                    `${response.data.content.commentsheet.momDate}`,\r\n                    'YYYY/M/D'\r\n                  )\r\n                : null\r\n            })\r\n          } else {\r\n            this.setState({\r\n              commentSheetDate: this.Date,\r\n              letterNo: '',\r\n              momNo: '',\r\n              status2: 'AP',\r\n              detail: {}\r\n            })\r\n          }\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n          if (err.response.status === 404) {\r\n            setTimeout(() => {\r\n              this.props.handleBack(true)\r\n            }, 5000)\r\n          }\r\n        }\r\n      })\r\n  }\r\n  handleShow = () => {\r\n    if (this.state.status2 === 'RJ') {\r\n      return (\r\n        <RJ\r\n          foucs={this.state.foucs}\r\n          OnFocus={this.OnFocus}\r\n          OnBlur={this.OnBlur}\r\n          getData={e => this.setState({ data: e })}\r\n          disabled={\r\n            !(\r\n              !this.state.CheckVendor &&\r\n              this.state.documentNumberSelected !== '' &&\r\n              (this.state.verify === '0' || !this.state.disabled)\r\n            )\r\n          }\r\n          detail={\r\n            this.state.disabled\r\n              ? this.state.savedStatus === this.state.status2\r\n                ? this.state.detail\r\n                : {\r\n                    text: '',\r\n                    AttachmentFileName: [],\r\n                    AttachmentFile: [],\r\n                    loading: '',\r\n                    NativeFile: [],\r\n                    NativeFileName: [],\r\n                    DocumentFile: [],\r\n                    DocumentFileName: []\r\n                  }\r\n              : this.state.detail\r\n          }\r\n          edit={\r\n            !this.state.CheckVendor &&\r\n            this.state.documentNumberSelected !== '' &&\r\n            (this.state.verify === '0' || !this.state.disabled)\r\n          }\r\n        />\r\n      )\r\n    } else if (this.state.status2 === 'AN') {\r\n      return (\r\n        <AN\r\n          foucs={this.state.foucs}\r\n          OnFocus={this.OnFocus}\r\n          OnBlur={this.OnBlur}\r\n          getData={e => this.setState({ data: e })}\r\n          disabled={\r\n            !(\r\n              !this.state.CheckVendor &&\r\n              this.state.documentNumberSelected !== '' &&\r\n              (this.state.verify === '0' || !this.state.disabled)\r\n            )\r\n          }\r\n          detail={\r\n            this.state.disabled\r\n              ? this.state.savedStatus === this.state.status2\r\n                ? this.state.detail\r\n                : {\r\n                    text: '',\r\n                    AttachmentFileName: [],\r\n                    AttachmentFile: [],\r\n                    loading: '',\r\n                    NativeFile: [],\r\n                    NativeFileName: [],\r\n                    DocumentFile: [],\r\n                    DocumentFileName: []\r\n                  }\r\n              : this.state.detail\r\n          }\r\n          edit={\r\n            !this.state.CheckVendor &&\r\n            this.state.documentNumberSelected !== '' &&\r\n            (this.state.verify === '0' || !this.state.disabled)\r\n          }\r\n        />\r\n      )\r\n    } else if (this.state.status2 === 'CM') {\r\n      return (\r\n        <CM\r\n          foucs={this.state.foucs}\r\n          OnFocus={this.OnFocus}\r\n          OnBlur={this.OnBlur}\r\n          getData={e => this.setState({ data: e })}\r\n          disabled={\r\n            !(\r\n              !this.state.CheckVendor &&\r\n              this.state.documentNumberSelected !== '' &&\r\n              (this.state.verify === '0' || !this.state.disabled)\r\n            )\r\n          }\r\n          detail={\r\n            this.state.disabled\r\n              ? this.state.savedStatus === this.state.status2\r\n                ? this.state.detail\r\n                : {\r\n                    0: {\r\n                      text: '',\r\n                      AttachmentFileName: [],\r\n                      AttachmentFile: [],\r\n                      loading: '',\r\n                      NativeFile: [],\r\n                      NativeFileName: [],\r\n                      DocumentFile: [],\r\n                      DocumentFileName: []\r\n                    }\r\n                  }\r\n              : this.state.detail\r\n          }\r\n          edit={\r\n            !this.state.CheckVendor &&\r\n            this.state.documentNumberSelected !== '' &&\r\n            (this.state.verify === '0' || !this.state.disabled)\r\n          }\r\n        />\r\n      )\r\n    } else if (this.state.status2 === 'AP') {\r\n      return (\r\n        <AP\r\n          foucs={this.state.foucs}\r\n          OnFocus={this.OnFocus}\r\n          OnBlur={this.OnBlur}\r\n          getData={e => this.setState({ data: e })}\r\n          disabled={\r\n            !(\r\n              !this.state.CheckVendor &&\r\n              this.state.documentNumberSelected !== '' &&\r\n              (this.state.verify === '0' || !this.state.disabled)\r\n            )\r\n          }\r\n          detail={\r\n            this.state.disabled\r\n              ? this.state.savedStatus === this.state.status2\r\n                ? this.state.detail\r\n                : {\r\n                    text: '',\r\n                    AttachmentFileName: [],\r\n                    AttachmentFile: [],\r\n                    loading: '',\r\n                    NativeFile: [],\r\n                    NativeFileName: [],\r\n                    DocumentFile: [],\r\n                    DocumentFileName: []\r\n                  }\r\n              : this.state.detail\r\n          }\r\n          edit={\r\n            !this.state.CheckVendor &&\r\n            this.state.documentNumberSelected !== '' &&\r\n            (this.state.verify === '0' || !this.state.disabled)\r\n          }\r\n        />\r\n      )\r\n    } else if (this.state.status2 === 'NCM') {\r\n      return (\r\n        <NCM\r\n          foucs={this.state.foucs}\r\n          OnFocus={this.OnFocus}\r\n          OnBlur={this.OnBlur}\r\n          getData={e => this.setState({ data: e })}\r\n          disabled={\r\n            !(\r\n              !this.state.CheckVendor &&\r\n              this.state.documentNumberSelected !== '' &&\r\n              (this.state.verify === '0' || !this.state.disabled)\r\n            )\r\n          }\r\n          detail={\r\n            this.state.disabled\r\n              ? this.state.savedStatus === this.state.status2\r\n                ? this.state.detail\r\n                : {\r\n                    text: '',\r\n                    AttachmentFileName: [],\r\n                    AttachmentFile: [],\r\n                    loading: '',\r\n                    NativeFile: [],\r\n                    NativeFileName: [],\r\n                    DocumentFile: [],\r\n                    DocumentFileName: []\r\n                  }\r\n              : this.state.detail\r\n          }\r\n          edit={\r\n            !this.state.CheckVendor &&\r\n            this.state.documentNumberSelected !== '' &&\r\n            (this.state.verify === '0' || !this.state.disabled)\r\n          }\r\n        />\r\n      )\r\n    }\r\n  }\r\n  handleSubmit = async status => {\r\n    let checkStatus = false,\r\n      i = 0\r\n    const check =\r\n      this.props.id &&\r\n      this.state.documentNumberSelected !== '' &&\r\n      this.state.from !== '' &&\r\n      this.state.to !== '' &&\r\n      this.state.cc !== '' &&\r\n      this.state.CommentSheetNo !== '' &&\r\n      this.state.status2 !== ''\r\n    let result\r\n    if (this.state.status2 === 'CM') {\r\n      let cm = this.state.data\r\n      result = await Object.assign(\r\n        {},\r\n        Object.keys(cm).map(data => {\r\n          cm[data].AttachmentFile = Object.assign({}, cm[data].AttachmentFile)\r\n          cm[data].NativeFile = Object.assign({}, cm[data].NativeFile)\r\n          cm[data].DocumentFile = Object.assign({}, cm[data].DocumentFile)\r\n          return cm[data]\r\n        })\r\n      )\r\n      while (i < this.state.data.length) {\r\n        checkStatus = cm[i].text !== ''\r\n        if (!checkStatus) {\r\n          break\r\n        }\r\n        i++\r\n      }\r\n    } else if (\r\n      this.state.status2 === 'RJ' ||\r\n      this.state.status2 === 'AN' ||\r\n      this.state.status2 === 'AP' ||\r\n      this.state.status2 === 'NCM'\r\n    ) {\r\n      let result = this.state.data\r\n      result.AttachmentFile = Object.assign({}, result.AttachmentFile)\r\n      result.NativeFile = Object.assign({}, result.NativeFile)\r\n      result.DocumentFile = await Object.assign({}, result.DocumentFile)\r\n      checkStatus = result.text !== ''\r\n    }\r\n    if (checkStatus && check) {\r\n      if (status === 'continue') {\r\n        this.setState({ loading: 'submit-continue' })\r\n      } else {\r\n        this.setState({ loading: 'submit' })\r\n      }\r\n      await this.setState({ disabledButton: true })\r\n      setTimeout(async () => {\r\n        let datareg = await new FormData()\r\n        await datareg.append('transmittal_id', this.props.id)\r\n        await datareg.append(\r\n          'documentCode',\r\n          this.state.documentNumberSelected.value\r\n        )\r\n        await datareg.append('from', this.state.from)\r\n        await datareg.append('to', this.state.to)\r\n        await datareg.append('cc', this.state.cc)\r\n        await datareg.append('commentNo', this.state.CommentSheetNo)\r\n        await datareg.append('letterNo', this.state.letterNo)\r\n        await datareg.append(\r\n          'momDate',\r\n          getCustomFormat(this.state.momDate, false)\r\n        )\r\n        await datareg.append('momNo', this.state.momNo)\r\n        await datareg.append('status', this.state.status2)\r\n        await datareg.append('detail', JSON.stringify(result))\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/vendorCommentSheet/create`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: this.state.token\r\n              ? `Bearer ${this.state.token}`\r\n              : null\r\n          }\r\n        })\r\n          .then(async response => {\r\n            this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              Notification.notify(Message.text(900), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ disabledButton: false })\r\n                if (status === 'continue') {\r\n                  await window.location.reload(true)\r\n                } else {\r\n                  await this.setState({ redirect: true })\r\n                }\r\n              }, 5000)\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n              this.setState({ disabledButton: false })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '', disabledButton: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }, 100)\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleEdit = async () => {\r\n    let checkStatus = false,\r\n      i = 0\r\n    const check =\r\n      this.props.id &&\r\n      this.state.documentNumberSelected !== '' &&\r\n      this.state.from !== '' &&\r\n      this.state.to !== '' &&\r\n      this.state.cc !== '' &&\r\n      this.state.CommentSheetNo !== '' &&\r\n      this.state.status2 !== ''\r\n    let result = await {}\r\n    if (this.state.status2 === 'CM') {\r\n      let cm = await this.state.data\r\n      result = await Object.assign(\r\n        {},\r\n        Object.keys(cm).map(data => {\r\n          cm[data].AttachmentFile = Object.assign({}, cm[data].AttachmentFile)\r\n          cm[data].NativeFile = Object.assign({}, cm[data].NativeFile)\r\n          cm[data].DocumentFile = Object.assign({}, cm[data].DocumentFile)\r\n          return cm[data]\r\n        })\r\n      )\r\n      while (i < this.state.data.length) {\r\n        checkStatus = cm[i].text !== ''\r\n        if (!checkStatus) {\r\n          break\r\n        }\r\n        i++\r\n      }\r\n    } else if (\r\n      this.state.status2 === 'RJ' ||\r\n      this.state.status2 === 'AN' ||\r\n      this.state.status2 === 'AP' ||\r\n      this.state.status2 === 'NCM'\r\n    ) {\r\n      let result = await this.state.data\r\n      result.AttachmentFile = await Object.assign({}, result.AttachmentFile)\r\n      result.NativeFile = await Object.assign({}, result.NativeFile)\r\n      result.DocumentFile = await Object.assign({}, result.DocumentFile)\r\n      checkStatus = result.text !== ''\r\n    }\r\n    if (checkStatus && check) {\r\n      this.setState({ disabledButton: true, loading: 'edit' })\r\n      setTimeout(async () => {\r\n        let datareg = await new FormData()\r\n        await datareg.append('id', this.state.id_Commnet)\r\n        await datareg.append('transmittal_id', this.state.transmittalNumber)\r\n        await datareg.append(\r\n          'documentCode',\r\n          this.state.documentNumberSelected.value\r\n        )\r\n        await datareg.append('from', this.state.from)\r\n        await datareg.append('to', this.state.to)\r\n        await datareg.append('cc', this.state.cc)\r\n        await datareg.append('commentNo', this.state.CommentSheetNo)\r\n        await datareg.append('letterNo', this.state.letterNo)\r\n        await datareg.append(\r\n          'momDate',\r\n          getCustomFormat(this.state.momDate, false)\r\n        )\r\n        await datareg.append('momNo', this.state.momNo)\r\n        await datareg.append('status', this.state.status2)\r\n        await datareg.append('detail', JSON.stringify(result))\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/vendorCommentSheet/update`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: this.state.token\r\n              ? `Bearer ${this.state.token}`\r\n              : null\r\n          }\r\n        })\r\n          .then(async response => {\r\n            this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              Notification.notify(Message.text(906), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ disabledButton: false })\r\n                await window.location.reload(true)\r\n              }, 5000)\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n              this.setState({ disabledButton: false })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '', disabledButton: false })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }, 100)\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  haldeShowName = obj => {\r\n    let allData = []\r\n    for (let value in obj) {\r\n      allData.push(obj[value])\r\n    }\r\n    return allData\r\n  }\r\n  ApproveReject = async (status, message = null) => {\r\n    if (this.state.token) {\r\n      let datareg = new FormData()\r\n      this.setState({ disabledButton: true })\r\n      await datareg.append('commentId', this.state.id_Commnet)\r\n      await datareg.append('verify', status)\r\n      await datareg.append('message', message === null ? '' : message)\r\n      if (status === 1) {\r\n        await this.setState({ loading: 'submit' })\r\n      } else if (status === 10 && message !== null) {\r\n        await this.setState({ loading: 'submit-unaccept' })\r\n      }\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/vendorCommentSheet/verifyCommentSheet`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await this.setState({ loading: '', popUp: false })\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(910), 'success')\r\n            setTimeout(async () => {\r\n              this.setState({ disabledButton: false })\r\n              await this.props.changeRedirect(true)\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabledButton: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          await this.setState({\r\n            loading: '',\r\n            popUp: false,\r\n            disabledButton: false\r\n          })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleShowButton = () => {\r\n    if (!this.state.CheckVendor && this.state.documentNumberSelected !== '') {\r\n      if (\r\n        this.state.verify === '2' &&\r\n        this.Permision.handlePermision(\r\n          this.state.role,\r\n          'vpis_comment_sheet_verify',\r\n          true\r\n        )\r\n      ) {\r\n        return (\r\n          <div className='submit-form col-12 mt-3 mb-3 justify-content-center rtl'>\r\n            <button\r\n              className='mr-2 m-2 accept'\r\n              onClick={() => this.ApproveReject(1)}\r\n              disabled={this.state.disabledButton}\r\n            >\r\n              {this.state.loading === 'submit' ? (\r\n                <Loading className='form-loader' />\r\n              ) : (\r\n                <DoneIcon />\r\n              )}\r\n              تائید\r\n            </button>\r\n            <button\r\n              className='mr-2 m-2'\r\n              disabled={this.state.disabledButton}\r\n              onClick={() => this.setState({ reject: true, popUp: true })}\r\n            >\r\n              <CloseRoundedIcon />\r\n              رد\r\n            </button>\r\n          </div>\r\n        )\r\n      } else if (\r\n        !this.state.disabled &&\r\n        this.Permision.handlePermision(\r\n          this.state.role,\r\n          'vpis_comment_sheet_send',\r\n          true\r\n        )\r\n      ) {\r\n        return (\r\n          <div className='submit-form justify-content-end col-12 mt-3 mb-3'>\r\n            <button\r\n              className='justify-content-center'\r\n              onClick={() => this.handleSubmit('')}\r\n              disabled={this.state.disabledButton}\r\n            >\r\n              ثبت اطلاعات\r\n              {this.state.loading === 'submit' ? (\r\n                <Loading className='form-loader' />\r\n              ) : (\r\n                <DoneIcon />\r\n              )}\r\n            </button>\r\n            <button\r\n              className='ml-3 continue justify-content-center'\r\n              onClick={() => this.handleSubmit('continue')}\r\n              disabled={this.state.disabledButton}\r\n            >\r\n              ثبت و ادامه\r\n              {this.state.loading === 'submit-continue' ? (\r\n                <Loading className='form-loader mr-0 ml-1' />\r\n              ) : (\r\n                <DoneIcon className='mr-0 ml-1' />\r\n              )}\r\n            </button>\r\n          </div>\r\n        )\r\n      } else if (\r\n        this.state.verify === '0' &&\r\n        this.Permision.handlePermision(\r\n          this.state.role,\r\n          'vpis_comment_sheet_send',\r\n          true\r\n        )\r\n      ) {\r\n        return (\r\n          <div className='submit-form justify-content-end col-12 mt-3 mb-3'>\r\n            <button\r\n              className='ml-3 continue justify-content-end'\r\n              onClick={this.handleEdit}\r\n              disabled={this.state.disabledButton}\r\n            >\r\n              ویرایش\r\n              {this.state.loading === 'edit' ? (\r\n                <Loading className='form-loader' />\r\n              ) : (\r\n                <EditRoundedIcon />\r\n              )}\r\n            </button>\r\n          </div>\r\n        )\r\n      } else return ''\r\n    } else return ''\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      if (this.state.redirect) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/purchase-engineering`,\r\n              state: { select: 2 }\r\n            }}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <React.Fragment>\r\n            {this.state.verify === '0' ? (\r\n              <div className='col-12'>\r\n                <div className='message-error'>\r\n                  <label className='strong'>\r\n                    کامنت شیت به دلیل زیر رد شد :{' '}\r\n                  </label>\r\n                  <p className='m-0'>{this.state.message}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <div className='form row justify-content-start ltr'>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form data ${\r\n                    handleCheckText(this.state.transmittalDate) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <div className='icon-field'>\r\n                    <DateRangeRoundedIcon />\r\n                  </div>\r\n                  <div className='col p-0'>\r\n                    <label>\r\n                      Transmittal Date\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    </label>\r\n                    <input\r\n                      className='text-left'\r\n                      readOnly={true}\r\n                      name='transmittalDate'\r\n                      value={handleString(this.state.transmittalDate)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.transmittalNumber)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    Transmittal No\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='transmittalNumber'\r\n                    value={handleString(this.state.transmittalNumber)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.from) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    From\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='from'\r\n                    value={handleString(this.state.from)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.contractNumber) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    Contarct No.\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='contractNumber'\r\n                    value={handleString(this.state.contractNumber)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.cc) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    CC\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='cc'\r\n                    value={handleString(this.state.cc)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.to) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    TO\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='to'\r\n                    value={handleString(this.state.to)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form data ${\r\n                    handleCheckText(this.state.CommnetSheetDate) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <div className='icon-field'>\r\n                    <DateRangeRoundedIcon />\r\n                  </div>\r\n                  <div className='col p-0'>\r\n                    <label>\r\n                      Comment Sheet Date.\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    </label>\r\n                    <input\r\n                      className='text-left'\r\n                      readOnly={true}\r\n                      name='commentSheetDate'\r\n                      value={handleString(this.state.commentSheetDate)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div className='field-form selectBox ltr'>\r\n                  <Select\r\n                    onChange={newValue => this.handleDocumentNumber(newValue)}\r\n                    name='documentNumberSelected'\r\n                    options={this.state.documentList}\r\n                    value={this.state.documentNumberSelected}\r\n                    className='basic-multi-select'\r\n                    classNamePrefix='select'\r\n                    placeholder={\r\n                      <label>\r\n                        Document No\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    this.state.foucs === 'momDate' ||\r\n                    this.state.momDate !== null ||\r\n                    this.state.dateDisabld !== ''\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <div className='icon-field'>\r\n                    <DateRangeRoundedIcon />\r\n                  </div>\r\n                  <div className='col p-0'>\r\n                    <label>MOM Date</label>\r\n                    <DatePicker\r\n                      className='text-left'\r\n                      value={this.state.momDate}\r\n                      persianDigits={true}\r\n                      isGregorian={true}\r\n                      timePicker={false}\r\n                      onChange={momDate => this.setState({ momDate })}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    this.state.foucs === 'momNo' ||\r\n                    handleCheckText(this.state.momNo)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>MOM No. (For Open Status)</label>\r\n                  <input\r\n                    className='text-left'\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    name='momNo'\r\n                    value={handleString(this.state.momNo)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.CommentSheetNo) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <label>\r\n                    CommentSheet No.\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    className='text-left'\r\n                    name='CommentSheetNo'\r\n                    value={handleString(this.state.CommentSheetNo)}\r\n                    readOnly={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.documentTitle)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>Document Title</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='documentTitle'\r\n                    value={handleString(\r\n                      this.state.documentDetail.documentTitle\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.revision)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>Rev</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='revision'\r\n                    value={handleString(this.state.documentDetail.revision)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.status)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>P.O.I</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='status'\r\n                    value={handleString(this.state.documentDetail.status)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.replySheetNumber)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>Reply Sheet No</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='replySheetNumber'\r\n                    value={handleString(\r\n                      this.state.documentDetail.replySheetNumber\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.replySheetDate)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <div className='icon-field'>\r\n                    <DateRangeRoundedIcon />\r\n                  </div>\r\n                  <div className='col p-0'>\r\n                    <label>Reply Sheet Date</label>\r\n                    <input\r\n                      readOnly={true}\r\n                      className='text-left'\r\n                      name='replySheetDate'\r\n                      value={handleString(\r\n                        this.state.documentDetail.replySheetDate\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.disc)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>Discipline</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='disc'\r\n                    value={handleString(this.state.documentDetail.disc)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${\r\n                    handleCheckText(this.state.documentDetail.class)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <label>Class</label>\r\n                  <input\r\n                    readOnly={true}\r\n                    className='text-left'\r\n                    name='class'\r\n                    value={handleString(this.state.documentDetail.class)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form ${this.state.foucs === 'letterNo' ||\r\n                    handleCheckText(this.state.letterNo)}`}\r\n                >\r\n                  <label>LET No</label>\r\n                  <input\r\n                    className='text-left'\r\n                    name='letterNo'\r\n                    value={handleString(this.state.letterNo)}\r\n                    onChange={this.handleChange}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12 d-flex align-items-center'>\r\n                <div className='field-radio w-100'>\r\n                  <label>\r\n                    status :<span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <div className='main-radio'>\r\n                    <div className='radio-button mr-auto ml-auto'>\r\n                      {!(\r\n                        !this.state.CheckVendor &&\r\n                        handleCheckText(this.state.documentNumberSelected) &&\r\n                        (this.state.verify === '0' || !this.state.disabled)\r\n                      ) ? (\r\n                        ''\r\n                      ) : (\r\n                        <input\r\n                          className='d-none'\r\n                          type='radio'\r\n                          id='AP'\r\n                          onClick={() => this.setState({ status2: 'AP' })}\r\n                        />\r\n                      )}\r\n                      <label htmlFor='AP'>\r\n                        {this.state.status2 === 'AP' ? (\r\n                          <RadioButtonCheckedIcon />\r\n                        ) : (\r\n                          <RadioButtonUncheckedIcon />\r\n                        )}\r\n                        AP\r\n                      </label>\r\n                    </div>\r\n                    <div className='radio-button mr-auto ml-auto'>\r\n                      {!(\r\n                        !this.state.CheckVendor &&\r\n                        handleCheckText(this.state.documentNumberSelected) &&\r\n                        (this.state.verify === '0' || !this.state.disabled)\r\n                      ) ? (\r\n                        ''\r\n                      ) : (\r\n                        <input\r\n                          className='d-none'\r\n                          type='radio'\r\n                          id='AN'\r\n                          onClick={() => this.setState({ status2: 'AN' })}\r\n                        />\r\n                      )}\r\n                      <label htmlFor='AN'>\r\n                        {this.state.status2 === 'AN' ? (\r\n                          <RadioButtonCheckedIcon />\r\n                        ) : (\r\n                          <RadioButtonUncheckedIcon />\r\n                        )}\r\n                        AN\r\n                      </label>\r\n                    </div>\r\n                    <div className='radio-button mr-auto ml-auto'>\r\n                      {!(\r\n                        !this.state.CheckVendor &&\r\n                        handleCheckText(this.state.documentNumberSelected) &&\r\n                        (this.state.verify === '0' || !this.state.disabled)\r\n                      ) ? (\r\n                        ''\r\n                      ) : (\r\n                        <input\r\n                          className='d-none'\r\n                          type='radio'\r\n                          id='NCM'\r\n                          onClick={() => this.setState({ status2: 'NCM' })}\r\n                        />\r\n                      )}\r\n                      <label htmlFor='NCM'>\r\n                        {this.state.status2 === 'NCM' ? (\r\n                          <RadioButtonCheckedIcon />\r\n                        ) : (\r\n                          <RadioButtonUncheckedIcon />\r\n                        )}\r\n                        NCM\r\n                      </label>\r\n                    </div>\r\n                    <div className='radio-button mr-auto ml-auto'>\r\n                      {!(\r\n                        !this.state.CheckVendor &&\r\n                        handleCheckText(this.state.documentNumberSelected) &&\r\n                        (this.state.verify === '0' || !this.state.disabled)\r\n                      ) ? (\r\n                        ''\r\n                      ) : (\r\n                        <input\r\n                          className='d-none'\r\n                          type='radio'\r\n                          id='CM'\r\n                          onClick={() => this.setState({ status2: 'CM' })}\r\n                        />\r\n                      )}\r\n                      <label htmlFor='CM'>\r\n                        {this.state.status2 === 'CM' ? (\r\n                          <RadioButtonCheckedIcon />\r\n                        ) : (\r\n                          <RadioButtonUncheckedIcon />\r\n                        )}\r\n                        CM\r\n                      </label>\r\n                    </div>\r\n                    <div className='radio-button mr-auto ml-auto'>\r\n                      {!(\r\n                        !this.state.CheckVendor &&\r\n                        handleCheckText(this.state.documentNumberSelected) &&\r\n                        (this.state.verify === '0' || !this.state.disabled)\r\n                      ) ? (\r\n                        ''\r\n                      ) : (\r\n                        <input\r\n                          className='d-none'\r\n                          type='radio'\r\n                          id='RJ'\r\n                          onClick={() => this.setState({ status2: 'RJ' })}\r\n                        />\r\n                      )}\r\n                      <label htmlFor='RJ'>\r\n                        {this.state.status2 === 'RJ' ? (\r\n                          <RadioButtonCheckedIcon />\r\n                        ) : (\r\n                          <RadioButtonUncheckedIcon />\r\n                        )}\r\n                        RJ\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {this.handleShow()}\r\n              {handleCheckText(this.state.status2) ? (\r\n                <React.Fragment>\r\n                  <div className='title-password col-12'>\r\n                    <h2 className='IranSans_Bold'>Consultant</h2>\r\n                    <div className='line mr-0 ml-3'></div>\r\n                  </div>\r\n                  {this.state.userDetail ? (\r\n                    <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                      <div className={`field-form`}>\r\n                        <label>\r\n                          {handleString(\r\n                            `${this.state.userDetail.first_name} ${this.state.userDetail.last_name}`\r\n                          )}\r\n                          <span className='star IranSans_Bold'>*</span>\r\n                        </label>\r\n                        <label\r\n                          className='upload-label signEnglish'\r\n                          onClick={() =>\r\n                            this.setState({\r\n                              popUp: true,\r\n                              pictureShow: this.state.userDetail.sign\r\n                            })\r\n                          }\r\n                        >\r\n                          sign\r\n                          <AttachFileIcon />\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                  {this.state.popUp ? (\r\n                    <Sign\r\n                      close={e => this.setState({ popUp: e, reject: e })}\r\n                      pictureShow={this.state.pictureShow}\r\n                      reject={this.state.reject}\r\n                      ApproveReject={this.ApproveReject}\r\n                      loading={this.state.loading}\r\n                      disabled={this.state.disabledButton}\r\n                    />\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </React.Fragment>\r\n              ) : (\r\n                ''\r\n              )}\r\n              {this.state.documentNumberSelected !== ''\r\n                ? this.handleShowButton()\r\n                : ''}\r\n            </div>\r\n          </React.Fragment>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      errorText: ''\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div\r\n        className='backGroundPopup'\r\n        onClick={() => (!this.props.reject ? this.props.close(false) : '')}\r\n      >\r\n        {this.props.reject ? (\r\n          <div className='col-xl-4 col-lg-4 col-md-8 col-12 mb-5'>\r\n            <div className='box-wellcome'>\r\n              <div className='main-textarea'>\r\n                <textarea\r\n                  onChange={e => this.setState({ errorText: e.target.value })}\r\n                  placeholder='لطفا دلیل خود را وارد کنید'\r\n                  value={handleString(this.state.errorText)}\r\n                ></textarea>\r\n              </div>\r\n              <div className='buttons-wellcome justify-content-center'>\r\n                <button\r\n                  className='accept pt-0 pb-0'\r\n                  disabled={this.props.disabled}\r\n                  onClick={() =>\r\n                    this.state.errorText !== ''\r\n                      ? this.props.ApproveReject(10, this.state.errorText)\r\n                      : ''\r\n                  }\r\n                >\r\n                  {this.props.loading === 'submit-unaccept' ? (\r\n                    <Loading className='form-loader mr-0 ml-2' />\r\n                  ) : (\r\n                    <DoneIcon className='ml-2 mt-2 mb-2' />\r\n                  )}\r\n                  ثبت\r\n                </button>\r\n                <button\r\n                  className='pt-0 pb-0'\r\n                  onClick={() => this.props.close(false)}\r\n                >\r\n                  <CloseRoundedIcon className='ml-2' />\r\n                  بستن\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className='col-xl-6 col-lg-10 col-12'>\r\n            <img src={this.props.pictureShow} alt='sign' />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Project\\TQ\\Creater.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\Title.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\NCM.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\addReplay.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\AP.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\RJ.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\AN.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\main.js",[],"E:\\bidboland\\src\\Project\\Engineering\\dcc\\main\\CM.js",[],"E:\\bidboland\\src\\WBS\\API\\ItemForms.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\Inbox\\Reply.js",[],"E:\\bidboland\\src\\Tools\\E-mail\\HeaderContent.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\ListTab.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\ShowTab.js",["3181"],"import React, { useEffect } from 'react'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport handleString from '../../handleString'\r\n// import handleCheckText from '../../handleCheckText'\r\n\r\nconst ShowTab = props => {\r\n  const { level, select, page, edit_form } = props.state\r\n  function hadnleTab () {\r\n    const { select } = props.state\r\n    let listNumber = []\r\n    if (select === 1) {\r\n      listNumber = [1, 2, 3, 4]\r\n    } else if (select > 9) {\r\n      listNumber = [9, 10, 11, 12]\r\n    } else {\r\n      listNumber = [select - 1, select, select + 1, select + 2]\r\n    }\r\n    return listNumber\r\n  }\r\n  function handleShowTab (data) {\r\n    const { _listTab, role } = props.state\r\n    let filter = _listTab.filter(tab => parseInt(tab.id) === data)[0] || {}\r\n    const CheckPermission = props.Permision.handlePermision(\r\n      role,\r\n      filter.permision || ''\r\n    )\r\n    if (CheckPermission) {\r\n      return filter\r\n    } else return ''\r\n  }\r\n  function handleCheckShow (id) {\r\n    const { hasNot, numResult } = props.state\r\n    let result = hasNot ? id <= numResult : true\r\n    return result\r\n  }\r\n  async function ChangeTab (id) {\r\n    await props.handleState({\r\n      select: id,\r\n      // selectRev: '',\r\n      loading: '',\r\n      tab_9: 1,\r\n      tab_10: 1,\r\n      tab_7: 1,\r\n      tab_8: 1,\r\n      tab_6: 1,\r\n      tab_2: 1\r\n    })\r\n  }\r\n  const class_name = data =>\r\n    `item-tab position-relative rtl mr-0 w-100 p-0 col-12 ${\r\n      select === handleShowTab(data).id\r\n        ? 'active IranSans_Bold'\r\n        : page >= data\r\n        ? '_page IranSans_Bold'\r\n        : ''\r\n    }`\r\n  const check_edit = data => {\r\n    let num = handleString(edit_form) || '0'\r\n    let result = ''\r\n    if (num.length === 3) result = `${num.charAt(0)}${num.charAt(1)}`\r\n    else result = num.charAt(0)\r\n    let current_num = parseInt(result) || 0\r\n    return data === current_num\r\n  }\r\n  return (\r\n    select && (\r\n      <div className='tab-form rtl'>\r\n        <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start'>\r\n          {hadnleTab().map(\r\n            (data, key) =>\r\n              handleCheckShow(handleShowTab(data).id) &&\r\n              handleShowTab(data).id <= level && (\r\n                <div\r\n                  className={`col-xl-3 col-lg-3 col-3 mr-0 pr-3 pl-0`}\r\n                  key={key}\r\n                  onClick={() =>\r\n                    handleShowTab(data).id <= level\r\n                      ? ChangeTab(handleShowTab(data).id)\r\n                      : ''\r\n                  }\r\n                >\r\n                  <div className={class_name(data).trim()}>\r\n                    <span>\r\n                      <label\r\n                        className={`${\r\n                          select === handleShowTab(data).id\r\n                            ? 'IranSans_Bold'\r\n                            : ''\r\n                        }`}\r\n                      >\r\n                        {handleShowTab(data).id}.\r\n                      </label>\r\n                      {handleShowTab(data).nameTab}\r\n                    </span>\r\n                    {check_edit(data) && (\r\n                      <EditIcon className='available_tab edit' />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  )\r\n}\r\nexport default ShowTab\r\n","E:\\bidboland\\src\\tsrNew\\ShowTsr\\API.js",["3182","3183","3184","3185","3186","3187","3188","3189"],"import axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport StaticData from '../../staticData'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport moment from 'moment-jalaali'\r\nimport ListSign from '../ListSign'\r\n// import CheckDownload from '../../CheckDownload'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  handleSeparation = (num, data) => {\r\n    let empty_fr = [\r\n      {\r\n        documentNumber: '',\r\n        degreeTitle: '',\r\n        numberPages: '',\r\n        descriptionAttachment: '',\r\n        AttachementName: [],\r\n        Attachement: []\r\n      }\r\n    ]\r\n    let name = `tsr${num}_`\r\n    let result = {\r\n      status_copy: handleString(data.tsr1_status)\r\n    }\r\n    for (let value in data) {\r\n      if (value.includes(name)) {\r\n        let _nameRebuild = value.replace(name, '')\r\n        let ValueSend = data[value]\r\n        if (_nameRebuild.includes('foreign_attachment')) {\r\n          // result[_nameRebuild] = this.handleForeignLink(ValueSend || [])\r\n          result[_nameRebuild] = ValueSend || empty_fr\r\n        } else result[_nameRebuild] = ValueSend\r\n      }\r\n    }\r\n    let obj = { [`tsr${num}`]: result }\r\n    return obj\r\n  }\r\n  PermissiobEditOpen = (data, nameP) => {\r\n    let object = {}\r\n    for (let value in data) {\r\n      if (value.includes(nameP)) {\r\n        let answer = data[value]\r\n        object[value] = answer ? true : false\r\n      }\r\n    }\r\n    return object\r\n  }\r\n  SplitNum = num => {\r\n    let splitArray = num.toString().split('') || []\r\n    let { length } = splitArray\r\n    let number = 0,\r\n      tab = 0\r\n    switch (length) {\r\n      case 2:\r\n        number = splitArray[0]\r\n        tab = splitArray[1]\r\n        break\r\n      case 3:\r\n        number = `${splitArray[0]}${splitArray[1]}`\r\n        tab = splitArray[2]\r\n        break\r\n      default:\r\n        number = 0\r\n        tab = 0\r\n        break\r\n    }\r\n    number = parseInt(number)\r\n    tab = parseInt(tab)\r\n    return { number, tab }\r\n  }\r\n  FoundSelect = (edit_form, _obj) => {\r\n    let num = parseInt(edit_form) || 1\r\n    let checkLarger = num > 12\r\n    if (checkLarger) {\r\n      let { number } = this.SplitNum(num)\r\n      num = number\r\n    }\r\n    return num\r\n  }\r\n  handleSetSelect = (data, _obj) => {\r\n    let { tsr1_edit, tsr1_page, tsr1_edit_form } = data\r\n    const check = tsr1_edit === '1'\r\n    let select = check\r\n      ? this.FoundSelect(tsr1_edit_form, _obj)\r\n      : parseInt(tsr1_page)\r\n    return select\r\n  }\r\n  handleRemoveAuthor = ({ total_list, nameTab, userDetail }) => {\r\n    const { state, ListSign } = this.data\r\n    const { ListMandatory } = ListSign\r\n    const { select } = state\r\n    let id = this.handleSwitchTsrSignId(select)\r\n    let list = ListMandatory[`tsr${id}`] || []\r\n    const filter_list = list.filter(data => data.not_dispatch)\r\n    const obj_filter = filter_list[0] || {}\r\n    const data = state[`tsr${select}`] || {}\r\n    let { filter, filter3 } = obj_filter\r\n    let new_list = [\r\n      { value: handleString(data[filter]) },\r\n      { value: handleString(data[filter3]) }\r\n    ]\r\n    const results = total_list.filter(\r\n      ({ value: id1, label: label }) => !new_list.some(({ value: id2 }) => id2 === id1) && userDetail.name !== label\r\n    )\r\n    const nameEmpty = handleCheckText(nameTab) ? `${nameTab}_update_dispatch_empty` : 'update_dispatch_empty',\r\n      update_dispatch_empty = data[nameEmpty] ? true : false\r\n    const objEmpty = { value: 'empty', label: 'حذف دستگردانی' }\r\n    if (update_dispatch_empty) results.unshift(objEmpty)\r\n    return results\r\n  }\r\n  handleUniqUser = array => {\r\n    const uniq = [...new Map(array.map(item => [item.value, item])).values()]\r\n    return uniq\r\n  }\r\n  FetchApi = async (url, status) => {\r\n    const { state, handleState } = this.data\r\n    await axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${state.token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        handleState({ loading: '', firstLoading: false })\r\n        if (response.status === 200) {\r\n          const { content, role } = response.data\r\n          const { data } = content\r\n          const level = data.level\r\n          let _obj = {}\r\n          let _select = this.handleSetSelect(data, _obj)\r\n          for (let i = 1; i < 13; i++) {\r\n            _obj = await { ..._obj, ...this.handleSeparation(i, data) }\r\n          }\r\n          _obj['revisions'] = (await content.revisions) || []\r\n          _obj['role'] = await role\r\n          _obj['page'] = await _select\r\n          if (status !== 'endrev') {\r\n            _obj['select'] = await _select\r\n            _obj['level'] = await level\r\n          }\r\n          _obj['applicant_unit_select'] = await data.tsr1_applicant_unit\r\n          _obj['status'] = await data.tsr1_status\r\n          _obj['tsr_no'] = await _obj.tsr1.tsr_no\r\n          _obj['created_at_date'] = await _obj.tsr1.created_at_date\r\n          _obj['subject'] = await _obj.tsr1.subject\r\n          _obj['user_list'] = await this.handleUniqUser(data.AllUserList || [])\r\n          _obj['reject_reasons_selected'] = await data.tsr2_reject_reasons\r\n          _obj['edit'] = await data.tsr1_edit\r\n          _obj['edit_form'] = await data.tsr1_edit_form\r\n          _obj['edit_admin'] = await data.tsr1_edit_admin\r\n          _obj['selectRev'] = await ''\r\n          _obj['_can_sign'] = 'yes'\r\n          _obj['note_counts'] =data.note_counts || []\r\n          _obj['dispatch_history'] = (await data.dispatch_history) || {}\r\n          const objP = this.PermissiobEditOpen(data, 'can_open_edit')\r\n          const objPAdmin = this.PermissiobEditOpen(data, 'admin_update_allow')\r\n          const merge = { ..._obj, ...objP, ...objPAdmin }\r\n          await handleState(merge)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '', firstLoading: false })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleSwitch(status, message) {\r\n    switch (status) {\r\n      case 'accepted':\r\n        return {\r\n          verify: true,\r\n          verify_msg: handleString(message)\r\n        }\r\n      case 'reject':\r\n        return {\r\n          verify: false,\r\n          verify_msg: handleString(message),\r\n          reject_this_step: true\r\n        }\r\n      case 'comment':\r\n        return {\r\n          verify: false,\r\n          verify_msg: handleString(message),\r\n          edit_this_step: true\r\n        }\r\n      default:\r\n        return {}\r\n    }\r\n  }\r\n  handleVerify = async (status, data, message) => {\r\n    const { handleState } = this.data\r\n    let result = await this.handleSwitch(status, message)\r\n    const { id, token } = await this.data.state\r\n    let url = await `${StaticData.domainIp}/tsr_v1/${data.url}/${id}`\r\n    if (handleCheckText(token) && handleCheckText(id)) {\r\n      const datareg = await new FormData()\r\n      let a = {}\r\n      for (let item in result) {\r\n        let _value = result[item]\r\n        a[item] = _value\r\n        await datareg.append(item, _value)\r\n      }\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await handleState({ loading: '', rejectSelect: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(924), 'success')\r\n            setTimeout(async () => {\r\n              window.location.reload(true)\r\n              // await handleState({ redirect: false, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ loading: '', disabled: false, rejectSelect: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleMultiTabNumber = id => {\r\n    let { state } = this.data\r\n    let num = state[`tab_${id}`] || 0\r\n    // let result = num\r\n    return num\r\n  }\r\n  handleSwitchTsrSignId = _select => {\r\n    let result = ''\r\n    switch (_select) {\r\n      case 7:\r\n        let first7 = _select\r\n        let second7 = this.handleMultiTabNumber(_select)\r\n        if (second7) {\r\n          result = `${first7}_${second7}`\r\n        }\r\n        break\r\n      case 8:\r\n        let first8 = _select\r\n        let second8 = this.handleMultiTabNumber(_select)\r\n        if (second8) {\r\n          result = `${first8}_${second8}`\r\n        }\r\n        break\r\n      case 9:\r\n        let first9 = _select\r\n        let second9 = this.handleMultiTabNumber(_select)\r\n        if (second9) {\r\n          result = `${first9}_${second9}`\r\n        }\r\n        break\r\n      case 10:\r\n        let first10 = _select\r\n        let second10 = this.handleMultiTabNumber(_select)\r\n        if (second10) {\r\n          result = `${first10}_${second10}`\r\n        }\r\n        break\r\n      default:\r\n        result = _select\r\n    }\r\n    return result.toString()\r\n  }\r\n  handleSwitchid = _select => {\r\n    let result = ''\r\n    switch (_select) {\r\n      case 2:\r\n        let first2 = _select\r\n        let second2 = this.handleMultiTabNumber(_select)\r\n        if (second2) {\r\n          result = `${first2}${second2}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      case 6:\r\n        let first6 = _select\r\n        let second6 = this.handleMultiTabNumber(_select)\r\n        if (second6) {\r\n          result = `${first6}${second6}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      case 7:\r\n        let first7 = _select\r\n        let second7 = this.handleMultiTabNumber(_select)\r\n        if (second7) {\r\n          result = `${first7}${second7}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      case 8:\r\n        let first8 = _select\r\n        let second8 = this.handleMultiTabNumber(_select)\r\n        if (second8) {\r\n          result = `${first8}${second8}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      case 9:\r\n        let first9 = _select\r\n        let second9 = this.handleMultiTabNumber(_select)\r\n        if (second9) {\r\n          result = `${first9}${second9}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      case 10:\r\n        let first10 = _select\r\n        let second10 = this.handleMultiTabNumber(_select)\r\n        if (second10) {\r\n          result = `${first10}${second10}`\r\n          result = parseInt(result)\r\n        }\r\n        break\r\n      default:\r\n        result = _select\r\n    }\r\n    return result.toString()\r\n  }\r\n  handleOpenEditAdmin = async () => {\r\n    let state = this.data.state || {}\r\n    let { id, select, token } = state\r\n    const { handleState } = this.data\r\n    let number = this.handleSwitchid(select)\r\n    let url = `${StaticData.domainIp}/tsr_v1/openUpdateAdmin/${id}/page/${number}`\r\n    handleState({\r\n      loading: 'edit-form-admin',\r\n      disabled: true\r\n    })\r\n    await axios({\r\n      method: 'get',\r\n      url: url,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        await handleState({\r\n          loading: ''\r\n        })\r\n        if (response.status === 200) {\r\n          await Notification.notify(Message.text(926), 'success')\r\n          setTimeout(async () => {\r\n            await handleState({\r\n              disabled: false\r\n            })\r\n            window.location.reload(true)\r\n          }, 5000)\r\n        } else {\r\n          await handleState({\r\n            disabled: false\r\n          })\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({\r\n          disabled: false,\r\n          loading: ''\r\n        })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleOpenEdit = async () => {\r\n    let state = this.data.state || {}\r\n    let { id, select, token } = state\r\n    const { handleState } = this.data\r\n    let number = this.handleSwitchid(select)\r\n    let url = `${StaticData.domainIp}/tsr_v1/openUpdate/${id}/page/${number}`\r\n    handleState({\r\n      loading: 'edit-form',\r\n      disabled: true\r\n    })\r\n    await axios({\r\n      method: 'get',\r\n      url: url,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        await handleState({\r\n          loading: ''\r\n        })\r\n        if (response.status === 200) {\r\n          await Notification.notify(Message.text(926), 'success')\r\n          setTimeout(async () => {\r\n            await handleState({\r\n              disabled: false\r\n            })\r\n            window.location.reload(true)\r\n          }, 5000)\r\n        } else {\r\n          await handleState({\r\n            disabled: false\r\n          })\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({\r\n          disabled: false,\r\n          loading: ''\r\n        })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  filterUser = (value, name) => {\r\n    const check = handleCheckText(value) && handleCheckText(name)\r\n    let result = []\r\n    if (check) {\r\n      let state = this.data.state || {}\r\n      let user_list = state.user_list || []\r\n      let arrayName = name.split('_SD_')\r\n      arrayName.forEach(_name => {\r\n        let _list = user_list.filter(user => user[value] === _name)\r\n        result = result.concat(_list)\r\n      })\r\n    }\r\n    return result\r\n  }\r\n  fullListUser = () => {\r\n    let state = this.data.state || {}\r\n    let user_list = state.user_list || []\r\n    return user_list\r\n  }\r\n  handleCheckSigned = data => {\r\n    let list = this.fullListUser()\r\n    const check = typeof data === 'object' && data\r\n    let result = false\r\n    if (check) {\r\n      let _obj = data || {}\r\n      let { value } = _obj\r\n      let filter = list.filter(user => user.value === value)\r\n      result = filter.length === 1\r\n    }\r\n    return result\r\n  }\r\n  handleDispatchUpdate = async name => {\r\n    const { handleState, state } = this.data\r\n    let { id, token, select } = state\r\n    // const pageData = state[`tsr${select}`] || {}\r\n    let data = state[name] || {}\r\n    // const { dispatch_date } = this.handleNameDispatch()\r\n    // const dispatch_at = handleString(pageData[dispatch_date])\r\n    const { value, user_role, user_unit } = data\r\n    let number = this.handleSwitchid(select)\r\n\r\n    const checkEmpty = value === 'empty'\r\n    const check = handleCheckText(value) &&\r\n      handleCheckText(user_role) &&\r\n      handleCheckText(user_unit) &&\r\n      handleCheckText(id)\r\n    const checkResult = checkEmpty || check\r\n    if (checkResult) {\r\n      handleState({ loading: name, disabled: true })\r\n      const url = `${StaticData.domainIp}/tsr_v1/dispatchUpdate/${number}`\r\n      const datareg = await new FormData()\r\n      await datareg.append('tsr_id', handleString(id))\r\n      await datareg.append('value', handleString(value))\r\n      await datareg.append('user_role', handleString(user_role))\r\n      await datareg.append('user_unit', handleString(user_unit))\r\n      // await datareg.append('dispatch_at', dispatch_at)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(921), 'success')\r\n            setTimeout(() => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleDispatch = async name => {\r\n    const { handleState, state } = this.data\r\n    let { id, token, select } = state\r\n    let data = state[name] || {}\r\n    let { value, user_role, user_unit } = data\r\n    let number = this.handleSwitchid(select)\r\n    const checkEmpty = value === 'empty'\r\n    const check =\r\n      handleCheckText(value) &&\r\n      handleCheckText(user_role) &&\r\n      handleCheckText(user_unit) &&\r\n      handleCheckText(id)\r\n    const checkResult = checkEmpty || check\r\n    if (checkResult) {\r\n      handleState({ loading: name, disabled: true })\r\n      const url = `${StaticData.domainIp}/tsr_v1/dispatch/${number}`\r\n      const datareg = await new FormData()\r\n      await datareg.append('tsr_id', handleString(id))\r\n      await datareg.append('value', handleString(value))\r\n      await datareg.append('user_role', handleString(user_role))\r\n      await datareg.append('user_unit', handleString(user_unit))\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(929), 'success')\r\n            setTimeout(() => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  CheckPermissionOpenEdit = () => {\r\n    let state = this.data.state || {}\r\n    let { select, edit, edit_form } = state\r\n    let number = this.handleSwitchid(select)\r\n    const check1 = edit === '1' && edit_form === number\r\n    return check1\r\n  }\r\n  handleControlDispatch = data => {\r\n    let result = {}\r\n    const { dispatch_lastName, dispatch_firstName } = this.handleNameDispatch()\r\n    let fname = data[dispatch_firstName],\r\n      lname = data[dispatch_lastName]\r\n    const checkF_L = handleCheckText(fname) && handleCheckText(lname)\r\n    if (checkF_L) {\r\n      result[dispatch_lastName] = lname\r\n      result[dispatch_firstName] = fname\r\n    } else {\r\n      result[dispatch_lastName] = null\r\n      result[dispatch_firstName] = null\r\n    }\r\n    return result\r\n  }\r\n  handleRevision = url => {\r\n    let { state, handleState } = this.data\r\n    let {\r\n      token,\r\n      select,\r\n      dispatch_history\r\n      // selectRev,\r\n    } = state\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        handleState({ loading: '' })\r\n        if (response.status === 200) {\r\n          const { content } = await response.data\r\n          let tsr = await `tsr${select}`\r\n          await handleState({\r\n            [tsr]: {}\r\n          })\r\n          const { dispatch_history_rev } = content\r\n          let switchId = this.handleSwitchid(select)\r\n          let nameObj = `form${switchId}_history`\r\n          let dispatch_controll = await this.handleControlDispatch(content)\r\n          let obj_history = dispatch_history_rev || {}\r\n          let result_history = obj_history[nameObj] || []\r\n          obj_history[nameObj] = result_history\r\n          let merge_hostory = { ...dispatch_history, ...obj_history }\r\n          let merge = await { ...content, ...dispatch_controll }\r\n          await handleState({\r\n            [tsr]: merge,\r\n            status: `rev_show_${select}`,\r\n            _can_sign: 'yes',\r\n            dispatch_history: merge_hostory\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleCancell = async () => {\r\n    let { state } = await this.data\r\n    let { id, token } = await state\r\n    let result = {}\r\n    if (handleCheckText(id)) {\r\n      let url = await `${StaticData.domainIp}/tsr_v1/closeUpdate/${id}`\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n        .then(response => {\r\n          result = response\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(933), 'success')\r\n            setTimeout(() => {\r\n              window.location.reload(true)\r\n            }, 5000);\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n    return result\r\n  }\r\n  CloseComment = async () => {\r\n    let { state } = await this.data\r\n    let { id, token, select } = await state\r\n    let result = {}\r\n    if (handleCheckText(id)) {\r\n      let pageNumber = this.handleSwitchid(select)\r\n      let url = await `${StaticData.domainIp}/tsr_v1/closeComment/${id}/page/${pageNumber}`\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n        .then(response => {\r\n          result = response\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(933), 'success')\r\n            setTimeout(() => {\r\n              window.location.reload(true)\r\n            }, 5000);\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n    return result\r\n  }\r\n  handleAllLIst = (filter, _state) => {\r\n    let array = []\r\n    let datejs = _date => new Date(_date)\r\n    filter.map(_data => {\r\n      let result = {}\r\n      let verify = _state[_data.message] || {}\r\n      if (verify) {\r\n        let verify_at = verify.verify_at || []\r\n        let verify_msg = verify.verify_msg || []\r\n        let verify_by = verify.verify_by || []\r\n        if (verify_at.length === verify_msg.length) {\r\n          verify_msg.forEach((message, index) => {\r\n            let date = verify_at[index]\r\n            let name = _data.name\r\n            let full_name = verify_by[index]\r\n            result = {\r\n              date: datejs(date),\r\n              name: handleString(name),\r\n              message: handleString(message),\r\n              full_name: handleString(full_name)\r\n            }\r\n            array.push(result)\r\n          })\r\n        }\r\n      }\r\n    })\r\n    return array\r\n  }\r\n  handleSortList = array => {\r\n    let sort = array.sort(function (a, b) {\r\n      let result = new Date(b.date) - new Date(a.date)\r\n      return result\r\n    })\r\n    return sort\r\n  }\r\n  handleConvertDate = list => {\r\n    let array = Object.keys(list).map(item => {\r\n      let _data = list[item] || {}\r\n      let _date = _data.date || null\r\n      if (_date) {\r\n        let convert = moment(_date)\r\n          .locale('fa')\r\n          .format(' HH:mm  - jYYYY/jMM/jDD ')\r\n        _data['date'] = convert\r\n      }\r\n      return _data\r\n    })\r\n    return array\r\n  }\r\n  handleMergeList = (filter, _state) => {\r\n    let allList = this.handleAllLIst(filter, _state)\r\n    let sort = this.handleSortList(allList)\r\n    let list = this.handleConvertDate(sort)\r\n    return list\r\n  }\r\n  handleListReject = () => {\r\n    const { state } = this.data\r\n    let { select } = state\r\n    let defaultName = `tsr${select}`\r\n    const history = [\r\n      {\r\n        name: 'مدیر خدمات فنی',\r\n        message: 'reject_reason_history_for_verified'\r\n      }\r\n    ]\r\n    let _state = state[defaultName] || {}\r\n    let allList = this.handleAllLIst(history, _state)\r\n    let sort = this.handleSortList(allList)\r\n    let list = this.handleConvertDate(sort)\r\n    return list\r\n  }\r\n  handleNameDispatch = () => {\r\n    let result = {\r\n      dispatch_firstName: 'dispatch_firstName',\r\n      dispatch_lastName: 'dispatch_lastName',\r\n      dispatch_date: 'dispatch_at'\r\n    }\r\n    let { state } = this.data\r\n    let { select, tab_7, tab_9, tab_10, tab_8 } = state\r\n    switch (select) {\r\n      case 7:\r\n        switch (tab_7) {\r\n          case 1:\r\n            return {\r\n              dispatch_firstName: 'mechanical_dispatch_firstName',\r\n              dispatch_lastName: 'mechanical_dispatch_lastName',\r\n              dispatch_date: 'mechanical_dispatch_at'\r\n            }\r\n          case 2:\r\n            return {\r\n              dispatch_firstName: 'electrical_dispatch_firstName',\r\n              dispatch_lastName: 'electrical_dispatch_lastName',\r\n              dispatch_date: 'electrical_dispatch_at'\r\n            }\r\n          case 3:\r\n            return {\r\n              dispatch_firstName: 'instrument_dispatch_firstName',\r\n              dispatch_lastName: 'instrument_dispatch_lastName',\r\n              dispatch_date: 'instrument_dispatch_at'\r\n            }\r\n          case 4:\r\n            return {\r\n              dispatch_firstName: 'building_dispatch_firstName',\r\n              dispatch_lastName: 'building_dispatch_lastName',\r\n              dispatch_date: 'building_dispatch_at'\r\n            }\r\n          default:\r\n            return result\r\n        }\r\n      case 8:\r\n        switch (tab_8) {\r\n          case 1:\r\n            return {\r\n              dispatch_firstName: 'electrical_dispatch_firstName',\r\n              dispatch_lastName: 'electrical_dispatch_lastName',\r\n              dispatch_date: 'electrical_dispatch_at'\r\n            }\r\n          case 2:\r\n            return {\r\n              dispatch_firstName: 'mechanical_dispatch_firstName',\r\n              dispatch_lastName: 'mechanical_dispatch_lastName',\r\n              dispatch_date: 'mechanical_dispatch_at'\r\n            }\r\n          case 3:\r\n            return {\r\n              dispatch_firstName: 'protection_dispatch_firstName',\r\n              dispatch_lastName: 'protection_dispatch_lastName',\r\n              dispatch_date: 'protection_dispatch_at'\r\n            }\r\n          case 4:\r\n            return {\r\n              dispatch_firstName: 'welding_dispatch_firstName',\r\n              dispatch_lastName: 'welding_dispatch_lastName',\r\n              dispatch_date: 'welding_dispatch_at'\r\n            }\r\n          default:\r\n            return result\r\n        }\r\n      case 9:\r\n        switch (tab_9) {\r\n          case 1:\r\n            return {\r\n              dispatch_firstName: 'fixed_mechanical_dispatch_firstName',\r\n              dispatch_lastName: 'fixed_mechanical_dispatch_lastName',\r\n              dispatch_date: 'fixed_mechanical_dispatch_at'\r\n            }\r\n          case 2:\r\n            return {\r\n              dispatch_firstName: 'rotating_mechanical_dispatch_firstName',\r\n              dispatch_lastName: 'rotating_mechanical_dispatch_lastName',\r\n              dispatch_date: 'rotating_mechanical_dispatch_at'\r\n            }\r\n          case 3:\r\n            return {\r\n              dispatch_firstName: 'electrical_dispatch_firstName',\r\n              dispatch_lastName: 'electrical_dispatch_lastName',\r\n              dispatch_date: 'electrical_dispatch_at'\r\n            }\r\n          case 4:\r\n            return {\r\n              dispatch_firstName: 'instrument_dispatch_firstName',\r\n              dispatch_lastName: 'instrument_dispatch_lastName',\r\n              dispatch_date: 'instrument_dispatch_at'\r\n            }\r\n          case 5:\r\n            return {\r\n              dispatch_firstName: 'sensitive_equipment_dispatch_firstName',\r\n              dispatch_lastName: 'sensitive_equipment_dispatch_lastName',\r\n              dispatch_date: 'sensitive_equipment_dispatch_at'\r\n            }\r\n          case 6:\r\n            return {\r\n              dispatch_firstName: 'repair_services_dispatch_firstName',\r\n              dispatch_lastName: 'repair_services_dispatch_lastName',\r\n              dispatch_date: 'repair_services_dispatch_at'\r\n            }\r\n          default:\r\n            return result\r\n        }\r\n      case 10:\r\n        switch (tab_10) {\r\n          case 1:\r\n            return {\r\n              dispatch_firstName: 'repair_dispatch_firstName',\r\n              dispatch_lastName: 'repair_dispatch_lastName',\r\n              dispatch_date: 'repair_dispatch_at'\r\n            }\r\n          case 2:\r\n            return {\r\n              dispatch_firstName: 'operation_dispatch_firstName',\r\n              dispatch_lastName: 'operation_dispatch_lastName',\r\n              dispatch_date: 'operation_dispatch_at'\r\n            }\r\n          case 3:\r\n            return {\r\n              dispatch_firstName: 'fire_dispatch_firstName',\r\n              dispatch_lastName: 'fire_dispatch_lastName',\r\n              dispatch_date: 'fire_dispatch_at'\r\n            }\r\n          case 4:\r\n            return {\r\n              dispatch_firstName: 'process_dispatch_firstName',\r\n              dispatch_lastName: 'process_dispatch_lastName',\r\n              dispatch_date: 'process_dispatch_at'\r\n            }\r\n          case 5:\r\n            return {\r\n              dispatch_firstName: 'inspection_dispatch_firstName',\r\n              dispatch_lastName: 'inspection_dispatch_lastName',\r\n              dispatch_date: 'inspection_dispatch_at'\r\n            }\r\n          case 6:\r\n            return {\r\n              dispatch_firstName: 'general_dispatch_firstName',\r\n              dispatch_lastName: 'general_dispatch_lastName',\r\n              dispatch_date: 'general_dispatch_at'\r\n            }\r\n          default:\r\n            return result\r\n        }\r\n      default:\r\n        return result\r\n    }\r\n  }\r\n  handleNameCheckDispatch = () => {\r\n    let { state } = this.data\r\n    let { select, tab_7, tab_9, tab_10, tab_8 } = state\r\n    let result = ''\r\n    switch (select) {\r\n      case 7:\r\n        switch (tab_7) {\r\n          case 1:\r\n            result = 'mechanical_is_dispatch'\r\n            break\r\n          case 2:\r\n            result = 'electrical_is_dispatch'\r\n            break\r\n          case 3:\r\n            result = 'instrument_is_dispatch'\r\n            break\r\n          case 4:\r\n            result = 'building_is_dispatch'\r\n            break\r\n          default:\r\n            result = ''\r\n            break\r\n        }\r\n        break\r\n      case 8:\r\n        switch (tab_8) {\r\n          case 1:\r\n            result = 'electrical_is_dispatch'\r\n            break\r\n          case 2:\r\n            result = 'mechanical_is_dispatch'\r\n            break\r\n          case 3:\r\n            result = 'protection_is_dispatch'\r\n            break\r\n          case 4:\r\n            result = 'welding_is_dispatch'\r\n            break\r\n          default:\r\n            result = ''\r\n            break\r\n        }\r\n        break\r\n      case 9:\r\n        switch (tab_9) {\r\n          case 1:\r\n            result = 'fixed_mechanical_is_dispatch'\r\n            break\r\n          case 2:\r\n            result = 'rotating_mechanical_is_dispatch'\r\n            break\r\n          case 3:\r\n            result = 'electrical_is_dispatch'\r\n            break\r\n          case 4:\r\n            result = 'instrument_is_dispatch'\r\n            break\r\n          case 5:\r\n            result = 'sensitive_equipment_is_dispatch'\r\n            break\r\n          case 6:\r\n            result = 'repair_services_is_dispatch'\r\n            break\r\n        }\r\n        break\r\n      case 10:\r\n        switch (tab_10) {\r\n          case 1:\r\n            result = 'repair_is_dispatch'\r\n            break\r\n          case 2:\r\n            result = 'operation_is_dispatch'\r\n            break\r\n          case 3:\r\n            result = 'fire_is_dispatch'\r\n            break\r\n          case 4:\r\n            result = 'process_is_dispatch'\r\n            break\r\n          case 5:\r\n            result = 'inspection_is_dispatch'\r\n            break\r\n          case 6:\r\n            result = 'general_is_dispatch'\r\n            break\r\n        }\r\n        break\r\n      default:\r\n        result = 'is_dispatch'\r\n        break\r\n    }\r\n    return result\r\n    // is_dispatch\r\n  }\r\n  handleAccessDispatchName = () => {\r\n    let { state } = this.data\r\n    let { tab_9, select, tab_10, tab_7, tab_8 } = state\r\n    // building_dispatch_allow\r\n    let result\r\n    switch (select) {\r\n      case 7:\r\n        switch (tab_7) {\r\n          case 1:\r\n            result = 'mechanical_dispatch_allow'\r\n            break\r\n          case 2:\r\n            result = 'electrical_dispatch_allow'\r\n            break\r\n          case 3:\r\n            result = 'instrument_dispatch_allow'\r\n            break\r\n          case 4:\r\n            result = 'building_dispatch_allow'\r\n            break\r\n        }\r\n        break\r\n      case 8:\r\n        switch (tab_8) {\r\n          case 1:\r\n            result = 'electrical_dispatch_allow'\r\n            break\r\n          case 2:\r\n            result = 'mechanical_dispatch_allow'\r\n            break\r\n          case 3:\r\n            result = 'protection_dispatch_allow'\r\n            break\r\n          case 4:\r\n            result = 'welding_dispatch_allow'\r\n            break\r\n        }\r\n        break\r\n      case 9:\r\n        switch (tab_9) {\r\n          case 1:\r\n            result = 'fixed_mechanical_dispatch_allow'\r\n            break\r\n          case 2:\r\n            result = 'rotating_mechanical_dispatch_allow'\r\n            break\r\n          case 3:\r\n            result = 'electrical_dispatch_allow'\r\n            break\r\n          case 4:\r\n            result = 'instrument_dispatch_allow'\r\n            break\r\n          case 5:\r\n            result = 'sensitive_equipment_dispatch_allow'\r\n            break\r\n          case 6:\r\n            result = 'repair_services_dispatch_allow'\r\n            break\r\n        }\r\n        break\r\n      case 10:\r\n        switch (tab_10) {\r\n          case 1:\r\n            result = 'repair_dispatch_allow'\r\n            break\r\n          case 2:\r\n            result = 'operation_dispatch_allow'\r\n            break\r\n          case 3:\r\n            result = 'fire_dispatch_allow'\r\n            break\r\n          case 4:\r\n            result = 'process_dispatch_allow'\r\n            break\r\n          case 5:\r\n            result = 'inspection_dispatch_allow'\r\n            break\r\n          case 6:\r\n            result = 'general_dispatch_allow'\r\n            break\r\n        }\r\n        break\r\n      default:\r\n        result = 'dispatch_allow'\r\n        break\r\n    }\r\n    return result\r\n  }\r\n  handledetailsSigned = () => {\r\n    let list = ListSign.ListMandatory || []\r\n    let { state } = this.data\r\n    let { select } = state\r\n    let number = this.handleSwitchTsrSignId(select)\r\n    let nameTsr = `tsr${number}`\r\n    let listTsr = list[nameTsr] || []\r\n    let name_tsr_select = `tsr${select}`\r\n    let objTsr = state[name_tsr_select] || {}\r\n    let result = Object.keys(listTsr).map(data => {\r\n      let obj = listTsr[data] || {}\r\n      const { not_have_check } = obj\r\n      let object = {}\r\n      const firstName_check = `${handleString(obj['firstName'])}${not_have_check ? '' : '_check'\r\n        }`\r\n      const lastName_check = `${handleString(obj['lastName'])}${not_have_check ? '' : '_check'\r\n        }`\r\n      let firstName = firstName_check.trim()\r\n      let lastName = lastName_check.trim()\r\n      let _name = obj['name'],\r\n        _firstName = objTsr[firstName],\r\n        _lastName = objTsr[lastName]\r\n      object['label'] = _name\r\n      object['firstName'] = handleString(_firstName)\r\n      object['lastName'] = handleString(_lastName)\r\n      return object\r\n    })\r\n    return result\r\n  }\r\n  // handleGetStatus = (status, select) => {\r\n  //   let delimeter = '_'\r\n  //   let { state } = this.data\r\n  //   let { tab_2, tab_6, tab_7 } = state\r\n  //   let result = ''\r\n  //   switch (select) {\r\n  //     case 2:\r\n  //       let array_2 = status.split(delimeter)\r\n  //       result = handleString(array_2[tab_2 - 1])\r\n  //       break\r\n  //     case 6:\r\n  //       let array_6 = status.split(delimeter)\r\n  //       result = handleString(array_6[tab_6 - 1])\r\n  //       break\r\n  //     case 7:\r\n  //       let array_7 = status.split(delimeter)\r\n  //       result = handleString(array_7[tab_7 - 1])\r\n  //       break\r\n  //     default:\r\n  //       result = status\r\n  //       break\r\n  //   }\r\n  //   return result\r\n  // }\r\n  handleCheckHoldSign = (objTsr, hold) => {\r\n    let result = handleString(objTsr[hold])\r\n    const check = handleCheckText(result)\r\n    return check\r\n  }\r\n  handleCheckShowNameSignAPI = item => {\r\n    let list = ListSign.ListMandatory || []\r\n    let { state } = this.data\r\n    let { select } = state\r\n    let number = this.handleSwitchTsrSignId(select)\r\n    let nameTsr = `tsr${number}`\r\n    let listTsr = list[nameTsr] || []\r\n    const filter = listTsr.filter(user => user.name === item.label)\r\n    let objSign = filter[0] || {}\r\n    const { hold } = objSign\r\n    let objTsr = state[`tsr${select}`] || {}\r\n    const check = hold ? this.handleCheckHoldSign(objTsr, hold) : true\r\n    return check\r\n  }\r\n  handleCheckBoxBoolean = (name, default_result = true) => {\r\n    let { state } = this.data\r\n    let { select } = state\r\n    let tsr_data = state[`tsr${select}`] || {}\r\n    let data_get = tsr_data[name]\r\n    let result = false\r\n    switch (data_get) {\r\n      case '1':\r\n        result = true\r\n        break\r\n      case '0':\r\n        result = false\r\n        break\r\n      case true:\r\n        result = true\r\n        break\r\n      case false:\r\n        result = false\r\n        break\r\n      default:\r\n        result = default_result\r\n        break\r\n    }\r\n    return result\r\n  }\r\n  handleNumberMessage = num => {\r\n    let defaultName = `tsr${num}`\r\n    const { state } = this.data\r\n    const { tab_7, tab_8, tab_9, tab_10 } = state\r\n    switch (num) {\r\n      case 7:\r\n        return `${defaultName}_${tab_7}`\r\n      case 8:\r\n        return `${defaultName}_${tab_8}`\r\n      case 9:\r\n        return `${defaultName}_${tab_9}`\r\n      case 10:\r\n        return `${defaultName}_${tab_10}`\r\n      default:\r\n        return defaultName\r\n    }\r\n  }\r\n  handleMultiMessageAPI = () => {\r\n    let _obj = this.data.ListSign.ListMandatory || {}\r\n    const { state } = this.data\r\n    const { select } = state\r\n    let defaultName = `tsr${select}`\r\n    let nameValue = this.handleNumberMessage(select)\r\n    let _list = _obj[nameValue] || []\r\n    let filter = Object.keys(_list).map(_value => {\r\n      let o0bj = _list[_value] || {}\r\n      const { name, message } = o0bj\r\n      let result = {}\r\n      if (message) {\r\n        result = {\r\n          name: handleString(name),\r\n          message: handleString(message)\r\n        }\r\n      }\r\n      return result\r\n    })\r\n    let _state = state[defaultName] || {}\r\n    let array = this.handleMergeList(filter, _state)\r\n    return array\r\n  }\r\n  HandleCompareDateAPI = () => {\r\n    let list_date1 = this.handleMultiMessageAPI()\r\n    let length1 = list_date1.length\r\n    let data1 = length1 > 0 ? list_date1[length1 - 1] : {}\r\n    const date1 = handleString(data1.date)\r\n    const list_date2 = this.handleListReject()\r\n    let length2 = list_date2.length\r\n    let data2 = length2 > 0 ? list_date2[length2 - 1] : {}\r\n    const date2 = handleString(data2.date)\r\n    let result = this.CompareDate(date1, date2)\r\n    return result\r\n  }\r\n  CompareDate = (date1, date2) => {\r\n    let result1 = moment(date1, ' HH:mm  - jYYYY/jMM/jDD ')\r\n    let result2 = moment(date2, ' HH:mm  - jYYYY/jMM/jDD ')\r\n    let result = result1 > result2\r\n    return result\r\n  }\r\n  GetStatus = () => {\r\n    const { state } = this.data\r\n    const { status, select, tab_2, tab_6, tab_7, tab_8, tab_9, tab_10 } = state\r\n    let myStatus = handleString(status)\r\n    const arrayStatus = myStatus.split('_')\r\n    let result\r\n    switch (select) {\r\n      case 2:\r\n        result = arrayStatus[tab_2 - 1] || 'disabled'\r\n        break\r\n      case 6:\r\n        result = arrayStatus[tab_6 - 1] || 'disabled'\r\n        break\r\n      case 7:\r\n        result = arrayStatus[tab_7 - 1] || 'disabled'\r\n        break\r\n      case 8:\r\n        result = arrayStatus[tab_8 - 1] || 'disabled'\r\n        break\r\n      case 9:\r\n        result = arrayStatus[tab_9 - 1] || 'disabled'\r\n        break\r\n      case 10:\r\n        result = arrayStatus[tab_10 - 1] || 'disabled'\r\n        break\r\n      default:\r\n        result = myStatus\r\n        break\r\n    }\r\n    return result\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\EngineeringManagement\\DocumentControlCenter\\DocumentControlCenter.js",[],"E:\\bidboland\\src\\RFQ\\TableRFQ.js",[],"E:\\bidboland\\src\\System-management\\city.js",[],"E:\\bidboland\\src\\System-management\\address.js",[],"E:\\bidboland\\src\\System-management\\province.js",[],"E:\\bidboland\\src\\daily-report\\Endorsement.js",[],"E:\\bidboland\\src\\daily-report\\ProjectActivities.js",[],"E:\\bidboland\\src\\daily-report\\Workforce.js",[],"E:\\bidboland\\src\\daily-report\\workshopStatus.js",[],"E:\\bidboland\\src\\daily-report\\GeneralInformation.js",[],"E:\\bidboland\\src\\library\\CheckIndex.js",[],"E:\\bidboland\\src\\layout\\BoxResult.js",[],"E:\\bidboland\\src\\library\\PopupLibrary.js",["3190"],"import React, { useState, useEffect } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport ItemPopupLibrary from './ItemPopupLibrary'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nconst PopupLibrary = props => {\r\n  const [loading, setLoading] = useState(false)\r\n  const { listStandard, listStandardSelected } = props.state\r\n  useEffect(() => {\r\n    handleAll()\r\n  }, [])\r\n  async function handleSubmit () {\r\n    if (props.FetchData) {\r\n      await setLoading(true)\r\n      let list = await handleList()\r\n      let joinText = await list.join('*')\r\n      let text = await `publisher=${joinText}`\r\n      let obj1 = await {\r\n        textSearch: text,\r\n        testObject: {\r\n          publisher: joinText\r\n        },\r\n        objFiltered: {\r\n          publisher: ['publisher']\r\n        }\r\n      }\r\n      let obj2 = {}\r\n      await list.forEach(item => {\r\n        let _text = `_header_${item}__DARA__publisher`\r\n        obj2[_text] = true\r\n      })\r\n      let merge = { ...obj1, ...obj2 }\r\n      await props.FetchData(`searchByFields=${text}`)\r\n      await props.handleChildState(merge)\r\n      await setLoading(false)\r\n      await props.handleState({\r\n        popupFilter: false\r\n      })\r\n    }\r\n  }\r\n  const length = handleList().length || 0\r\n  function handleAll () {\r\n    let result = {}\r\n    listStandard.forEach(item => {\r\n      result[item.value] = !(length === listStandard.length)\r\n    })\r\n    props.handleState({\r\n      listStandardSelected: result\r\n    })\r\n  }\r\n  function handleList () {\r\n    let array = []\r\n    for (let label in listStandardSelected) {\r\n      let value = listStandardSelected[label]\r\n      if (value) {\r\n        array.push(label)\r\n      }\r\n    }\r\n    return array\r\n  }\r\n  return (\r\n    <div className='backGroundPopup ltr'>\r\n      <div className='col-xl-8 col-lg-10 col-md-12 col-12 mb-2'>\r\n        <div className='box-wellcome'>\r\n          <div className='title-wellcome'>\r\n            <span className='col p-0'>Standard Library</span>\r\n            <CloseIcon\r\n              onClick={() => props.handleState({ popupFilter: false })}\r\n            />\r\n          </div>\r\n          <div className='main-report-popup'>\r\n            <div className='row mx-0 _bt'>\r\n              <div className='item-report orang col-3'>\r\n                <div className='w-100'>\r\n                  <span className='d-block'>\r\n                    247047\r\n                    <span className='_medium'>NO.</span>\r\n                  </span>\r\n                  <label className='mb-0'>Total Standard</label>\r\n                </div>\r\n              </div>\r\n              <div className='item-report blue col-3'>\r\n                <div className='w-100'>\r\n                  <span className='d-block'>\r\n                    62\r\n                    <span className='_medium'>NO.</span>\r\n                  </span>\r\n                  <label className='mb-0'>Total Title</label>\r\n                </div>\r\n              </div>\r\n              <div className='item-report green col-3'>\r\n                <div className='w-100'>\r\n                  <span className='d-block'>\r\n                    150\r\n                    <span className='_medium'>GB</span>\r\n                  </span>\r\n                  <label className='mb-0'>Total Size</label>\r\n                </div>\r\n              </div>\r\n              <div className='item-report red col-3'>\r\n                <div className='w-100'>\r\n                  <span className='d-block'>2022</span>\r\n                  <label className='mb-0'>Last Years Publisher</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='main-text main-attention position-relative pt-2'>\r\n            <div className='items-attention'>\r\n              <ul className='row mx-0'>\r\n                {listStandard.map((data, key) => (\r\n                  <ItemPopupLibrary\r\n                    data={data || {}}\r\n                    key={key}\r\n                    _key={key}\r\n                    {...props}\r\n                  />\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div className='submit-checkboxes'>\r\n              <button\r\n                className='pointer d-flex align-items-center'\r\n                disabled={length === 0 || loading}\r\n                onClick={handleSubmit}\r\n              >\r\n                اعمال فیلتر\r\n                {loading ? (\r\n                  <Loading className='ml-1 form-loader d-flex align-items-center heigth-1' />\r\n                ) : (\r\n                  <DoneIcon className='ml-1' />\r\n                )}\r\n              </button>\r\n              <button\r\n                className='pointer ml-auto mr-1 multiSelect'\r\n                onClick={handleAll}\r\n              >\r\n                {length === listStandard.length ? 'لغو همه' : 'انتخاب همه'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default PopupLibrary\r\n","E:\\bidboland\\src\\library\\tableLibrary.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\ItemResponsible.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR2\\ItemReject.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\TSR1\\ItemImprovementType.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\selectAll.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\Fields.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\tabAccsess.js",["3191"],"E:\\bidboland\\src\\createUser\\EditUserGroup\\subField.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ListRejectReasons.js",[],"E:\\bidboland\\src\\Print\\NewTSR\\StaticList\\static.js",[],"E:\\bidboland\\src\\maskInput\\Masktedinput.js",[],"E:\\bidboland\\src\\Meeting-management\\ItemsProceedings.js",["3192","3193"],"import React, { Component } from 'react'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Loading from '../layout/loading'\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n// import MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\n// import { Link } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\nimport Row from '../table/Row'\r\nimport OutputFilter from '../table/OutputFilter'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nexport default class ContentsProceedings extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'ردیف', value: 'id' },\r\n        { name: 'شماره صورت جلسه', value: 'meeting_id' },\r\n        { name: 'شرح توافقات', value: 'agreement_description' },\r\n        { name: 'اقدام کننده', value: 'acting' },\r\n        { name: 'موعد انجام', value: 'acting_date' },\r\n        { name: 'تاریخ انجام', value: 'created_at' },\r\n        { name: 'آخرین وضعیت', value: '' },\r\n        { name: 'توضیحات', value: 'description' }\r\n      ],\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      loading: 'table',\r\n      search: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/meeting/items/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                columns: response.data.content.columns\r\n                  ? response.data.content.columns\r\n                  : this.state.columns\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/meeting/items/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/meeting/items/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      this.setState({ loading: 'table', search: '' })\r\n      await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  GetMore = async key => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      let id = await this.state.row[key].id\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/transmittal/getDocumentList?transmittalCode=${id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              firstData: response.data.content,\r\n              selectNumber: key,\r\n              documentSelected: id\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  GetSecondData = async (data, index, key) => {\r\n    if (this.state.token) {\r\n      this.setState({ selectNumber: key })\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/mdl/getDocumentRevisionDetail?documentId=${data.id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              secondData: response.data.content,\r\n              selectNumber: key,\r\n              secondSelectNumber: index\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleAttachment = data => {\r\n    let allData = []\r\n    for (let value in data) {\r\n      allData.push(data[value])\r\n    }\r\n    return allData\r\n  }\r\n  handleDelete = () => {\r\n    if (this.state.token) {\r\n      this.setState({ loading: 'delete' })\r\n      let datareg = new FormData()\r\n      datareg.append('id', this.state.idLetter)\r\n      axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/correspondence/delete`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            let elm = await this.refs[`tr_${this.state.idLetter}`]\r\n            await elm.remove()\r\n            await this.setState({ loading: '', idLetter: '', letterNumber: '' })\r\n          } else {\r\n            await this.setState({ loading: '', idLetter: '', letterNumber: '' })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', idLetter: '', letterNumber: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = await []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (key, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: key,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table persian rtl w-100'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={true}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, index) => (\r\n                  <tr\r\n                    className={this.state._active === index ? '_active' : ''}\r\n                    key={index}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <React.Fragment>\r\n                      <Row\r\n                        _active={this.state._active}\r\n                        _index={index}\r\n                        handleState={(name, value) =>\r\n                          this.setState({ [name]: value })\r\n                        }\r\n                        data={data}\r\n                        row={Object.keys(this.state.header).map(_ => {\r\n                          return this.state.header[_].value\r\n                        })}\r\n                        handleFilter={this.handleFilter}\r\n                        header={this.state.header}\r\n                        objFiltered={this.state.objFiltered}\r\n                      />\r\n                    </React.Fragment>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-5 col-lg-5 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='link-footer'>\r\n                <a\r\n                  href={OutputFilter.handleFilter(\r\n                    this.state.textSearch,\r\n                    this.state.search,\r\n                    `${StaticData.domainIp}/meeting/itemsGetExcel`\r\n                  )}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='xls'\r\n                >\r\n                  <img src='/img/XLS.svg' alt='xls' />\r\n                  خروجی اکسل\r\n                </a>\r\n                <a\r\n                  href={OutputFilter.handleFilter(\r\n                    this.state.textSearch,\r\n                    this.state.search,\r\n                    `${StaticData.domainIp}/meeting/itemsGetPdf`\r\n                  )}\r\n                  target='_blank'\r\n                  rel='noreferrer'\r\n                  className='pdf'\r\n                >\r\n                  <img src='/img/PDF.svg' alt='PDF' />\r\n                  خروجی pdf\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\Meeting-management\\ProgressbarTime.js",[],"E:\\bidboland\\src\\Meeting-management\\ContentsProceedings.js",[],"E:\\bidboland\\src\\clock\\clock.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\addReplay.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\NCM.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\AN.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\AP.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\CM.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\adminEditRequest.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\EditBeforeRequest.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\btnNote.js",[],"E:\\bidboland\\src\\Project\\vendorTransmittal\\RJ.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\RejectHistor.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\TSR7.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\TSR10.js",[],"E:\\bidboland\\src\\mre\\attachments.js",[],"E:\\bidboland\\src\\mre\\mto.js",["3194"],"import React, { Component } from 'react'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nimport { handleFilter } from '../table/OutputFilter'\r\n\r\nexport default class Information extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      this.props = nextProps\r\n    }\r\n  }\r\n  render () {\r\n    let { state } = this.props\r\n    return (\r\n      <div className='form row ltr'>\r\n        <div className='title-password col-12'>\r\n          <h2 className='IranSans_Bold'>Refrence</h2>\r\n          <div className='line mr-0 ml-2'></div>\r\n        </div>\r\n        <div className='col-12 p-0'>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form ${\r\n                state.foucs === 'documentNumberMto' ||\r\n                handleCheckText(state.documentNumberMto)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                DOC . NO\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={false}\r\n                onFocus={e => this.props.OnFocus(e.target.name)}\r\n                onBlur={this.props.OnBlur}\r\n                onChange={this.props.handleChange}\r\n                className='text-left'\r\n                name='documentNumberMto'\r\n                value={handleString(state.documentNumberMto)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'activityName' ||\r\n              handleCheckText(state.activityName)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Activity Name\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='activityName'\r\n              value={handleString(state.activityName)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'classMto' || handleCheckText(state.classMto)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              class\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='classMto'\r\n              value={handleString(state.classMto)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'ddm' || handleCheckText(state.ddm)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              DDM Category\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='ddm'\r\n              value={handleString(state.ddm)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'AFC' || handleCheckText(state.AFC)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              AFC Final\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='AFC'\r\n              value={handleString(state.AFC)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'revMto' || handleCheckText(state.revMto)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              rev\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='revMto'\r\n              value={handleString(state.revMto)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'areaCode' || handleCheckText(state.areaCode)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Area Code\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='areaCode'\r\n              value={handleString(state.areaCode)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'docType' || handleCheckText(state.docType)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Doc. Type\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='docType'\r\n              value={handleString(state.docType)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'dicsiplineMto' ||\r\n              handleCheckText(state.dicsiplineMto)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Dicsipline\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='dicsiplineMto'\r\n              value={handleString(state.dicsiplineMto)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'pahase' || handleCheckText(state.pahase)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Phase\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='pahase'\r\n              value={handleString(state.pahase)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='title-password col-12'>\r\n          <h2 className='IranSans_Bold'>Mto Allcation</h2>\r\n          <div className='line mr-0 ml-2'></div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'dicsiplineMtoAllocation' ||\r\n              handleCheckText(state.dicsiplineMtoAllocation)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Dicsipline\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='dicsiplineMtoAllocation'\r\n              value={handleString(state.dicsiplineMtoAllocation)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              this.state.foucs === `subDicsipline` ||\r\n              handleCheckText(state.subDicsipline)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Sub Dicsipline\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <select\r\n              name={`subDicsipline`}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              value={handleString(state.subDicsipline)}\r\n            >\r\n              <option className='d-none'></option>\r\n              <option value='test'>test</option>\r\n              <option value='test'>test</option>\r\n              <option value='test'>test</option>\r\n              <option value='test'>test</option>\r\n              <option value='test'>test</option>\r\n              <option value='test'>test</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'materialCode' ||\r\n              handleCheckText(state.materialCode)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Material Code\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='materialCode'\r\n              value={handleString(state.materialCode)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'unit' || handleCheckText(state.unit)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Unit\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='unit'\r\n              value={handleString(state.unit)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form textarea ${\r\n              state.foucs === 'descriptionMto' ||\r\n              handleCheckText(state.descriptionMto)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <div className='col p-0'>\r\n              <label className='textarea'>Description</label>\r\n              <textarea\r\n                className='w-100 text-left'\r\n                type='text'\r\n                name='descriptionMto'\r\n                onFocus={e => this.props.OnFocus(e.target.name)}\r\n                onBlur={this.props.OnBlur}\r\n                value={handleString(state.descriptionMto)}\r\n                // onChange={this.handleChange}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'quanlityCalculated' ||\r\n              handleCheckText(state.quanlityCalculated)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Quanlity Calculated\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='quanlityCalculated'\r\n              value={handleString(state.quanlityCalculated)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'continjencyFactor' ||\r\n              handleCheckText(state.continjencyFactor)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Engineering Continjency Factor\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='continjencyFactor'\r\n              value={handleString(state.continjencyFactor)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'addedSpare' || handleCheckText(state.addedSpare)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Added Spare\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='addedSpare'\r\n              value={handleString(state.addedSpare)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='submit-form col-12 mt-5 justify-content-end'>\r\n          <button className='w-auto' disabled={this.state.disabled}>\r\n            ثبت اطلاعات\r\n            {this.state.loading === 'submit' ? (\r\n              <Loading className='form-loader' />\r\n            ) : (\r\n              <DoneIcon />\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\mre\\tagDesciption.js",[],"E:\\bidboland\\src\\mre\\information.js",["3195"],"import React, { Component } from 'react'\r\nimport Select from 'react-select'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport handleString from '../handleString'\r\nimport handleCheckText from '../handleCheckText'\r\nimport { handleFilter } from '../table/OutputFilter'\r\nexport default class Information extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (nextProps !== this.props) {\r\n      this.props = nextProps\r\n    }\r\n  }\r\n  render () {\r\n    let { state } = this.props\r\n    return (\r\n      <div className='form row ltr'>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'Mre_No' || handleCheckText(state.Mre_No)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              MRE NO\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={false}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              onChange={this.props.handleChange}\r\n              className='text-left'\r\n              name='Mre_No'\r\n              value={handleString(state.Mre_No)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'project' || handleCheckText(state.project)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              project\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='project'\r\n              value={handleString(state.project)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'phase' || handleCheckText(state.phase)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              phase\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='phase'\r\n              value={handleString(state.phase)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'areaCode' || handleCheckText(state.areaCode)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Area Code\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='areaCode'\r\n              value={handleString(state.areaCode)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'discipline' || handleCheckText(state.discipline)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Discipline\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='discipline'\r\n              value={handleString(state.discipline)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'doctype' || handleCheckText(state.doctype)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Doc.Type\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='doctype'\r\n              value={handleString(state.doctype)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'ser_NO' || handleCheckText(state.ser_NO)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Ser.No.\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='ser_NO'\r\n              value={handleString(state.ser_NO)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'revision' || handleCheckText(state.revision)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Rev.\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='revision'\r\n              value={handleString(state.revision)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'class' || handleCheckText(state.class)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Class\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='class'\r\n              value={handleString(state.class)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'contract_No' ||\r\n              handleCheckText(state.contract_No)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Contract No.\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='contract_No'\r\n              value={handleString(state.contract_No)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'project_Description' ||\r\n              handleCheckText(state.project_Description)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Project Description\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='project_Description'\r\n              value={handleString(state.project_Description)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'client' || handleCheckText(state.client)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Client\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='client'\r\n              value={handleString(state.client)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === 'consultant' || handleCheckText(state.consultant)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <label>\r\n              Consultant\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              readOnly={true}\r\n              className='text-left'\r\n              name='consultant'\r\n              value={handleString(state.consultant)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n          <div className='field-form selectBox'>\r\n            <Select\r\n              onChange={newValue =>\r\n                this.props.getLabel('vendorSelected', 'valueVendor', newValue)\r\n              }\r\n              isMulti\r\n              name='vendorSelected'\r\n              options={state.vendorList}\r\n              className='basic-multi-select ltr'\r\n              value={state.valueVendor}\r\n              classNamePrefix='select'\r\n              placeholder={\r\n                <label>\r\n                  Approved Vendors\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === `lastRevisionDate` ||\r\n              handleCheckText(state.lastRevisionDate)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <div className='icon-field'>\r\n              <DateRangeRoundedIcon />\r\n            </div>\r\n            <div className='col p-0'>\r\n              <label>\r\n                last Rev Date\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                name='lastRevisionDate'\r\n                value={handleString(state.lastRevisionDate)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${\r\n              state.foucs === `purposeIssue` || handleCheckText(state.purposeIssue)\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <div className='col p-0'>\r\n              <label>\r\n                Purpose of Issue\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                readOnly={true}\r\n                name='purposeIssue'\r\n                value={handleString(state.purposeIssue)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${state.pred.text !== '' ? 'active' : ''}`}\r\n          >\r\n            <label>\r\n              PRE'D\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <label className='label'>{state.pred.text}</label>\r\n            <label\r\n              className='upload-label signEnglish white'\r\n              onClick={() => this.props.handlePopup(true, state.pred.sign)}\r\n            >\r\n              sign\r\n              <AttachFileIcon />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${state.chkd.text !== '' ? 'active' : ''}`}\r\n          >\r\n            <label>\r\n              CHK'D\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <label className='label'>{state.chkd.text}</label>\r\n            <label\r\n              className='upload-label signEnglish white'\r\n              onClick={() => this.props.handlePopup(true, state.chkd.sign)}\r\n            >\r\n              sign\r\n              <AttachFileIcon />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${state.aprd.text !== '' ? 'active' : ''}`}\r\n          >\r\n            <label>\r\n              APR'D\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <label className='label'>{state.aprd.text}</label>\r\n            <label\r\n              className='upload-label signEnglish white'\r\n              onClick={() => this.props.handlePopup(true, state.aprd.sign)}\r\n            >\r\n              sign\r\n              <AttachFileIcon />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ${state.autd.text !== '' ? 'active' : ''}`}\r\n          >\r\n            <label>\r\n              AUT'D\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <label className='label'>{state.autd.text}</label>\r\n            <label\r\n              className='upload-label signEnglish white'\r\n              onClick={() => this.props.handlePopup(true, state.autd.sign)}\r\n            >\r\n              sign\r\n              <AttachFileIcon />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className='submit-form col-12 justify-content-end mt-4'>\r\n          <button\r\n            className='level justify-content-end w-auto'\r\n            onClick={() => this.props.changeLevel(1)}\r\n          >\r\n            <ArrowBackIosIcon />\r\n            مرحله بعد\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\ShowTsr\\Header.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\TSR2.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\TSR9.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\TSR8.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\Message.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\Revisions.js",["3196"],"import React, { useState, useEffect } from 'react'\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace'\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight'\r\nimport Loading from '../../layout/loading'\r\nimport handleString from '../../handleString'\r\nimport StaticData from '../../staticData'\r\nimport handleCheckText from '../../handleCheckText'\r\n\r\nfunction Revisions(props) {\r\n  const [list, setList] = useState([])\r\n  const [endList, setEndList] = useState([])\r\n  const { handleState, API, state } = props\r\n  let { select, revisions, selectRev, loading } = state\r\n  // const { handlePermision } = props.Permision\r\n  useEffect(() => {\r\n    revisions = revisions || {}\r\n    if (revisions) {\r\n      filterList()\r\n    }\r\n  }, [props])\r\n  // useEffect(async () => {\r\n  //   await handleEndRev(`back_${select}`, false)\r\n  // }, [select])\r\n  function handleList(_newList) {\r\n    let length = _newList.length\r\n    let end = length - 1\r\n    let newArray = _newList\r\n    let _endList = [newArray[end]] || []\r\n    let filter = _newList.filter((data, key) => data && key !== length - 1)\r\n    return { filter, _endList }\r\n  }\r\n  function filterList() {\r\n    let nameTsr = `tsr${select}`\r\n    let _newList = revisions[nameTsr] || []\r\n    let { filter, _endList } = handleList(_newList)\r\n    setList(filter)\r\n    setEndList(_endList)\r\n  }\r\n  async function handleRev(key, data, nameLoading = null) {\r\n    let valueLoading = nameLoading || `${select}_${key}`\r\n    let { id } = await data\r\n    let page = state.select.toString(),\r\n      tsr_id = state.id\r\n    const check =\r\n      handleCheckText(id) && handleCheckText(page) && handleCheckText(tsr_id)\r\n    if (check) {\r\n      let url = await `${StaticData.domainIp}/tsr_v1/getRevisionDetail/${page}/tsr/${tsr_id}/id/${id}`\r\n      await handleState({\r\n        loading: valueLoading,\r\n        selectRev: nameLoading ? '' : `rev_${key}_${select}`\r\n      })\r\n      const { handleRevision } = API\r\n      await handleRevision(url)\r\n    }\r\n  }\r\n  async function handleEndRev(name, load) {\r\n    const { fetchData } = await props.API.data\r\n    if (fetchData) {\r\n      await handleState({\r\n        loading: load ? name : ''\r\n      })\r\n      await fetchData('endrev')\r\n    }\r\n  }\r\n  let check = list.length > 0\r\n  if (check) {\r\n    return (\r\n      <div className='col-12'>\r\n        <div className='main-revisions'>\r\n          <div className='head-rev row mx-0'>\r\n            <div className='title-rev'>\r\n              <h4>ریویژن‌های پیشین این فرم</h4>\r\n            </div>\r\n            {endList.map((item, index) => (\r\n              <div className='last-rev' key={index}>\r\n                <span\r\n                  className='pointer'\r\n                  // onClick={() => handleRev(index, item, `back_${select}`)}\r\n                  onClick={() => handleEndRev(`back_${select}`, true)}\r\n                >\r\n                  بازگشت به آخرین ریویژن ({handleString(item.title)})\r\n                  {loading === `back_${select}` ? (\r\n                    <Loading className='rev-loading align-items-center' />\r\n                  ) : (\r\n                    <KeyboardBackspaceIcon />\r\n                  )}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className='list-rev'>\r\n            <ul className='ltr row mx-0 mb-0'>\r\n              {list.map((data, key) => (\r\n                <li\r\n                  className={`col-xl-4 col-lg-4 col-md-6 col-12 my-1 pointer no-user-select ${selectRev === `rev_${key}_${select}` ? 'active' : ''\r\n                    }`}\r\n                  key={key}\r\n                  onClick={() => handleRev(key, data)}\r\n                >\r\n                  {loading === `${select}_${key}` ? (\r\n                    <Loading className='item-rev align-items-center' />\r\n                  ) : (\r\n                    <KeyboardArrowRightIcon className='mr-1 mb-1' />\r\n                  )}\r\n                  {handleString(data.title)}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else return ''\r\n}\r\nexport default Revisions\r\n","E:\\bidboland\\src\\tsrNew\\TSR12\\TSR12.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\TSR11.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\TSR6.js",["3197","3198","3199"],"import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\nimport Form from '../../Form/Form'\r\nimport ManageTab from './ManageTab'\r\nimport API from './API'\r\nimport handleString from '../../handleString'\r\nimport ButtonSubmit from './ButtonSubmit'\r\nimport Sign from '../sign/Sign'\r\nimport ButtonEdit from './ButtonEdit'\r\nimport CCDisabled from '../CCDisabled'\r\nexport default class TSR6 extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.API = new API(this)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      tab: 1,\r\n      process_foreign_attachment: [],\r\n      process_internal_attachment: [],\r\n      general_foreign_attachment: [],\r\n      general_internal_attachment: [],\r\n      inspection_foreign_attachment: [],\r\n      inspection_internal_attachment: [],\r\n      tech_result: true,\r\n      process_result: false,\r\n      general_result: false,\r\n      inspection_result: false,\r\n      process_result: true,\r\n      general_result: true,\r\n      inspection_result: true\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      this.fetchData()\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let { tab } = this.state\r\n    this.props.handleState({ tab_6: tab })\r\n    this.fetchData()\r\n  }\r\n  fetchData = () => {\r\n    const { fetchDataAPI } = this.API\r\n    fetchDataAPI()\r\n  }\r\n  handleState = obj => {\r\n    this.setState(obj)\r\n  }\r\n  handleDisabled = () => {\r\n    const { handleDisabledAPI } = this.API\r\n    let result = handleDisabledAPI()\r\n    return result\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleListForm = () => {\r\n    let { handleListFormAPI } = this.API\r\n    let data = handleListFormAPI() || []\r\n    return data\r\n  }\r\n  handleChangeList = (parent, name, value, key) => {\r\n    let list = this.state[parent]\r\n    let obj = list[key]\r\n    obj[name] = value\r\n    this.setState({ [parent]: list })\r\n  }\r\n  handleAddAttach = nameState => {\r\n    let { handleAddAttachAPI } = this.API\r\n    handleAddAttachAPI(nameState)\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    let data = this.state[nameState]\r\n    data.splice(key, 1)\r\n    this.setState({ [nameState]: data })\r\n  }\r\n  deleteFileList = async (key, num, files, names, parent) => {\r\n    const { deleteFileListAPI } = await this.API\r\n    await deleteFileListAPI(key, num, files, names, parent)\r\n  }\r\n  handleUploadList = async (e, files, names, parentState) => {\r\n    const { handleUploadListAPI } = await this.API\r\n    await handleUploadListAPI(e, files, names, parentState)\r\n  }\r\n  GetLink = async (nameState, file, names, length, key, i, parentState) => {\r\n    const { GetLinkAPI } = await this.API\r\n    await GetLinkAPI(nameState, file, names, length, key, i, parentState)\r\n  }\r\n  render() {\r\n    let { redirect, tab } = this.state\r\n    let { handlCreate, ShowSign, handleCheckUpdate, Split } = this.API\r\n    const canCreate = handlCreate(6),\r\n      canUpdate = handleCheckUpdate(6)\r\n    const status = Split()\r\n    const sign_1 = ShowSign() ? true : false\r\n    const sign_2 = handleCheckUpdate(6) ? false : true\r\n    const sign_3 = canCreate ? false : true\r\n    const canSign = sign_1 && sign_2 && sign_3\r\n    if (redirect) {\r\n      return <Redirect to='index-TSR' />\r\n    } else\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <div className='w-100 row justify-content-start m-0'>\r\n            <ManageTab {...this} />\r\n            <Form {...this} itemForm={this.handleListForm()} />\r\n            {canCreate && <ButtonSubmit {...this} />}\r\n            {canSign && <Sign {...this} multiTab={tab} status={status} />}\r\n            {canUpdate && <ButtonEdit {...this} />}\r\n            <CCDisabled {...this} />\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\tsr3\\tsr3.js",["3200","3201"],"import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\nimport Form from '../../Form/Form'\r\nimport API from './API'\r\nimport handleString from '../../handleString'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport Foreign from '../ShowTsr/Foreign'\r\nimport Internal from '../ShowTsr/Internal'\r\nimport Dispatch from '../Dispatch/Dispatch'\r\nimport ButtonSubmit from './ButtonSubmit'\r\nimport TOCC from '../TOCC'\r\nimport Sign from '../sign/Sign'\r\nimport ButtonEdit from './ButtonEdit'\r\nimport ResetSetting from './ResetState'\r\nimport CCDisabled from '../CCDisabled'\r\nimport BoxText from '../ShowTsr/BoxText'\r\nexport default class TSR3 extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.API = new API(this)\r\n    this.ResetSetting = ResetSetting\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      review_result: null,\r\n      foreign_attachment: [\r\n        {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      ],\r\n      internal_attachment: [\r\n        {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      ],\r\n      notification_cc: [],\r\n      review_result: '1'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.fetchData()\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      this.fetchData()\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    const { FetchDataAPI } = this.API\r\n    FetchDataAPI()\r\n  }\r\n  handleState = obj => {\r\n    this.setState(obj)\r\n  }\r\n  handleDisabledElm = () => {\r\n    const { handleDisabledAPIElm } = this.API\r\n    const result = handleDisabledAPIElm()\r\n    return result\r\n  }\r\n  handleDisabled = () => {\r\n    const { handleDisabledAPI } = this.API\r\n    let _result = handleDisabledAPI()\r\n    return _result\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleReview = (e, data) => {\r\n    const { handleReviewAPI } = this.API\r\n    handleReviewAPI(e, data)\r\n  }\r\n  handleListForm = () => {\r\n    const { DescriptionName } = this.API\r\n    let { result, label } = DescriptionName()\r\n    let { review_result } = this.state\r\n    let data = [\r\n      {\r\n        // name: 'review_result',\r\n        value: 'review_result',\r\n        radio: true,\r\n        label: 'نتیجه بررسی',\r\n        items: [\r\n          {\r\n            value: '1',\r\n            label: 'مورد تایید است'\r\n          },\r\n\r\n          {\r\n            value: '0',\r\n            label: 'مورد تایید نیست.'\r\n          },\r\n          {\r\n            value: '2',\r\n            label: 'نیاز به بررسی فرایندی ندارد.'\r\n          }\r\n        ],\r\n        rtl: true,\r\n        require: true,\r\n        disabled: this.handleDisabledElm(),\r\n        onchange: (e, data) => this.handleReview(e, data)\r\n      },\r\n      {\r\n        access: handleCheckText(result) && handleCheckText(label),\r\n        value: result,\r\n        name: label,\r\n        rtl: true,\r\n        require: false,\r\n        textArea: true,\r\n        disabled: this.handleDisabledElm(),\r\n        require: true\r\n      },\r\n      {\r\n        value: 'suggest_time',\r\n        name: 'زمان پیشنهادی جهت اجرا',\r\n        date: true,\r\n        rtl: true,\r\n        objectSetState: true,\r\n        isGregorian: false,\r\n        disabled: this.handleDisabledElm(),\r\n        cantShow: review_result !== '1'\r\n      }\r\n    ]\r\n    return data\r\n  }\r\n  handleChangeList = (parent, name, value, key) => {\r\n    let list = this.state[parent]\r\n    let obj = list[key]\r\n    obj[name] = value\r\n    this.setState({ [parent]: list })\r\n  }\r\n  handleAddAttach = nameState => {\r\n    let { handleAddAttachAPI } = this.API\r\n    handleAddAttachAPI(nameState)\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    let data = this.state[nameState]\r\n    data.splice(key, 1)\r\n    this.setState({ [nameState]: data })\r\n  }\r\n  deleteFileList = async (key, num, files, names, parent) => {\r\n    const { deleteFileListAPI } = await this.API\r\n    await deleteFileListAPI(key, num, files, names, parent)\r\n  }\r\n  handleUploadList = async (e, files, names, parentState) => {\r\n    const { handleUploadListAPI } = await this.API\r\n    await handleUploadListAPI(e, files, names, parentState)\r\n  }\r\n  GetLink = async (nameState, file, names, length, key, i, parentState) => {\r\n    const { GetLinkAPI } = await this.API\r\n    await GetLinkAPI(nameState, file, names, length, key, i, parentState)\r\n  }\r\n  render() {\r\n    const { handlCreate, handleCheckUpdate, ShowSign } = this.API\r\n    const canCreate = handlCreate(3),\r\n      // canSign = ShowSign(),\r\n      canUpdate = handleCheckUpdate(3)\r\n    const canCreateSubmit = !this.handleDisabledElm() && canCreate\r\n    const { status_copy, redirect } = this.state\r\n    const sign_1 = ShowSign() ? true : false\r\n    const sign_2 = handleCheckUpdate(3) ? false : true\r\n    const sign_3 = canCreateSubmit ? false : true\r\n    const canSign = sign_1 && sign_2 && sign_3\r\n    if (redirect) {\r\n      return <Redirect to='new-index-TSR' />\r\n    } else\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <div className='w-100 row justify-content-start m-0'>\r\n            <BoxText {...this} id={3} status={status_copy} />\r\n            <Dispatch\r\n              {...this}\r\n              filter1='user_unit'\r\n              filter2='مهندسی فرآیند و کنترل تولید'\r\n              canCreate={canCreate}\r\n            />\r\n            <Form {...this} itemForm={this.handleListForm()} />\r\n            <Foreign\r\n              {...this}\r\n              check_disabled={this.handleDisabledElm()}\r\n              notRequire={true}\r\n              name='foreign_attachment'\r\n            />\r\n            <Internal\r\n              {...this}\r\n              check_disabled={this.handleDisabledElm()}\r\n              name='internal_attachment'\r\n            />\r\n            {canCreateSubmit && <TOCC {...this} />}\r\n            {canCreateSubmit && <ButtonSubmit {...this} />}\r\n            {canSign && <Sign {...this} status={status_copy} />}\r\n            {canUpdate && <ButtonEdit {...this} />}\r\n            <CCDisabled {...this} />\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\tsr5\\TSR5.js",[],"E:\\bidboland\\src\\tsrNew\\tsr4\\TSR4.js",[],"E:\\bidboland\\src\\gallery\\PopUpGallery.js",[],"E:\\bidboland\\src\\layout\\BoxResultSearch.js",[],"E:\\bidboland\\src\\Customization\\filterSelect.js",[],"E:\\bidboland\\src\\list-user\\TableUser.js",[],"E:\\bidboland\\src\\createUser\\TableUserGroup.js",["3202"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nimport Loading from '../layout/loading'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Row from '../table/Row'\r\nimport FooterTable from '../table/FooterTable'\r\nimport Permision from '../permision/permision'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport handleCheckText from '../handleCheckText'\r\nexport default class TableUserGroup extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.Elm = {}\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'شماره ردیف', value: 'id' },\r\n        { name: 'نام گروه', value: 'title' },\r\n        // { name: 'کد پروژه', value: 'project_code' },\r\n\r\n        // { name: 'تعداد کاربر', value: 'userNumber' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      search: '',\r\n      loading: 'table',\r\n      letterNumber: '',\r\n      idLetter: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: '',\r\n      pageAdvance: 1,\r\n      totalAdvance: 0,\r\n      secondData: {}\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    const { open_header } = this.state\r\n    if (\r\n      this.refs[`_header_${open_header}`] &&\r\n      !this.refs[`_header_${open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  handleSearch = async text => {\r\n    const { token, page, contentPerPage, textSearch } = this.state\r\n    if (token) {\r\n      this.setState({ search: text, loading: 'table' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      // textSearch\r\n      let url = ''\r\n      if (textSearch) {\r\n        url = `${StaticData.domainIp\r\n          }/role/getList/${page}?contentPerPage=${contentPerPage}&searchInAll=${text ? text : ''\r\n          }&searchByFields=${textSearch}`\r\n      } else {\r\n        url = `${StaticData.domainIp\r\n          }/role/getList/${page}?contentPerPage=${contentPerPage}&searchInAll=${text ? text : ''\r\n          }`\r\n      }\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                role: response.data.role\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    const { token, page, contentPerPage, search } = this.state\r\n    if (token) {\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp\r\n          }/role/getList/${page}?contentPerPage=${contentPerPage}&searchInAll=${search ? search : ''\r\n          }&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp\r\n          }/role/getList/${page}?contentPerPage=${contentPerPage}&searchInAll=${search ? search : ''\r\n          }`\r\n      }\r\n      await this.setState({\r\n        loading: 'table'\r\n        // search: search\r\n      })\r\n      // await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          await this.setState({\r\n            loading: '',\r\n            row: [],\r\n            totalLength: 0,\r\n            pageNumber: 0\r\n          })\r\n          if (response.status === 200) {\r\n            const data = await response.data\r\n            const content = await data.content\r\n            await this.setState({\r\n              totalLength: content.length ? content.length : 0,\r\n              row: content.rows ? content.rows : [],\r\n              pageNumber: content.pageNumber ? content.pageNumber : 0,\r\n              role: data.role\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    this.setState({\r\n      [e.target.name]: parseInt(e.target.value)\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = parseInt(e.target.value)\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      if (this.state.textSearch !== '') {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      } else {\r\n        this.fetchData()\r\n      }\r\n    }, 100)\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  handleAttachment = data => {\r\n    let allData = []\r\n    for (let value in data) {\r\n      allData.push(data[value])\r\n    }\r\n    return allData\r\n  }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = async () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.refs.page.value = await 1\r\n      this.refs.contentPerPage.value = await 25\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    let objState = await {\r\n      page: 1,\r\n      contentPerPage: 25,\r\n      textSearch: '',\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      pageAdvance: 1,\r\n      totalAdvance: 0,\r\n      secondData: {},\r\n      search: '',\r\n      _active: '',\r\n      objFiltered: {},\r\n      _listData_: []\r\n    }\r\n    let merge = await { ...state, ...objState }\r\n    await this.setState(merge)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (key, data, checkAdd) => {\r\n    const nameDataBase = await data.value\r\n    const {\r\n      open_header,\r\n      token,\r\n      list,\r\n      pageAdvance,\r\n      textSearch,\r\n      search\r\n    } = await this.state\r\n    if (token) {\r\n      await this.setState({\r\n        loading: 'advance',\r\n        list: !checkAdd ? [] : list,\r\n        open_header: !checkAdd ? key : open_header\r\n      })\r\n      let url\r\n      let secondUrl = `searchByFields=${textSearch}`\r\n      if (handleCheckText(textSearch)) {\r\n        url = `${StaticData.domainIp}/role/getAutoFill/${nameDataBase}/page/${pageAdvance}?searchInAll=${search}&${secondUrl}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/role/getAutoFill/${nameDataBase}/page/${pageAdvance}?searchInAll=${search}`\r\n      }\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          const { content } = response.data\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (content) {\r\n              let list = [...new Set(content.fields.split('__DARA__'))]\r\n              const handleList = () => {\r\n                if (checkAdd) {\r\n                  let array = this.state.list ? this.state.list : []\r\n                  array = array.concat(list)\r\n                  return array\r\n                } else {\r\n                  return list\r\n                }\r\n              }\r\n              await this.setState({\r\n                list: handleList(),\r\n                // pageAdvance: content.pageNo,\r\n                totalAdvance: content.total\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleSearchAdvance = async text => {\r\n    const checkheader = this.state.header[this.state.open_header]\r\n    if (checkheader) {\r\n      const nameDataBase = checkheader.value\r\n      const { pageAdvance, search, token, textSearch } = this.state\r\n      if (this.state.token) {\r\n        this.setState({ loading: 'advance' })\r\n        let secondUrl = `searchByFields=${textSearch}`\r\n        let url\r\n        if (handleCheckText(textSearch)) {\r\n          url = `${StaticData.domainIp\r\n            }/role/getAutoFill/${nameDataBase}/page/${pageAdvance}?searchInField=${text ? text : ''\r\n            }&searchInAll=${search}&${secondUrl}`\r\n        } else {\r\n          url = `${StaticData.domainIp\r\n            }/role/getAutoFill/${nameDataBase}/page/${pageAdvance}?searchInField=${text ? text : ''\r\n            }&searchInAll=${search}`\r\n        }\r\n        await axios\r\n          .get(url, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          })\r\n          .then(async response => {\r\n            const { content } = response.data\r\n            this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              if (content) {\r\n                let list = [...new Set(content.fields.split('__DARA__'))]\r\n                await this.setState({\r\n                  list: list,\r\n                  totalAdvance: content.total\r\n                })\r\n              }\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(async err => {\r\n            this.setState({ loading: '' })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join('*')\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: '' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    // text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    text = `${ListText.join('|$')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '', pageAdvance: 1 })\r\n    }, 100)\r\n  }\r\n  GetMore = async (key, documentNumber) => {\r\n    await this.setState({\r\n      selectNumber: key,\r\n      firstData: [],\r\n      documentSelected: ''\r\n    })\r\n    if (this.state.token) {\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/role/getDocumentRevisions?documentNumber=${documentNumber}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            this.setState({\r\n              firstData: response.data.content,\r\n              selectNumber: key,\r\n              documentSelected: documentNumber\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          await this.setState({ selectNumber: key })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  GetSecondData = async (data, index, key) => {\r\n    if (this.state.token) {\r\n      const { revision, documentNumber } = data\r\n      this.setState({\r\n        selectNumber: key,\r\n        secondData: {},\r\n        secondSelectNumber: '',\r\n        revision: revision\r\n      })\r\n      const url = `/role/getDocumentRevisionDetail?documentNumber=${documentNumber}&revision=${revision}`\r\n      await axios\r\n        .get(`${StaticData.domainIp}/${url}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              secondData: response.data.content,\r\n              selectNumber: key,\r\n              secondSelectNumber: index\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handlePositionBox = key => {\r\n    const half = this.state.contentPerPage / 2\r\n    if (key >= half) {\r\n      return 'bottomBox'\r\n    } else return ''\r\n  }\r\n  handlePositionSecondBox = (key, index) => {\r\n    const halfKey = this.state.contentPerPage / 2,\r\n      halfIndex = parseInt(index / 2)\r\n    if (key >= halfKey) {\r\n      return 'bottomBox'\r\n    } else if (key >= halfIndex) {\r\n      return 'middleBox'\r\n    } else return ''\r\n  }\r\n  handleCheck = list => {\r\n    if (list) {\r\n      if (list.length) {\r\n        return true\r\n      } else return false\r\n    }\r\n    return false\r\n  }\r\n  handleState = (name, value) => {\r\n    if (name && value) {\r\n      this.setState({ [name]: value })\r\n    } else {\r\n      this.setState(name)\r\n    }\r\n  }\r\n  CheckDownload = url => {\r\n    let xhr = new XMLHttpRequest()\r\n    xhr.open('HEAD', url, false)\r\n    xhr.send()\r\n    if (xhr.status == '404') {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  handleRefs = (name, elm) => {\r\n    this.Elm[name] = elm\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table w-100 persian rtl'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    <span\r\n                      className='IranSans_Bold_FA'\r\n                      onClick={() => this._handleClick(index, data)}\r\n                    >\r\n                      {data.name}\r\n                    </span>\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        // rtl={true}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                        bigSearch={true}\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n                <th className='action'>action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, key) => (\r\n                  <tr\r\n                    className={this.state._active === key ? '_active' : ''}\r\n                    key={key}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={key}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      handleAttachment={this.handleAttachment}\r\n                      objFiltered={this.state.objFiltered}\r\n                    // link={['pictures', 'attachments']}\r\n                    />\r\n                    <td className='action'>\r\n                      {this.Permision.handlePermision(this.state.role, '') &&\r\n                        !data.disabled && (\r\n                          <a\r\n                            className='mx-1'\r\n                            href={`edit-usergroup-${data.id}`}\r\n                            target='_blank'\r\n                            rel='noreferrer'\r\n                          >\r\n                            <span className='edit'>\r\n                              <EditIcon />\r\n                            </span>\r\n                          </a>\r\n                        )}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 ${this.state.loading === 'table' ? 'd-none' : ''\r\n              }`}\r\n          >\r\n            <FooterTable\r\n              {...this}\r\n              xls={`/role/exportExcel`}\r\n              xlsName='detail_engineering_export'\r\n              pdf={`/role/exportPdf`}\r\n              pdfName='detail_engineering_export'\r\n            />\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\EngineeringManagement\\API\\FnsTables.js",[],"E:\\bidboland\\src\\dashboard\\ppc.js",[],"E:\\bidboland\\src\\dashboard\\rampco.js",[],"E:\\bidboland\\src\\dashboard\\bidboland.js",[],"E:\\bidboland\\src\\dashboard\\wellcome.js",[],"E:\\bidboland\\src\\dashboard\\pars.js",[],"E:\\bidboland\\src\\layout\\Attention.js",[],"E:\\bidboland\\src\\daily-report\\clock.js",[],"E:\\bidboland\\src\\library\\ItemPopupLibrary.js",[],"E:\\bidboland\\src\\library\\ActionLibrary.js",[],"E:\\bidboland\\src\\createUser\\EditUser.js",[],"E:\\bidboland\\src\\library\\DocumentRegistration.js",["3203"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Form from '../Form/Form'\r\nimport { Redirect } from 'react-router-dom'\r\n// import handleCheckText from '../handleCheckText'\r\n// import getCustomFormat from '../getCustomFormat'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport handleCheckText from '../handleCheckText'\r\nexport default class DocumentRegistration extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.author = []\r\n    this.category = []\r\n    this.language = []\r\n    this.publisher = []\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      itemForm: [],\r\n      file_address: [],\r\n      file_addressName: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - ایجاد مدرک`\r\n    this.fetchData()\r\n  }\r\n  handleItemForm = content => {\r\n    const list = [\r\n      { name: 'عنوان', value: 'title', rtl: true, require: true },\r\n      { name: 'زیرعنوان', rtl: true, value: 'subtitle', require: true },\r\n      {\r\n        name: 'شماره بازنگری',\r\n        value: 'edition',\r\n        require: true,\r\n        rtl: true,\r\n        require: true\r\n      },\r\n      {\r\n        name: 'دسته بندی',\r\n        value: 'category',\r\n        select: true,\r\n        rtl: true,\r\n        listItem: content.category,\r\n        require: true\r\n      },\r\n      {\r\n        name: 'فایل',\r\n        value: 'file_address',\r\n        upload: true,\r\n        accept: '*',\r\n        rtl: true,\r\n        single: true,\r\n        require: true\r\n      },\r\n      {\r\n        name: 'نویسنده',\r\n        value: '_author',\r\n        rtl: true,\r\n        multi: true,\r\n        list: content.author,\r\n        multiselect: false,\r\n        require: true\r\n      },\r\n      {\r\n        name: 'ناشر',\r\n        value: 'publisher',\r\n        select: true,\r\n        rtl: true,\r\n        listItem: content.publisher,\r\n        require: true\r\n      },\r\n      {\r\n        name: 'سال انتشار',\r\n        value: 'year',\r\n        require: true,\r\n        rtl: true,\r\n        type: 'number',\r\n        maxLength: 4\r\n      },\r\n      {\r\n        name: 'حجم فایل',\r\n        value: 'size',\r\n        rtl: true\r\n      },\r\n      {\r\n        name: 'پسوند فایل',\r\n        value: 'ext',\r\n        rtl: true\r\n      },\r\n      {\r\n        name: 'تعداد صفحه',\r\n        value: 'pages',\r\n        require: true,\r\n        rtl: true,\r\n        type: 'number'\r\n      },\r\n      {\r\n        name: 'زبان',\r\n        value: 'language',\r\n        select: true,\r\n        rtl: true,\r\n        listItem: content.language\r\n      },\r\n      {\r\n        name: 'پیش نویس',\r\n        value: 'draft',\r\n        rtl: true,\r\n        checkBox: true\r\n      }\r\n    ]\r\n    return list\r\n  }\r\n  fetchData = async () => {\r\n    const { token } = this.state\r\n    let url = `${StaticData.domainIp}/LibraryManager/getFirstDetail`\r\n    await axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        this.setState({ loading: '' })\r\n        if (response.status === 200) {\r\n          const content = response.data.content\r\n          await this.handleItemForm(content)\r\n          await this.setState({\r\n            role: response.data.role,\r\n            itemForm: this.handleItemForm(content)\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    const { value, maxLength, name } = e.target\r\n    this.setState({\r\n      [name]: maxLength !== -1 ? value.slice(0, maxLength) : value\r\n    })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, i) => {\r\n    let datareg = new FormData()\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/equipmentid`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await this.setState({\r\n            [nameState]: [response.data.content],\r\n            [names]: [file.name]\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  deleteFile = async (num, files, names) => {\r\n    let fileList = await this.state[files],\r\n      nameList = await this.state[names]\r\n    if (fileList && nameList) {\r\n      await nameList.splice(num, 1)\r\n      await fileList.splice(num, 1)\r\n      await this.setState({ [files]: fileList, [names]: nameList })\r\n    }\r\n  }\r\n  Reset = () => {\r\n    let obj = {\r\n      category: '',\r\n      edition: '',\r\n      _author: '',\r\n      title: '',\r\n      subtitle: '',\r\n      publisher: '',\r\n      year: '',\r\n      pages: '',\r\n      language: '',\r\n      file_address: [],\r\n      file_addressName: [],\r\n      size: '',\r\n      ext: '',\r\n      draft: false\r\n    }\r\n    this.setState(obj)\r\n  }\r\n  handleSubmit = async status => {\r\n    const {\r\n      category,\r\n      edition,\r\n      _author,\r\n      title,\r\n      subtitle,\r\n      publisher,\r\n      year,\r\n      pages,\r\n      language,\r\n      file_address,\r\n      size,\r\n      ext,\r\n      draft,\r\n      token\r\n    } = await this.state\r\n    const check =\r\n      handleCheckText(category) &&\r\n      handleCheckText(edition) &&\r\n      _author !== undefined &&\r\n      handleCheckText(_author.value) &&\r\n      handleCheckText(title) &&\r\n      handleCheckText(subtitle) &&\r\n      handleCheckText(publisher) &&\r\n      handleCheckText(year) &&\r\n      handleCheckText(pages) &&\r\n      handleCheckText(language) &&\r\n      file_address.length > 0 &&\r\n      handleCheckText(file_address[0])\r\n    if (check) {\r\n      await this.setState({\r\n        disabled: true,\r\n        loading: status ? 'continue' : 'submit'\r\n      })\r\n      let url = `${StaticData.domainIp}/LibraryManager/create`\r\n      let datareg = await new FormData()\r\n      await datareg.append('category', category)\r\n      await datareg.append('edition', edition)\r\n      await datareg.append('_author', _author.value)\r\n      await datareg.append('title', title)\r\n      await datareg.append('subtitle', subtitle)\r\n      await datareg.append('publisher', publisher)\r\n      await datareg.append('year', year)\r\n      await datareg.append('pages', pages)\r\n      await datareg.append('language', language)\r\n      await datareg.append('file_address', file_address[0])\r\n      await datareg.append('size', size)\r\n      await datareg.append('ext', ext)\r\n      await datareg.append('draft', draft ? true : false)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: !status, disabled: false })\r\n              if (status) {\r\n                this.Reset()\r\n              }\r\n            }, 5000)\r\n          } else {\r\n            await this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/library-manager`\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    return (\r\n      <div className='main'>\r\n        <div className='row m-0'>\r\n          <Sidebar\r\n            handleState={(name, value) => this.setState({ [name]: value })}\r\n          />\r\n          <div\r\n            className={`${\r\n              this.state._close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'\r\n            } dashboard`}\r\n          >\r\n            <Menu nameRole='' nameUrl={this.props.nameUrl} />\r\n            <div className='w-100 row m-0 main-box-dashboard'>\r\n              <div className='boxes-dashboard row m-0 p-0'>\r\n                <div className='main-form'>\r\n                  <div className='title-from'>\r\n                    <h2>ایجاد سند جدید</h2>\r\n                  </div>\r\n                  <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                    <div className='form row rtl'>\r\n                      <Form\r\n                        {...this}\r\n                        handleState={(name, value) =>\r\n                          this.setState({ [name]: value })\r\n                        }\r\n                      />\r\n                      <div className='submit-form rtl col-12 mt-5'>\r\n                        <button\r\n                          onClick={this.handleSubmit}\r\n                          disabled={this.state.disabled}\r\n                        >\r\n                          {this.state.loading === 'submit' ? (\r\n                            <Loading className='form-loader' />\r\n                          ) : (\r\n                            <DoneIcon />\r\n                          )}\r\n                          ثبت اطلاعات\r\n                        </button>\r\n                        <button\r\n                          className='continue mr-3'\r\n                          onClick={() => this.handleSubmit(true)}\r\n                          disabled={this.state.disabled}\r\n                        >\r\n                          {this.state.loading === 'continue' ? (\r\n                            <Loading className='form-loader' />\r\n                          ) : (\r\n                            <DoneIcon />\r\n                          )}\r\n                          ثبت و ادامه\r\n                        </button>\r\n                        <CancelButton redirect='library-manager' />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\library\\LibraryManager.js",[],"E:\\bidboland\\src\\notification\\SendMessage.js",["3204"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\n// import axios from 'axios'\r\nimport StaticData from '../staticData'\r\n// import Notification from '../notification/notification'\r\n// import Message from '../notification/Message'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Form from '../Form/Form'\r\nimport { Redirect } from 'react-router-dom'\r\nimport handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nexport default class SendMessage extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // handleCheckText = HandleCheckText.handleCheckText\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      foucs: '',\r\n      loading: '',\r\n      description: '',\r\n      itemForm: [\r\n        {\r\n          name: 'متن پیام',\r\n          value: 'description',\r\n          textArea: true,\r\n          rtl: true,\r\n          require: true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - پیام جدید`\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleSubmit = async () => {}\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else {\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu nameRole='' nameUrl={this.props.nameUrl} />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard row m-0 p-0'>\r\n                    <div className='main-form'>\r\n                      <div className='title-from'>\r\n                        <h2>پیام جدید</h2>\r\n                      </div>\r\n                      <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                        <div className='form row ltr'>\r\n                          <Form {...this} />\r\n                          <div className='submit-form rtl col-12 mt-5'>\r\n                            <button\r\n                              onClick={this.handleSubmit}\r\n                              disabled={this.state.disabled}\r\n                            >\r\n                              {this.state.loading === 'submit' ? (\r\n                                <Loading className='form-loader' />\r\n                              ) : (\r\n                                <DoneIcon />\r\n                              )}\r\n                              ثبت اطلاعات\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\WBS\\AttachedDocumentsPurchasePackagesForm.js",[],"E:\\bidboland\\src\\WBS\\ListEngineeringDocumentsForm.js",[],"E:\\bidboland\\src\\WBS\\PurchasePackagesForm.js",[],"E:\\bidboland\\src\\WBS\\WorkFailureStructureForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\CreateCCS.js",["3205"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Form from '../Form/Form'\r\nimport { Redirect } from 'react-router-dom'\r\nimport handleCheckText from '../handleCheckText'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport CancelButton from '../layout/CancelButton'\r\n\r\nexport default class CreateCCS extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // handleCheckText = HandleCheckText.handleCheckText\r\n    // this.getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      itemForm: [\r\n        { name: 'CCSNo', value: 'CCSNo', require: true },\r\n        { name: 'CCSStatus', value: 'CCSStatus', require: true },\r\n        { name: 'CCSType', value: 'CCSType', require: true },\r\n        { name: 'Remark', value: 'Remark' },\r\n        { name: 'RecDate', value: 'RecDate', date: true },\r\n        { name: 'Disipline', value: 'Disipline' },\r\n        { name: 'Subject', value: 'Subject', require: true },\r\n        { name: 'TagNo', value: 'TagNo', require: true },\r\n        { name: 'DocNo', value: 'DocNo', require: true },\r\n        { name: 'StatusTQ', value: 'StatusTQ' },\r\n        { name: 'SentTQDate', value: 'SentTQDate', date: true },\r\n        { name: 'StatusLetter', value: 'StatusLetter' },\r\n        { name: 'SentLetterDate', value: 'SentLetterDate', date: true },\r\n        { name: 'RefTQ', value: 'RefTQ' },\r\n        { name: 'RefLetter', value: 'RefLetter' },\r\n        { name: 'Unit', value: 'Unit', require: true },\r\n        { name: 'Zone', value: 'Zone', require: true },\r\n        { name: 'P&ID', value: 'PID', require: true },\r\n        { name: 'Owner Discipline', value: 'OwnerDiscipline' },\r\n        { name: 'Expr1', value: 'Expr1' },\r\n        { name: 'Delay', value: 'Delay' },\r\n        { name: 'TypeBSendToOwner', value: 'TypeBSendToOwner' },\r\n        { name: 'TypeBReceiveFromOwner', value: 'TypeBReceiveFromOwner' },\r\n        { name: 'Expr2', value: 'Expr2' },\r\n        { name: 'OwnerDelay', value: 'OwnerDelay' },\r\n        { name: 'ConstractionStatus', value: 'ConstractionStatus' },\r\n        { name: 'OwnerApproval', value: 'OwnerApproval' },\r\n        { name: 'ConstractionRemark', value: 'ConstractionRemark' },\r\n        { name: 'ActionBy', value: 'ActionBy', require: true },\r\n        { name: 'Priority', value: 'Priority' },\r\n        { name: 'DoneTypeBDate', value: 'DoneTypeBDate', date: true },\r\n        { name: 'attachment', value: 'attachment', upload: true, accept: '*' }\r\n      ],\r\n      CCSNo: '',\r\n      CCSStatus: '',\r\n      CCSType: '',\r\n      Remark: '',\r\n      RecDate: undefined,\r\n      Disipline: '',\r\n      Subject: '',\r\n      TagNo: '',\r\n      DocNo: '',\r\n      StatusTQ: '',\r\n      SentTQDate: undefined,\r\n      StatusLetter: '',\r\n      SentLetterDate: undefined,\r\n      RefTQ: '',\r\n      RefLetter: '',\r\n      Unit: '',\r\n      Zone: '',\r\n      PID: '',\r\n      OwnerDiscipline: '',\r\n      Expr1: '',\r\n      Delay: '',\r\n      TypeBSendToOwner: '',\r\n      TypeBReceiveFromOwner: '',\r\n      Expr2: '',\r\n      OwnerDelay: '',\r\n      ConstractionStatus: '',\r\n      OwnerApproval: '',\r\n      ConstractionRemark: '',\r\n      ActionBy: '',\r\n      Priority: '',\r\n      DoneTypeBDate: undefined,\r\n      attachment: [],\r\n      attachmentName: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - ایجاد CCS`\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  handleUpload = async (e, files, names) => {\r\n    await e.preventDefault()\r\n    await this.setState({ loading: files })\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(e.target.files[i])\r\n      await this.GetLink(\r\n        files,\r\n        e.target.files[i],\r\n        names,\r\n        e.target.files.length,\r\n        i\r\n      )\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, i) => {\r\n    let datareg = new FormData()\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/equipmentid`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await this.setState({\r\n            [nameState]: [...this.state[nameState], response.data.content],\r\n            [names]: [...this.state[names], file.name]\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  deleteFile = async (num, files, names) => {\r\n    let fileList = await this.state[files],\r\n      nameList = await this.state[names]\r\n    if (fileList && nameList) {\r\n      await nameList.splice(num, 1)\r\n      await fileList.splice(num, 1)\r\n      await this.setState({ [files]: fileList, [names]: nameList })\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let {\r\n      CCSNo,\r\n      CCSStatus,\r\n      CCSType,\r\n      Remark,\r\n      RecDate,\r\n      Disipline,\r\n      Subject,\r\n      TagNo,\r\n      DocNo,\r\n      StatusTQ,\r\n      SentTQDate,\r\n      StatusLetter,\r\n      SentLetterDate,\r\n      RefTQ,\r\n      RefLetter,\r\n      Unit,\r\n      Zone,\r\n      PID,\r\n      OwnerDiscipline,\r\n      Expr1,\r\n      Delay,\r\n      TypeBSendToOwner,\r\n      TypeBReceiveFromOwner,\r\n      Expr2,\r\n      OwnerDelay,\r\n      ConstractionStatus,\r\n      OwnerApproval,\r\n      ConstractionRemark,\r\n      ActionBy,\r\n      Priority,\r\n      DoneTypeBDate\r\n    } = this.state\r\n    const check =\r\n      handleCheckText(CCSStatus) &&\r\n      handleCheckText(CCSType) &&\r\n      handleCheckText(Subject) &&\r\n      handleCheckText(DocNo) &&\r\n      handleCheckText(Zone) &&\r\n      handleCheckText(Unit) &&\r\n      handleCheckText(PID) &&\r\n      handleCheckText(ActionBy)\r\n    if (check) {\r\n      await this.setState({ loading: 'submit', disabled: true })\r\n      let datareg = await new FormData()\r\n      await datareg.append('CCSNo', CCSNo)\r\n      await datareg.append('CCSStatus', CCSStatus)\r\n      await datareg.append('CCSType', CCSType)\r\n      await datareg.append('Remark', Remark)\r\n      await datareg.append('RecDate', this.getCustomFormat(RecDate, true))\r\n      await datareg.append('Disipline', Disipline)\r\n      await datareg.append('Subject', Subject)\r\n      await datareg.append('TagNo', TagNo)\r\n      await datareg.append('DocNo', DocNo)\r\n      await datareg.append('StatusTQ', StatusTQ)\r\n      await datareg.append('SentTQDate', this.getCustomFormat(SentTQDate, true))\r\n      await datareg.append('StatusLetter', StatusLetter)\r\n      await datareg.append(\r\n        'SentLetterDate',\r\n        this.getCustomFormat(SentLetterDate, true)\r\n      )\r\n      await datareg.append('RefTQ', RefTQ)\r\n      await datareg.append('RefLetter', RefLetter)\r\n      await datareg.append('Unit', Unit)\r\n      await datareg.append('Zone', Zone)\r\n      await datareg.append('PID', PID)\r\n      await datareg.append('OwnerDiscipline', OwnerDiscipline)\r\n      await datareg.append('Expr1', Expr1)\r\n      await datareg.append('Delay', Delay)\r\n      await datareg.append('TypeBSendToOwner', TypeBSendToOwner)\r\n      await datareg.append('TypeBReceiveFromOwner', TypeBReceiveFromOwner)\r\n      await datareg.append('Expr2', Expr2)\r\n      await datareg.append('OwnerDelay', OwnerDelay)\r\n      await datareg.append('ConstractionStatus', ConstractionStatus)\r\n      await datareg.append('OwnerApproval', OwnerApproval)\r\n      await datareg.append('ConstractionRemark', ConstractionRemark)\r\n      await datareg.append('ActionBy', ActionBy)\r\n      await datareg.append('Priority', Priority)\r\n      await datareg.append(\r\n        'DoneTypeBDate',\r\n        this.getCustomFormat(DoneTypeBDate, true)\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/CCS/create`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            await this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/ccs`\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    return (\r\n      <div className='main'>\r\n        <div className='row m-0'>\r\n          <Sidebar\r\n            handleState={(name, value) => this.setState({ [name]: value })}\r\n          />\r\n          <div\r\n            className={`${\r\n              this.state._close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'\r\n            } dashboard`}\r\n          >\r\n            <Menu nameRole='comment_sheet_create' nameUrl={this.props.nameUrl} />\r\n            <div className='w-100 row m-0 main-box-dashboard'>\r\n              <div className='boxes-dashboard row m-0 p-0'>\r\n                <div className='main-form'>\r\n                  <div className='title-from'>\r\n                    <h2>ایجاد سند جدید</h2>\r\n                  </div>\r\n                  <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                    <div className='form row ltr'>\r\n                      <Form\r\n                        {...this}\r\n                        handleState={(name, value) =>\r\n                          this.setState({ [name]: value })\r\n                        }\r\n                      />\r\n                      <div className='submit-form rtl col-12 mt-5'>\r\n                        <button\r\n                          onClick={this.handleSubmit}\r\n                          disabled={this.state.disabled}\r\n                        >\r\n                          {this.state.loading === 'submit' ? (\r\n                            <Loading className='form-loader' />\r\n                          ) : (\r\n                            <DoneIcon />\r\n                          )}\r\n                          ثبت اطلاعات\r\n                        </button>\r\n                        <CancelButton redirect='comment_sheet' />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TechnicalArchive\\EditCCS.js",[],"E:\\bidboland\\src\\TechnicalArchive\\InstrumentFormEdit.js",[],"E:\\bidboland\\src\\library\\API\\FnsTables.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BuildFinalBookletForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\CCS.js",[],"E:\\bidboland\\src\\TechnicalArchive\\FinalEngineeringManualForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\InstrumentForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\3DModelForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\IsoMetricForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\3DModelFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\IsoMetricFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\LineListFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\LineListForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\P&IDFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\P&IDForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\PFDFormEdit.js",[],"E:\\bidboland\\src\\knowledgeManagement\\RegisteredForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\EquipmentID.js",[],"E:\\bidboland\\src\\DaraBI\\ProductionCalculation.js",["3206","3207","3208"],"import React, { Component } from 'react'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport Form from '../Form/Form'\r\nimport Cookies from 'js-cookie'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport StaticData from '../staticData'\r\nimport handleCheckText from '../handleCheckText'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport PopUpTable from '../table/PopUpTable'\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft'\r\n// import { keys } from '@amcharts/amcharts4/.internal/core/utils/Object'\r\nimport handleString from '../handleString'\r\nexport default class ProductionCalculation extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // handleCheckText = HandleCheckText.handleCheckText\r\n    // this.getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      itemForm: [\r\n        {\r\n          name: 'تاریخ شروع',\r\n          value: 'startDate',\r\n          require: true,\r\n          rtl: true,\r\n          date: true\r\n        },\r\n        {\r\n          name: 'تاریخ پایان',\r\n          value: 'endDate',\r\n          require: true,\r\n          rtl: true,\r\n          date: true,\r\n          disabled: true\r\n        },\r\n        {\r\n          name: 'متان ارسالی به خط سراسری',\r\n          value: 'sentMethaneToNationalLine',\r\n          rtl: true,\r\n          label: 'ورودی محاسبات متان'\r\n        },\r\n        { name: 'گاز سوخت مصرفی', value: 'gasConsumption', rtl: true },\r\n        {\r\n          name: 'مجموع مقدار ارسالی',\r\n          value: 'pentanePlus',\r\n          rtl: true,\r\n          label: 'ورودی محاسبات پنتان پلاس'\r\n        },\r\n        {\r\n          name: 'مقدار گاز شرین',\r\n          value: 'sweetGas',\r\n          rtl: true,\r\n          label: 'ورودی محاسبات گاز شیرین'\r\n        }\r\n      ],\r\n      startDate: undefined,\r\n      endDate: undefined,\r\n      sentMethaneToNationalLine: '',\r\n      gasConsumption: '',\r\n      pentanePlus: '',\r\n      sweetGas: '',\r\n      popup: false,\r\n      dataPopUp: null\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - محاسبات تولید`\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleSubmit = async () => {\r\n    let {\r\n      startDate,\r\n      endDate,\r\n      sentMethaneToNationalLine,\r\n      gasConsumption,\r\n      pentanePlus,\r\n      sweetGas\r\n    } = await this.state\r\n    const check =\r\n      (await startDate) !== undefined &&\r\n      endDate !== undefined &&\r\n      handleCheckText(sentMethaneToNationalLine)\r\n        ? handleCheckText(gasConsumption)\r\n        : handleCheckText(gasConsumption)\r\n        ? handleCheckText(sentMethaneToNationalLine)\r\n        : true\r\n    if (check) {\r\n      await this.setState({ loading: 'submit', disabled: true })\r\n      let datareg = await new FormData()\r\n      await datareg.append('startDate', this.getCustomFormat(startDate, true))\r\n      await datareg.append('endDate', this.getCustomFormat(endDate, true))\r\n      await datareg.append(\r\n        'sentMethaneToNationalLine',\r\n        sentMethaneToNationalLine\r\n      )\r\n      await datareg.append('gasConsumption', gasConsumption)\r\n      await datareg.append('pentanePlus', pentanePlus)\r\n      await datareg.append('sweetGas', sweetGas)\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/productionProcessFormula/getAllFormula`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(response => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (response.status === 200) {\r\n            if (response.data.content) {\r\n              this.setState({\r\n                popup: true,\r\n                dataPopUp: response.data.content\r\n              })\r\n            } else {\r\n              Notification.notify(Message.text(925), 'warning')\r\n              this.setState({ popup: false, dataPopUp: null })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  Reset = () => {\r\n    this.setState({\r\n      startDate: undefined,\r\n      endDate: undefined,\r\n      sentMethaneToNationalLine: '',\r\n      gasConsumption: '',\r\n      pentanePlus: '',\r\n      sweetGas: '',\r\n      popup: false,\r\n      dataPopUp: null\r\n    })\r\n  }\r\n  ChangeDate = (name, value) => {\r\n    let itemForm = this.state.itemForm\r\n    if (name === 'startDate') {\r\n      itemForm = Object.keys(this.state.itemForm).map(item => {\r\n        if (this.state.itemForm[item].value === 'endDate') {\r\n          this.state.itemForm[item].disabled = false\r\n          this.state.itemForm[item].min = value\r\n        }\r\n        return this.state.itemForm[item]\r\n      })\r\n    }\r\n    this.setState({\r\n      [name]: value,\r\n      itemForm: itemForm,\r\n      endDate: name === 'startDate' ? undefined : value\r\n    })\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='main'>\r\n        <div className='col-12 p-0'>\r\n          <div className='row m-0'>\r\n            <Sidebar\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n            />\r\n            <div\r\n              className={`${\r\n                this.state._close ? 'mainSideClose' : 'col-xl-10 col-lg-10 p-0'\r\n              } dashboard`}\r\n            >\r\n              <Menu nameRole='' nameUrl={this.props.nameUrl} />\r\n              <div className='w-100 row m-0 main-box-dashboard'>\r\n                <div className='boxes-dashboard row m-0 p-0'>\r\n                  <div className='main-form'>\r\n                    <div className='title-from'>\r\n                      <h2>تنظیم محاسبات تولید</h2>\r\n                    </div>\r\n                    <div className='col-xl-8 col-lg-10 col-md-12 col-12'>\r\n                      <div className='form row rtl'>\r\n                        <Form\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.ChangeDate(name, value)\r\n                          }\r\n                        />\r\n                        <div className='submit-form rtl col-12 mt-5'>\r\n                          <button\r\n                            onClick={this.handleSubmit}\r\n                            disabled={this.state.disabled}\r\n                          >\r\n                            {this.state.loading === 'submit' ? (\r\n                              <Loading className='form-loader' />\r\n                            ) : (\r\n                              <DoneIcon />\r\n                            )}\r\n                            ثبت اطلاعات\r\n                          </button>\r\n                          <button\r\n                            className='continue mr-2'\r\n                            onClick={this.Reset}\r\n                          >\r\n                            <RotateLeftIcon />\r\n                            تازه سازی\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {this.state.popup && (\r\n                    <PopUpTable\r\n                      {...this}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\notification\\PanelNotification\\PanelNotification.js",[],"E:\\bidboland\\src\\knowledgeManagement\\AcceptedForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\PFDForm.js",[],"E:\\bidboland\\src\\knowledgeManagement\\knowledgeManagement.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\toogleBtn.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\nameFields.js",[],"E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\FinalEquipmentManualForm.js",[],"E:\\bidboland\\src\\createUser\\EditUserGroup\\API\\APIFields.js",[],"E:\\bidboland\\src\\tsrNew\\note\\index.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineeringForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineeringFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineeringFormEdit.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BasicEngineeringForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineeringForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BasicEngineeringFormEdit.js",[],"E:\\bidboland\\src\\layout\\ResultPage.js",[],"E:\\bidboland\\src\\WBS\\WBS.js",[],"E:\\bidboland\\src\\tsrNew\\ShowTsr\\BoxText.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\buttonSubmitReviewResult.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\ButtonSubmit.js",[],"E:\\bidboland\\src\\dashboard-ppc\\dashboard.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\ResetState.js",[],"E:\\bidboland\\src\\tsrNew\\tsr4\\ResetState.js",[],"E:\\bidboland\\src\\tsrNew\\tsr4\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr4\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr4\\API.js",["3209"],"import Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport StaticData from '../../staticData'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport getCustomFormat from '../../getCustomFormat'\r\n// import handleString from '../../handleString'\r\nimport axios from 'axios'\r\nimport handleString from '../../handleString'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  fetchDataAPI = async () => {\r\n    const { handleState } = await this.data\r\n    let parentState = this.data.props.state || {}\r\n    const { handleCheckBoxBoolean } = this.data.props.API\r\n    let newState = parentState.tsr4 || {}\r\n    // let objForeign_attachment = await {\r\n    //   documentNumber: '',\r\n    //   degreeTitle: '',\r\n    //   numberPages: '',\r\n    //   descriptionAttachment: '',\r\n    //   AttachementName: [],\r\n    //   Attachement: []\r\n    // },\r\n    let objInternal_attachment = await {\r\n      documentNumber: null,\r\n      degreeTitle: '',\r\n      numberPages: '',\r\n      descriptionAttachment: ''\r\n    }\r\n    // const { handleForeignLink } = this.data.props.API\r\n    // let foreign = (await newState['foreign_attachment']) || [],\r\n    const internal = (await newState['internal_attachment']) || []\r\n    // newState['foreign_attachment'] = handleForeignLink(\r\n    //   foreign.length > 0 ? foreign : [objForeign_attachment]\r\n    // )\r\n    newState['internal_attachment'] =\r\n      internal.length > 0 ? internal : [objInternal_attachment]\r\n    let hazop = handleCheckBoxBoolean('hazop_review', false)\r\n    let hse = handleCheckBoxBoolean('hse_review')\r\n    newState['hazop_review'] = hazop\r\n    newState['hse_review'] = hse\r\n    // newState['Prev_hse_review'] = hse\r\n    let name = `hse_review_msg_${hse}`\r\n    newState[name] = await newState['hse_review_msg']\r\n    handleState(newState)\r\n  }\r\n  HseReviewAPI = (e, data) => {\r\n    const parentState = this.data.props.state || {}\r\n    const { handleState } = this.data\r\n    const { edit_admin } = parentState\r\n    const checkAdmin = edit_admin === '1'\r\n    const check = !checkAdmin\r\n    let { name } = e.target\r\n    let { value } = data\r\n    if (check) {\r\n      handleState({\r\n        [name]: value,\r\n        hse_review_msg_true: '',\r\n        hse_review_msg_false: '',\r\n        suggested_execution_time: null\r\n      })\r\n    }\r\n  }\r\n  HAZOPReviewAPI = (e, data) => {\r\n    let { name } = e.target\r\n    let { value } = data\r\n    const { handleState } = this.data\r\n    let objForeign_attachment = {\r\n      documentNumber: '',\r\n      degreeTitle: '',\r\n      numberPages: '',\r\n      descriptionAttachment: '',\r\n      AttachementName: [],\r\n      Attachement: []\r\n    },\r\n      objInternal_attachment = {\r\n        documentNumber: null,\r\n        degreeTitle: '',\r\n        numberPages: '',\r\n        descriptionAttachment: ''\r\n      }\r\n    handleState({\r\n      [name]: value,\r\n      foreign_attachment: [objForeign_attachment],\r\n      internal_attachment: [objInternal_attachment]\r\n    })\r\n  }\r\n  handleAddAttachAPI = nameState => {\r\n    const { handleState, state } = this.data\r\n    let obj = {}\r\n    let check = false\r\n    switch (nameState) {\r\n      case 'foreign_attachment':\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n        check = this.CheckForeign()\r\n        break\r\n      case 'internal_attachment':\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n        check = this.CheckInternal()\r\n        break\r\n      default:\r\n        obj = {}\r\n        break\r\n    }\r\n    if (check) {\r\n      const resultState = { [nameState]: [...state[nameState], obj] }\r\n      handleState(resultState)\r\n    } else {\r\n      Notification.notify(Message.text(932), 'error')\r\n    }\r\n  }\r\n  handlCreate = id => {\r\n    const { CheckAllow, state , API} = this.data.props\r\n    const { status, page , select} = state\r\n    const { handleSwitchid } = API\r\n    const nameAdmin = `tsr${handleSwitchid(select)}admin_update_allow`\r\n    const notAdmin = state[nameAdmin] ? false : true\r\n    const check = status === 'create' && parseInt(page) === id\r\n    let allow = CheckAllow('fill_allow')\r\n    const result = check && allow && notAdmin\r\n    return result\r\n  }\r\n  handleCheckUpdate = id => {\r\n    let parentState = this.data.props.state || {}\r\n    const { page } = parentState\r\n    const { CheckAllow } = this.data.props\r\n    const Allow = CheckAllow('update_allow')\r\n    const check = parseInt(page) === id\r\n    const result = Allow && check\r\n    return result\r\n  }\r\n  handleDisabledAPI = () => {\r\n    const canUpdate = this.handleCheckUpdate(4)\r\n    const canCreate = this.handlCreate(4)\r\n    const check = canUpdate || canCreate\r\n    const result = check\r\n    return !result\r\n  }\r\n  handleDisabledAPIElm = () => {\r\n    const { state } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    const { select } = parentState\r\n    const NameCheckbox = `checkBox_${select}`\r\n    const checkBox = state[NameCheckbox] ? true : false\r\n    const canUpdate = this.handleCheckUpdate(4)\r\n    const canCreate = this.handlCreate(4)\r\n    const check = canUpdate || canCreate\r\n    const result = !check\r\n    return result || checkBox\r\n  }\r\n  CheckForeign = () => {\r\n    const state = this.data.state || {}\r\n    const foreign_attachment = state.foreign_attachment || []\r\n    let i = 0\r\n    let check = false\r\n    while (i < foreign_attachment.length) {\r\n      let _obj = foreign_attachment[i]\r\n      const { Attachement, AttachementName, degreeTitle } = _obj\r\n      check = Attachement.length > 0 && AttachementName.length > 0\r\n      // handleCheckText(degreeTitle)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  CheckInternal = () => {\r\n    let check = false\r\n    const state = this.data.state || {}\r\n    const internal_attachment = state.internal_attachment || []\r\n    let i = 0\r\n    while (i < internal_attachment.length) {\r\n      let _obj = internal_attachment[i]\r\n      const { degreeTitle, documentNumber } = _obj\r\n      check = handleCheckText(degreeTitle) && handleCheckText(documentNumber)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  deleteFileListAPI = async (key, num, files, names, parent) => {\r\n    const { handleState } = this.data\r\n    let state = this.data.state\r\n    let _Parent = await state[parent]\r\n    let obj = await _Parent[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await handleState({ [parent]: _Parent })\r\n  }\r\n  handleUploadListAPI = async (e, files, names, parentState) => {\r\n    const { handleState } = this.data\r\n    await e.preventDefault()\r\n    let _files_ = e.target.files\r\n    handleState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < _files_.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(_files_[i])\r\n      await this.GetLinkAPI(\r\n        files,\r\n        _files_[i],\r\n        names,\r\n        _files_.length,\r\n        key,\r\n        i,\r\n        parentState\r\n      )\r\n    }\r\n  }\r\n  GetLinkAPI = (nameState, file, names, length, key, i, parentState) => {\r\n    let { state, handleState } = this.data\r\n\r\n    const { token, tsr_id } = state\r\n    let datareg = new FormData()\r\n    let array = state[parentState][key][nameState],\r\n      arrayName = state[parentState][key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Tsr/Form4/${tsr_id}`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    }).then(async response => {\r\n      if (i + 1 === length) {\r\n        handleState({ loading: '' })\r\n      }\r\n      if (response.status === 200) {\r\n        const { content } = response.data\r\n        await array.push(content)\r\n        await arrayName.push(file.name)\r\n        let _Parent = await state[parentState]\r\n        let obj = await _Parent[key]\r\n        obj[nameState] = await array\r\n        obj[names] = await arrayName\r\n        await handleState({ [parentState]: _Parent })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    })\r\n  }\r\n  handleSearchDocument = value => {\r\n    let { handleState } = this.data\r\n    let url = `${StaticData.domainIp}/detailEng/searchInDocuments?documentNumber=${value}`\r\n    const check = value.length > 9\r\n    const checkText = handleCheckText(value)\r\n    if (check && checkText) {\r\n      handleState({ loading: 'document' })\r\n      this._Request(url)\r\n    } else handleState({ listData: [], loading: '' })\r\n  }\r\n  _Request = url => {\r\n    let { handleState, state } = this.data\r\n    const { token } = state\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        handleState({ loading: '' })\r\n        if (response.status === 200) {\r\n          handleState({ listData: response.data.content, loading: '' })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  ShowSign = () => {\r\n    let { handleDisabledElm } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let { status, level, select, edit } = parentState\r\n    let state1 = edit === '0'\r\n    let state2 = status === 'sign' || status === 'reject'\r\n    level = level || 0\r\n    select = select || 0\r\n    let check1 = level >= select\r\n    let check2 = handleDisabledElm()\r\n    let resultCheck = check1 && check2\r\n    let resultState = state1 && state2\r\n    const check = resultCheck || resultState\r\n    return check\r\n  }\r\n  handleCC = array => {\r\n    const result = Object.keys(array).map(data => {\r\n      let obj_data = array[data] || {}\r\n      const { value } = obj_data\r\n      return value\r\n    })\r\n    return result.join(',')\r\n  }\r\n  handleSubmitAPI = async () => {\r\n    const { handleCheckSigned } = await this.data.props.API\r\n    const { handleState, state } = this.data\r\n    let {\r\n      tsr_id,\r\n      hse_review,\r\n      // hse_review_msg,\r\n      suggested_execution_time,\r\n      hazop_review,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      notification_cc,\r\n      fire_boss_select,\r\n      hse_technician_select,\r\n      hse_boss_select,\r\n      hse_review_msg_false,\r\n      hse_review_msg_true,\r\n      token\r\n    } = await state\r\n    const checkHSE = hse_review\r\n      ? handleCheckText(hse_review_msg_true)\r\n      : handleCheckText(hse_review_msg_false)\r\n    const checkHazop = hazop_review ? this.CheckForeign() : true\r\n    const checkSign =\r\n      handleCheckSigned(hse_technician_select) &&\r\n      handleCheckSigned(fire_boss_select) &&\r\n      handleCheckSigned(hse_boss_select) &&\r\n      handleCheckText(tsr_id)\r\n    const checkFinal = checkHSE && checkSign && checkHazop\r\n    if (checkFinal) {\r\n      await handleState({\r\n        loading: 'submit',\r\n        disabled: true\r\n      })\r\n      let { value } = hse_technician_select\r\n      const cc = this.handleCC(notification_cc || [])\r\n      const url = `${StaticData.domainIp}/tsr_v1/tsr4Insert`\r\n      let time = getCustomFormat(suggested_execution_time)\r\n      const datareg = new FormData()\r\n      await datareg.append('tsr_id', tsr_id)\r\n      await datareg.append('hse_review', hse_review ? true : false)\r\n      await datareg.append(\r\n        'hse_review_msg',\r\n        hse_review\r\n          ? handleString(hse_review_msg_true)\r\n          : handleString(hse_review_msg_false)\r\n      )\r\n      await datareg.append('suggested_execution_time', time)\r\n      await datareg.append('hazop_review', hazop_review ? true : false)\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await datareg.append('notification_cc', cc)\r\n      await datareg.append('hse_technician_verify_by', value)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else Notification.notify(Message.text(99), 'error')\r\n  }\r\n  handleEditAPI = async () => {\r\n    const { handleState, state } = this.data\r\n    let {\r\n      tsr_id,\r\n      hse_review,\r\n      suggested_execution_time,\r\n      hazop_review,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      hse_review_msg_true,\r\n      hse_review_msg_false,\r\n      token\r\n    } = state\r\n    const checkHazop = hazop_review ? this.CheckForeign() : true\r\n    const checkHSE = hse_review\r\n      ? handleCheckText(hse_review_msg_true)\r\n      : handleCheckText(hse_review_msg_false)\r\n    const checkID = handleCheckText(tsr_id)\r\n    const checkFinal = checkHSE && checkID && checkHazop\r\n    if (checkFinal) {\r\n      await handleState({\r\n        loading: 'submit',\r\n        disabled: true\r\n      })\r\n      const url = `${StaticData.domainIp}/tsr_v1/tsr4Update`\r\n      let time = getCustomFormat(suggested_execution_time)\r\n      const datareg = await new FormData()\r\n      await datareg.append('tsr_id', tsr_id)\r\n      await datareg.append('hse_review', hse_review ? true : false)\r\n      await datareg.append(\r\n        'hse_review_msg',\r\n        hse_review\r\n          ? handleString(hse_review_msg_true)\r\n          : handleString(hse_review_msg_false)\r\n      )\r\n      await datareg.append('suggested_execution_time', time)\r\n      await datareg.append('hazop_review', hazop_review ? true : false)\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\tsrNew\\tsr5\\ResetState.js",[],"E:\\bidboland\\src\\tsrNew\\Dispatch\\Dispatch.js",["3210"],"import React, { useEffect } from 'react'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../../layout/loading'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport ShowNameDispacht from './ShowNameDispacht'\r\nimport History from './History'\r\nimport handleCheckText from '../../handleCheckText'\r\nconst Dispatch = props => {\r\n  // const [userDetail, setUserDetail] = useState({})\r\n  const parentProps = props.props\r\n  const {\r\n    filterUser,\r\n    handleDispatch,\r\n    handleAccessDispatchName,\r\n    handleRemoveAuthor,\r\n    handleDispatchUpdate,\r\n    handleSwitchid,\r\n    handleNameDispatch\r\n  } = parentProps.API\r\n  let parentState = parentProps.state || {}\r\n  const { disabled, loading, select, dispatch_history, selectRev } = parentState\r\n  let childObj = parentState[`tsr${select}`] || {}\r\n  let nameUpdateDispatchState = handleCheckText(props.nameTab) ? `${props.nameTab}_update_dispatch_state` : 'update_dispatch_state'\r\n  const update_dispatch_state = childObj[nameUpdateDispatchState]\r\n  let nameUpdateAllow = handleCheckText(props.nameTab) ? `${props.nameTab}_update_dispatch_allow` : 'update_dispatch_allow'\r\n  const update_dispatch_allow = childObj[nameUpdateAllow] ? true : false\r\n  const updateCheck = update_dispatch_allow ? true : false\r\n  let nameDispatch = handleAccessDispatchName()\r\n  let dispatch_allow = childObj[nameDispatch] ? true : false\r\n  let name = `dispatch__${select}`\r\n  const nameCheckBox = props.nameDis || `checkBox_${select}`\r\n  const checkBox = props.state[nameCheckBox] ? true : false\r\n  let { dispatch_firstName, dispatch_lastName, dispatch_date } = handleNameDispatch()\r\n  let FName = childObj[dispatch_firstName],\r\n    LName = childObj[dispatch_lastName]\r\n  const checkName = handleCheckText(FName) && handleCheckText(LName)\r\n  const userDetail = {\r\n    name: checkName ? `${FName} ${LName}` : '',\r\n    date: checkName ? childObj[dispatch_date] : ''\r\n  }\r\n  let user_list = handleRemoveAuthor({ total_list: filterUser(props.filter1, props.filter2), nameTab: props.nameTab, userDetail })\r\n  useEffect(() => {\r\n    let filter = user_list.filter(user => user.label === `${FName} ${LName}`)\r\n    const check = filter.length === 1\r\n    if (check) {\r\n      let _obj = filter[0]\r\n      let objSecond = { [name]: _obj }\r\n      parentProps.handleState(objSecond)\r\n    }\r\n    props.handleState({\r\n      [nameCheckBox]: false\r\n    })\r\n    if (!updateCheck)\r\n      ResetChange()\r\n  }, [])\r\n  // useEffect(() => {\r\n  // }, [parentState])\r\n  function handleChange(newValue) {\r\n    const check = newValue.__isNew__ ? false : true\r\n    let objSend = { [name]: check ? newValue : null }\r\n    parentProps.handleState(objSend)\r\n  }\r\n  function ResetChange() {\r\n    let objSend = { [name]: null }\r\n    parentProps.handleState(objSend)\r\n  }\r\n  function handleSubmit() {\r\n    if (updateCheck) handleDispatchUpdate(name)\r\n    else handleDispatch(name)\r\n  }\r\n  function handleDispached() {\r\n    const { handleNameCheckDispatch } = parentProps.API\r\n    let nameCheck = handleNameCheckDispatch()\r\n    let is_dispatch = childObj[nameCheck.trim()]\r\n    let result = is_dispatch === '1'\r\n    return result\r\n  }\r\n  function CheckDisabled() {\r\n    // let result = props.canCreate ? false : true\r\n    let result1 = props.except ? false : true\r\n    let state1 = props.handleDisabled()\r\n    let state2 = handleDispached()\r\n    let result2 = state1 || state2\r\n    let result = result1 ? result2 : result1\r\n    return result\r\n  }\r\n  function ChangeCheckBox(e) {\r\n    let check_active = updateCheck || !CheckDisabled()\r\n    if (check_active) {\r\n      const { checked } = e.target\r\n      let obj = {\r\n        [nameCheckBox]: checked ? true : false\r\n      }\r\n      props.handleState(obj)\r\n    }\r\n  }\r\n  let check_dis = checkBox ? false : true\r\n  const state1_check = CheckDisabled()\r\n  const state2_check = updateCheck ? false : true\r\n  const result_state = state1_check || state2_check\r\n  const _disabled = result_state && check_dis\r\n  const check_dispatched = !handleDispached()\r\n  // const check_page = props.except ? true : select === page\r\n  const check_canCreate = dispatch_allow && check_dispatched\r\n  const checkShow = check_canCreate || updateCheck\r\n  // const checkShow = check_page && except_result\r\n  let switchId = handleSwitchid(select)\r\n  const checkRev = handleCheckText(selectRev)\r\n  let nameObj = checkRev ? `form${switchId}_history` : `form${switchId}`\r\n  let arrayHistory = dispatch_history[nameObj] || []\r\n  const SortHistory = () => {\r\n    let result = arrayHistory.sort(function (a, b) {\r\n      return (parseInt(a.dispatch_level) - parseInt(b.dispatch_level))\r\n    })\r\n    return result\r\n  }\r\n  const list_history = SortHistory()\r\n  const final_disabled = _disabled || !checkBox\r\n  const checkLastName = handleCheckText(userDetail?.name)\r\n  return (\r\n    <div className='w-100 row mx-0'>\r\n      {checkLastName ?\r\n        <ShowNameDispacht userDetail={userDetail} />\r\n        :\r\n        checkShow &&\r\n        <div className='title-password col-12 mt-3 mb-2'>\r\n          <h2 className='IranSans_Bold'>دستگردانی</h2>\r\n          <div className='line'></div>\r\n        </div>\r\n      }\r\n      {list_history.length > 0 && <History list={list_history} />}\r\n      {checkShow &&\r\n        <>\r\n          <div className='disiplin-checkbox col-12'>\r\n            <div className='checkbox mr-0'>\r\n              <input\r\n                id={nameCheckBox}\r\n                name={nameCheckBox}\r\n                type={'checkBox'}\r\n                checked={checkBox}\r\n                className='d-none'\r\n                onChange={ChangeCheckBox}\r\n              />\r\n              <label\r\n                className={checkBox ? 'full' : 'empty'}\r\n                htmlFor={nameCheckBox}\r\n              >\r\n                {checkBox ? (\r\n                  <CheckBoxRoundedIcon />\r\n                ) : (\r\n                  <CheckBoxOutlineBlankRoundedIcon />\r\n                )}\r\n                دستگردانی انجام شود\r\n              </label>\r\n            </div>\r\n          </div>\r\n          {!final_disabled &&\r\n            <>\r\n              <div className='col-xl-6 col-lg-6 col-md-6 col-12'>\r\n                <div className='field-form selectBox rtl'>\r\n                  <CreatableSelect\r\n                    onChange={handleChange}\r\n                    value={parentState[name]}\r\n                    isDisabled={final_disabled}\r\n                    options={user_list}\r\n                    placeholder={\r\n                      <label>\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                        دستگردانی\r\n                      </label>\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='submit-form col-12 mb-2'>\r\n                <button\r\n                  className={`continue ${update_dispatch_state === 1 ? 'edit' : ''}`}\r\n                  disabled={disabled}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  {loading === name ? (\r\n                    <Loading className='form-loader' />\r\n                  ) : (\r\n                    <DoneIcon />\r\n                  )}\r\n                  {update_dispatch_state === 1 ? 'ویرایش دستگردانی' : 'دستگردانی'}\r\n                </button>\r\n              </div>\r\n            </>\r\n          }\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default Dispatch\r\n","E:\\bidboland\\src\\tsrNew\\tsr5\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr5\\ButtonsEdit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr5\\API.js",[],"E:\\bidboland\\src\\tsrNew\\tsr3\\ResetState.js",[],"E:\\bidboland\\src\\tsrNew\\tsr3\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr3\\ButtonEdit.js",[],"E:\\bidboland\\src\\library\\ListManeger.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\HeaderForm.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation.js",[],"E:\\bidboland\\src\\table\\PopUpTable.js",[],"E:\\bidboland\\src\\TechnicalArchive\\TableCCS.js",[],"E:\\bidboland\\src\\knowledgeManagement\\Accepted.js",[],"E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\EquipmentManual.js",[],"E:\\bidboland\\src\\knowledgeManagement\\Registered.js",[],"E:\\bidboland\\src\\Customization\\MultiSelectBox.js",["3211"],"import React, { Component } from 'react'\r\nimport ArrowDropDownRoundedIcon from '@material-ui/icons/ArrowDropDownRounded'\r\nimport Cookies from 'js-cookie'\r\nimport ItemMultiSelect from './ItemMultiSelect'\r\nexport default class MultiSelectBox extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      open: true,\r\n      list: [],\r\n      select: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      if (this.props.state[`${this.props.name}_list`]) {\r\n        this.setState({\r\n          list: this.props.state[`${this.props.name}_list`]\r\n        })\r\n      }\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[this.props.name] &&\r\n      !this.refs[this.props.name].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  handleShow = () => {\r\n    const list = Object.keys(this.props.state[this.props.name]).map(item => {\r\n      if (item !== 'selected') {\r\n        return this.props.state[this.props.name][item]\r\n      }\r\n    })\r\n    return list\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='main-multiselectbox'>\r\n        <div\r\n          className='box-multiselectbox'\r\n          onClick={() => this.setState({ open: this.props.name })}\r\n          ref={this.props.name}\r\n        >\r\n          <div className='w-100 d-flex'>\r\n            <label className='box-multiselectbox-label'>\r\n              {this.props.tilte}\r\n              <span className='star'>*</span>\r\n            </label>\r\n            <div className='item-selected row mx-0'>\r\n              {this.state.list.map((item, index) => (\r\n                <span key={index}>{item.label}</span>\r\n              ))}\r\n            </div>\r\n            <div\r\n              className={`icon  d-flex justify-content-center align-items-center ${\r\n                this.state.open === this.props.name ? 'active' : ''\r\n              }`}\r\n            >\r\n              <ArrowDropDownRoundedIcon />\r\n            </div>\r\n          </div>\r\n          {this.state.open === this.props.name && (\r\n            <div className='multiselectbox-box-result'>\r\n              <div className='row mx-0'>\r\n                {this.handleShow().map((data, key) => (\r\n                  <ItemMultiSelect\r\n                    data={data}\r\n                    key={key}\r\n                    _key={key}\r\n                    {...this}\r\n                    handleState={(name, value) =>\r\n                      this.setState({ [name]: value })\r\n                    }\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\tsr3\\API.js",["3212"],"import axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport StaticData from '../../staticData'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport getCustomFormat from '../../getCustomFormat'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  FetchDataAPI = () => {\r\n    let state = this.data.props.state || {}\r\n    let newState = state.tsr3 || {}\r\n    const { handleState } = this.data\r\n    let internal_list = [\r\n      {\r\n        documentNumber: '',\r\n        degreeTitle: '',\r\n        numberPages: '',\r\n        descriptionAttachment: ''\r\n      }\r\n    ]\r\n    // let foreign_list = [\r\n    //   {\r\n    //     documentNumber: '',\r\n    //     degreeTitle: '',\r\n    //     numberPages: '',\r\n    //     descriptionAttachment: '',\r\n    //     AttachementName: [],\r\n    //     Attachement: []\r\n    //   }\r\n    // ]\r\n    let internal_state = newState['internal_attachment'] || []\r\n    // let foreign_state = newState['foreign_attachment'] || []\r\n    let internal = internal_state.length > 0 ? internal_state : internal_list\r\n    // let foreign = foreign_state.length > 0 ? foreign_state : foreign_list\r\n    let review = newState['review_result']\r\n    newState['internal_attachment'] = internal\r\n    // const { handleForeignLink } = this.data.props.API\r\n    // newState['foreign_attachment'] = handleForeignLink(foreign || [])\r\n    newState['review_result'] = handleCheckText(review) ? review : '1'\r\n    newState['Prev_review_result'] = handleCheckText(review) ? review : '1'\r\n    let { result } = this.DescriptionName(newState['review_result'])\r\n    if (handleCheckText(result)) {\r\n      newState[result] = handleString(newState['review_msg'])\r\n    }\r\n    handleState(newState)\r\n  }\r\n  DescriptionName = _review_result => {\r\n    let state = this.data.state\r\n    let { review_result } = state\r\n    let result = ''\r\n    let label = ''\r\n    let final = _review_result || review_result\r\n    switch (final) {\r\n      case '1':\r\n        result = 'review_msg_yes'\r\n        label = 'الزامات و ریسک‌ها'\r\n        break\r\n      case '0':\r\n        result = 'review_msg_no'\r\n        label = 'دلایل عدم تایید'\r\n        break\r\n      default:\r\n        result = ''\r\n        label = ''\r\n        break\r\n    }\r\n    return { result, label }\r\n  }\r\n  handlCreate = id => {\r\n    const { CheckAllow, state, API } = this.data.props\r\n    const { status, page, select } = state\r\n    const { handleSwitchid } = API\r\n    const nameAdmin = `tsr${handleSwitchid(select)}admin_update_allow`\r\n    const notAdmin = state[nameAdmin] ? false : true\r\n    const check = status === 'create' && parseInt(page) === id\r\n    let allow = CheckAllow('fill_allow')\r\n    const result = check && allow && notAdmin\r\n    return result\r\n  }\r\n  handleCheckUpdate = id => {\r\n    let parentState = this.data.props.state || {}\r\n    const { page } = parentState\r\n    const { CheckAllow } = this.data.props\r\n    const Allow = CheckAllow('update_allow')\r\n    const check = id === page\r\n    const result = Allow && check\r\n    return result\r\n  }\r\n  handleDisabledAPIElm = () => {\r\n    const { state } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    const { select } = parentState\r\n    const NameCheckbox = `checkBox_${select}`\r\n    const checkBox = state[NameCheckbox] ? true : false\r\n    const canUpdate = this.handleCheckUpdate(3)\r\n    const canCreate = this.handlCreate(3)\r\n    const check = canUpdate || canCreate\r\n    const result = !check\r\n    return result || checkBox\r\n  }\r\n  handleDisabledAPI = () => {\r\n    const canUpdate = this.handleCheckUpdate(3)\r\n    const canCreate = this.handlCreate(3)\r\n    const check = canUpdate || canCreate\r\n    const result = !check\r\n    return result\r\n  }\r\n  CheckForeign = () => {\r\n    const state = this.data.state || {}\r\n    const foreign_attachment = state.foreign_attachment || []\r\n    let i = 0\r\n    let check = false\r\n    while (i < foreign_attachment.length) {\r\n      let _obj = foreign_attachment[i]\r\n      const { Attachement, AttachementName, degreeTitle } = _obj\r\n      check = Attachement.length > 0 && AttachementName.length > 0\r\n      // handleCheckText(degreeTitle)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  CheckInternal = () => {\r\n    let check = false\r\n    const state = this.data.state || {}\r\n    const internal_attachment = state.internal_attachment || []\r\n    let i = 0\r\n    while (i < internal_attachment.length) {\r\n      let _obj = internal_attachment[i]\r\n      const { degreeTitle, documentNumber } = _obj\r\n      check = handleCheckText(degreeTitle) && handleCheckText(documentNumber)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  handleAddAttachAPI = nameState => {\r\n    const { handleState, state } = this.data\r\n    let obj = {}\r\n    let check = false\r\n    switch (nameState) {\r\n      case 'foreign_attachment':\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n        check = this.CheckForeign()\r\n        break\r\n      case 'internal_attachment':\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n        check = this.CheckInternal()\r\n        break\r\n      default:\r\n        obj = {}\r\n        break\r\n    }\r\n    if (check) {\r\n      const resultState = { [nameState]: [...state[nameState], obj] }\r\n      handleState(resultState)\r\n    } else {\r\n      Notification.notify(Message.text(932), 'error')\r\n    }\r\n  }\r\n  deleteFileListAPI = async (key, num, files, names, parent) => {\r\n    const { handleState } = this.data\r\n    let state = this.data.state\r\n    let _Parent = await state[parent]\r\n    let obj = await _Parent[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await handleState({ [parent]: _Parent })\r\n  }\r\n  handleUploadListAPI = async (e, files, names, parentState) => {\r\n    const { handleState } = this.data\r\n    await e.preventDefault()\r\n    let _files_ = e.target.files\r\n    handleState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < _files_.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(_files_[i])\r\n      await this.GetLinkAPI(\r\n        files,\r\n        _files_[i],\r\n        names,\r\n        _files_.length,\r\n        key,\r\n        i,\r\n        parentState\r\n      )\r\n    }\r\n  }\r\n  GetLinkAPI = (nameState, file, names, length, key, i, parentState) => {\r\n    let { state, handleState } = this.data\r\n\r\n    const { token, tsr_id } = state\r\n    let datareg = new FormData()\r\n    let array = state[parentState][key][nameState],\r\n      arrayName = state[parentState][key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Tsr/Form3/${tsr_id}`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    }).then(async response => {\r\n      if (i + 1 === length) {\r\n        handleState({ loading: '' })\r\n      }\r\n      if (response.status === 200) {\r\n        const { content } = response.data\r\n        await array.push(content)\r\n        await arrayName.push(file.name)\r\n        let _Parent = await state[parentState]\r\n        let obj = await _Parent[key]\r\n        obj[nameState] = await array\r\n        obj[names] = await arrayName\r\n        await handleState({ [parentState]: _Parent })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    })\r\n  }\r\n  handleSearchDocument = value => {\r\n    let { handleState } = this.data\r\n    let url = `${StaticData.domainIp}/detailEng/searchInDocuments?documentNumber=${value}`\r\n    const check = value.length > 9\r\n    const checkText = handleCheckText(value)\r\n    if (check && checkText) {\r\n      handleState({ loading: 'document' })\r\n      this._Request(url)\r\n    } else handleState({ listData: [], loading: '' })\r\n  }\r\n  _Request = url => {\r\n    let { handleState, state } = this.data\r\n    const { token } = state\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        handleState({ loading: '' })\r\n        if (response.status === 200) {\r\n          handleState({ listData: response.data.content, loading: '' })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  handleCC = array => {\r\n    let result = Object.keys(array).map(_data => {\r\n      let obj_data = array[_data] || {}\r\n      const { value } = obj_data\r\n      return value\r\n    })\r\n    return result.join(',')\r\n  }\r\n  handleSubmitAPI = async () => {\r\n    let url = `${StaticData.domainIp}/tsr_v1/tsr3Insert`\r\n    let state = this.data.state || {}\r\n    let { handleState } = this.data\r\n    const { handleCheckSigned } = this.data.props.API\r\n    let {\r\n      review_result,\r\n      tsr_id,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      // supervisor_verify,\r\n      notification_cc,\r\n      supervisor_select,\r\n      energy_manager_select,\r\n      process_boss_select,\r\n      suggest_time,\r\n      token\r\n    } = state\r\n    const checkSign =\r\n      handleCheckSigned(supervisor_select) &&\r\n      handleCheckSigned(energy_manager_select) &&\r\n      handleCheckSigned(process_boss_select)\r\n    let { result } = this.DescriptionName()\r\n    let checkDesc = review_result === '0' || review_result === '1'\r\n    let valueDescCheck = checkDesc ? handleCheckText(state[result]) : true\r\n    const checkFinal = valueDescCheck && checkSign\r\n    if (checkFinal) {\r\n      handleState({ loading: 'submit', disabled: true })\r\n      let { value } = supervisor_select\r\n      const cc = this.handleCC(notification_cc || [])\r\n      let time = getCustomFormat(suggest_time)\r\n      let valueDesc = checkDesc ? handleString(state[result]) : ''\r\n      const datareg = new FormData()\r\n      await datareg.append('tsr_id', tsr_id)\r\n      await datareg.append('review_result', review_result)\r\n      await datareg.append('review_msg', valueDesc)\r\n      await datareg.append('suggest_time', time)\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await datareg.append('supervisor_verify_by', value)\r\n      await datareg.append('notification_cc', cc)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleEditAPI = async () => {\r\n    let url = `${StaticData.domainIp}/tsr_v1/tsr3Update`\r\n    let state = this.data.state || {}\r\n    let { handleState } = this.data\r\n    let {\r\n      tsr_id,\r\n      review_result,\r\n      // review_msg,\r\n      suggest_time,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      token\r\n    } = state\r\n    let { result } = this.DescriptionName()\r\n    let checkDesc = review_result === '0' || review_result === '1'\r\n    let valueDescCheck = checkDesc ? handleCheckText(state[result]) : true\r\n    if (valueDescCheck) {\r\n      let time = await getCustomFormat(suggest_time)\r\n      let valueDesc = checkDesc ? handleString(state[result]) : ''\r\n      await handleState({ loading: 'submit', disabled: true })\r\n      const datareg = new FormData()\r\n      await datareg.append('tsr_id', tsr_id)\r\n      await datareg.append('review_result', review_result)\r\n      await datareg.append('review_msg', valueDesc)\r\n      await datareg.append('suggest_time', time)\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  ShowSign = () => {\r\n    let { handleDisabledElm } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let { status, level, select, edit } = parentState\r\n    let state1 = edit === '0'\r\n    let state2 = status === 'sign' || status === 'reject'\r\n    level = level || 0\r\n    select = select || 0\r\n    let check1 = level >= select\r\n    let check2 = handleDisabledElm()\r\n    let resultCheck = check1 && check2\r\n    let resultState = state1 && state2\r\n    const check = resultCheck || resultState\r\n    return check\r\n  }\r\n  handleReviewAPI = (e, data) => {\r\n    const parentState = this.data.props.state || {}\r\n    const { Prev_review_result } = this.data.state\r\n    const { edit_admin } = parentState\r\n    const checkAdmin = edit_admin === '1'\r\n    let stateAdmin = false\r\n    if (Prev_review_result === '1' || Prev_review_result === '2') {\r\n      stateAdmin = data.value !== '0'\r\n    } else if (Prev_review_result === '0') {\r\n      stateAdmin = false\r\n    }\r\n    const check = checkAdmin ? stateAdmin : true\r\n    if (check) {\r\n      let { handleState } = this.data\r\n      let { name } = e.target\r\n      let { value } = data\r\n      handleState({ [name]: value, review_msg_yes: '', review_msg_no: '' })\r\n    }\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\tsrNew\\TSR6\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\API.js",[],"E:\\bidboland\\src\\tsrNew\\TSR12\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\note\\head.js",[],"E:\\bidboland\\src\\tsrNew\\TSR12\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\API.js",[],"E:\\bidboland\\src\\tsrNew\\note\\HOC.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\ResetState.js",["3213"],"class ResetState {\r\n  handleSwtich = name => {\r\n    let object = this.ManageState(name) || {}\r\n    return object\r\n  }\r\n  ManageState = name => {\r\n    switch (name) {\r\n      case 'electrical':\r\n        return {\r\n          electrical_export_date: null,\r\n          electrical_instruction_description: '',\r\n          electrical_execution_date: null,\r\n          electrical_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          electrical_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          electrical_purchase_request: [\r\n            {\r\n              number: '',\r\n              description: '',\r\n              date: null\r\n            }\r\n          ],\r\n          electrical_notification_cc: []\r\n        }\r\n      case 'mechanical':\r\n        return {\r\n          mechanical_export_date: null,\r\n          mechanical_instruction_description: '',\r\n          mechanical_execution_date: null,\r\n          mechanical_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          mechanical_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          mechanical_purchase_request: [\r\n            {\r\n              number: '',\r\n              description: '',\r\n              date: null\r\n            }\r\n          ],\r\n          mechanical_notification_cc: []\r\n        }\r\n      case 'protection':\r\n        return {\r\n          protection_export_date: null,\r\n          protection_instruction_description: '',\r\n          protection_execution_date: null,\r\n          protection_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          protection_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          protection_purchase_request: [\r\n            {\r\n              number: '',\r\n              description: '',\r\n              date: null\r\n            }\r\n          ],\r\n          protection_notification_cc: []\r\n        }\r\n      case 'welding':\r\n        return {\r\n          welding_export_date: null,\r\n          welding_instruction_description: '',\r\n          welding_execution_date: null,\r\n          welding_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          welding_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          welding_purchase_request: [\r\n            {\r\n              number: '',\r\n              description: '',\r\n              date: null\r\n            }\r\n          ],\r\n          welding_notification_cc: []\r\n        }\r\n    }\r\n  }\r\n}\r\nexport default ResetState\r\n","E:\\bidboland\\src\\tsrNew\\TSR12\\API.js",["3214"],"import handleString from '../../handleString'\r\n// import ManageDocument from \"./ManageDocument\"\r\n// import StaticList from \"./StaticList\"\r\nimport StaticData from '../../staticData'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport axios from 'axios'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport getCustomFormat from '../../getCustomFormat'\r\n// import Offices from \"./Offices\"\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  handleEF = newState => {\r\n    let result = 'true'\r\n    const effective = newState['effective']\r\n    if (effective === '0') result = 'false'\r\n    return {\r\n      effective: result\r\n    }\r\n  }\r\n  fetchDataAPI = () => {\r\n    const parentState = this.data.props.state || {}\r\n    const newState = parentState.tsr12 || {}\r\n    const { handleState } = this.data\r\n    let obj2 = this.handleEF(newState)\r\n    const merge = { ...newState, ...obj2 }\r\n    handleState(merge)\r\n  }\r\n  handleDefaultResult = (e, data) => {\r\n    const { handleState } = this.data\r\n    let { name } = e.target\r\n    let { value } = data\r\n    handleState({\r\n      [name]: value,\r\n      effective_type: '',\r\n      suggested_ways: ''\r\n    })\r\n  }\r\n  handleListFormAPI = () => {\r\n    const { state } = this.data\r\n    const { effective } = state\r\n    let data = [\r\n      {\r\n        value: 'end_work_date',\r\n        name: 'تاریخ صورتجلسه تائید پایان کار',\r\n        rtl: true,\r\n        require: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        date: true,\r\n        objectSetState: true\r\n      },\r\n      {\r\n        value: 'operation_start_date',\r\n        name: 'تاريخ شروع بهره برداري:',\r\n        rtl: true,\r\n        require: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        date: true,\r\n        objectSetState: true\r\n      },\r\n      {\r\n        value: `effective`,\r\n        radio: true,\r\n        label: 'آيا TSR اثر بخش بوده است؟',\r\n        items: [\r\n          {\r\n            value: 'true',\r\n            label: 'مورد تایید است'\r\n          },\r\n\r\n          {\r\n            value: 'false',\r\n            label: 'مورد تایید نیست.'\r\n          }\r\n        ],\r\n        rtl: true,\r\n        require: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        onchange: (e, data) => this.handleDefaultResult(e, data)\r\n      },\r\n      {\r\n        access: effective === 'true',\r\n        value: `effective_type`,\r\n        name: 'نوع اثر بخشی',\r\n        rtl: true,\r\n        textArea: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        require: true\r\n      },\r\n      {\r\n        access: true,\r\n        value: `description`,\r\n        name: 'توضیحات',\r\n        rtl: true,\r\n        textArea: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        require: false\r\n      },\r\n      {\r\n        access: effective === 'false',\r\n        value: `suggested_ways`,\r\n        name: 'راهکارهای پیشنهادی',\r\n        rtl: true,\r\n        textArea: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        require: true\r\n      },\r\n      {\r\n        value: 'new_tsr_no',\r\n        name: 'شماره TSR جدید',\r\n        rtl: true,\r\n        require: false,\r\n        disabled: this.handleDisabledAPIElm()\r\n      }\r\n    ]\r\n    return data\r\n  }\r\n  handleChangeList = (state_name, name, value, key) => {\r\n    const { state, handleState } = this.data\r\n    let list = state[state_name] || []\r\n    const obj = list[key] || {}\r\n    obj[name] = value\r\n    handleState({\r\n      [state_name]: list\r\n    })\r\n  }\r\n  handleUploadListAPI = async (e, files, names, parentState) => {\r\n    const { handleState } = this.data\r\n    await e.preventDefault()\r\n    let _files_ = e.target.files\r\n    handleState({ loading: `${files}_${parentState}` })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < _files_.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(_files_[i])\r\n      await this.GetLinkAPI(\r\n        files,\r\n        _files_[i],\r\n        names,\r\n        // _files_.length,\r\n        key,\r\n        i,\r\n        parentState\r\n      )\r\n    }\r\n  }\r\n  GetLinkAPI = (nameState, file, names, key, i, parentState) => {\r\n    let { state, handleState } = this.data\r\n\r\n    const { token, tsr_id } = state\r\n    let datareg = new FormData()\r\n    const list = state[parentState] || []\r\n    const obj = list[key] || {}\r\n    let array = obj[nameState] || [],\r\n      arrayName = obj[names] || []\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Tsr/Form12/${tsr_id}`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    }).then(async response => {\r\n      if (i === key) {\r\n        handleState({ loading: '' })\r\n      }\r\n      if (response.status === 200) {\r\n        const { content } = response.data\r\n        await array.push(content)\r\n        await arrayName.push(file.name)\r\n        let _Parent = await state[parentState]\r\n        let obj = await _Parent[key]\r\n        obj[nameState] = await array\r\n        obj[names] = await arrayName\r\n        await handleState({ [parentState]: _Parent })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    })\r\n  }\r\n  deleteFileListAPI = async (key, num, files, names, parent) => {\r\n    const { handleState } = this.data\r\n    let state = this.data.state\r\n    let _Parent = await state[parent]\r\n    let obj = await _Parent[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    if (data1.length === 0 && data2.length === 0) {\r\n      let obj_2 = await {\r\n        documentNumber: '',\r\n        title: '',\r\n        editNumber: '',\r\n        attachment: [],\r\n        attachmentName: []\r\n      }\r\n      _Parent[key] = await obj_2\r\n    }\r\n    await handleState({ [parent]: _Parent })\r\n  }\r\n  handleDelete = (name, key) => {\r\n    const { handleState, state } = this.data\r\n    const list = state[name] || []\r\n    list.splice(key, 1)\r\n    handleState({\r\n      [name]: list\r\n    })\r\n  }\r\n  handleCheckfileList = name => {\r\n    const { state } = this.data\r\n    let list = state[name] || []\r\n    let length = list.length\r\n    let prev = length - 1\r\n    let obj_prev = list[prev] || {}\r\n    const attachment = obj_prev.attachment || []\r\n    const attachmentName = obj_prev.attachmentName || []\r\n    const { documentNumber, title, editNumber } = obj_prev\r\n    let state1 = attachment.length > 0 && attachmentName.length > 0\r\n    let state2 =\r\n      handleCheckText(documentNumber) &&\r\n      handleCheckText(title) &&\r\n      handleCheckText(editNumber)\r\n    const result = state1 && state2\r\n    return result\r\n  }\r\n  handleCheckOfficeList = name => {\r\n    const { state } = this.data\r\n    let list = state[name] || []\r\n    let length = list.length\r\n    let prev = length - 1\r\n    let obj_prev = list[prev] || {}\r\n    const { officeName, number } = obj_prev\r\n    const result = handleCheckText(officeName) && handleCheckText(number)\r\n    return result\r\n  }\r\n  handleAdd = name => {\r\n    const { state, handleState } = this.data\r\n    let list = state[name] || []\r\n    let obj1 = { officeName: '', number: '' }\r\n    let obj2 = {\r\n      documentNumber: '',\r\n      title: '',\r\n      editNumber: '',\r\n      attachment: [],\r\n      attachmentName: []\r\n    }\r\n    let obj = name === 'documents_distribution' ? obj1 : obj2\r\n    let check = false\r\n    switch (name) {\r\n      case 'new_document_attachment':\r\n        check = this.handleCheckfileList(name)\r\n        break\r\n      case 'edited_document_attachment':\r\n        check = this.handleCheckfileList(name)\r\n        break\r\n      case 'documents_distribution':\r\n        check = this.handleCheckOfficeList(name)\r\n        break\r\n      default:\r\n        check = false\r\n        break\r\n    }\r\n    if (check) {\r\n      list.push(obj)\r\n      handleState({\r\n        [name]: list\r\n      })\r\n    } else {\r\n      Notification.notify(Message.text(908), 'error')\r\n    }\r\n  }\r\n  handlCreate = id => {\r\n    const { CheckAllow, state, API } = this.data.props\r\n    const { status, page, select } = state\r\n    const { handleSwitchid } = API\r\n    const nameAdmin = `tsr${handleSwitchid(select)}admin_update_allow`\r\n    const notAdmin = state[nameAdmin] ? false : true\r\n    const check = status === 'create' && page == id\r\n    let allow = CheckAllow('fill_allow')\r\n    const result = check && allow && notAdmin\r\n    return result\r\n  }\r\n  handleCheckUpdate = id => {\r\n    let parentState = this.data.props.state || {}\r\n    const { page } = parentState\r\n    const { CheckAllow } = this.data.props\r\n    const Allow = CheckAllow('update_allow')\r\n    const check = parseInt(page) === id\r\n    const result = Allow && check\r\n    return result\r\n  }\r\n  handleDisabledAPI = () => {\r\n    const canUpdate = this.handleCheckUpdate(12)\r\n    const canCreate = this.handlCreate(12)\r\n    const check = canUpdate || canCreate\r\n    const result = check\r\n    return !result\r\n  }\r\n  handleDisabledAPIElm = () => {\r\n    const { state } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    const { select } = parentState\r\n    const NameCheckbox = `checkBox_${select}`\r\n    const checkBox = state[NameCheckbox] ? true : false\r\n    const canUpdate = this.handleCheckUpdate(12)\r\n    const canCreate = this.handlCreate(12)\r\n    const check = canUpdate || canCreate\r\n    const result = !check\r\n    return result || checkBox\r\n  }\r\n  ShowSign = () => {\r\n    let { handleDisabled } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let { status, level, select, edit } = parentState\r\n    let state1 = edit === '0'\r\n    let state2 = status === 'sign' || status === 'reject'\r\n    level = level || 0\r\n    select = select || 0\r\n    let check1 = level >= select\r\n    let check2 = handleDisabled()\r\n    let resultCheck = check1 && check2\r\n    let resultState = state1 && state2\r\n    const check = resultCheck || resultState\r\n    return check\r\n  }\r\n  handleCC = array => {\r\n    const result = Object.keys(array).map(index => {\r\n      let obj = array[index] || {}\r\n      const { value } = obj\r\n      return value\r\n    })\r\n    return result.join(',')\r\n  }\r\n  handleDataSend = status => {\r\n    const { state } = this.data\r\n    let {\r\n      tsr_id,\r\n      end_work_date,\r\n      operation_start_date,\r\n      effective,\r\n      effective_type,\r\n      description,\r\n      suggested_ways,\r\n      new_tsr_no,\r\n      notification_cc\r\n    } = state\r\n    end_work_date = getCustomFormat(end_work_date)\r\n    operation_start_date = getCustomFormat(operation_start_date)\r\n    const state1 =\r\n      handleCheckText(end_work_date) && handleCheckText(operation_start_date)\r\n    const state2 =\r\n      effective === 'true'\r\n        ? handleCheckText(effective_type)\r\n        : handleCheckText(suggested_ways)\r\n    const check_send = state1 && state2\r\n    let data = {\r\n      tsr_id,\r\n      end_work_date,\r\n      operation_start_date,\r\n      effective,\r\n      effective_type: handleString(effective_type),\r\n      description: handleString(description),\r\n      suggested_ways: handleString(suggested_ways),\r\n      new_tsr_no: handleString(new_tsr_no)\r\n    }\r\n    if (status === 'create') {\r\n      const cc = this.handleCC(notification_cc || [])\r\n      data['notification_cc'] = cc\r\n    }\r\n    return { data_send: data, check_send: check_send }\r\n  }\r\n  handleDataSign = () => {\r\n    const { state } = this.data\r\n    const { handleCheckSigned } = this.data.props.API\r\n    const { office_boss_select, unit_boss_select } = state\r\n    const check =\r\n      handleCheckSigned(office_boss_select) &&\r\n      handleCheckSigned(unit_boss_select)\r\n    let result = {}\r\n    return { check_sign: check, data_sign: result }\r\n  }\r\n  handleSubmitAPI = async (status = '') => {\r\n    let sign = {},\r\n      sign_check = true\r\n    const { state, handleState } = this.data\r\n    const { token } = state\r\n    if (status === 'create') {\r\n      let data2 = this.handleDataSign()\r\n      const { check_sign, data_sign } = data2\r\n      sign = data_sign\r\n      sign_check = check_sign\r\n    }\r\n    let data1 = this.handleDataSend(status)\r\n    const { data_send, check_send } = data1\r\n    let merge_data = { ...data_send, ...sign }\r\n    let merge_check = sign_check && check_send\r\n    if (merge_check) {\r\n      handleState({\r\n        loading: 'submit',\r\n        disabled: true\r\n      })\r\n      const url = `${StaticData.domainIp}/tsr_v1/${status === 'create' ? 'tsr12Insert' : 'tsr12Update'\r\n        }`\r\n      const datareg = new FormData()\r\n      for (let name in merge_data) {\r\n        let value = await merge_data[name]\r\n        await datareg.append(name, value)\r\n      }\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\tsrNew\\TSR8\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\ButtonSubmit.js",[],"E:\\bidboland\\src\\layout\\TableResultPage.js",[],"E:\\bidboland\\src\\WBS\\ProjectIdentify.js",[],"E:\\bidboland\\src\\WBS\\VirtualReality.js",[],"E:\\bidboland\\src\\TechnicalArchive\\API\\StaticList.js",[],"E:\\bidboland\\src\\TechnicalArchive\\API\\APIForm.js",[],"E:\\bidboland\\src\\WBS\\ListEngineeringDocuments.js",[],"E:\\bidboland\\src\\layout\\DetailResultPageTop.js",[],"E:\\bidboland\\src\\WBS\\WorkFailureStructure.js",[],"E:\\bidboland\\src\\dashboard-ppc\\StackedColumnChart100.js",[],"E:\\bidboland\\src\\WBS\\AttachedDocumentsPurchasePackages.js",[],"E:\\bidboland\\src\\WBS\\PurchasePackages.js",[],"E:\\bidboland\\src\\dashboard-ppc\\ClusteredBarChart.js",[],"E:\\bidboland\\src\\dashboard-ppc\\CylinderGauge.js",[],"E:\\bidboland\\src\\dashboard-ppc\\PieOfPie.js",[],"E:\\bidboland\\src\\dashboard-ppc\\LastSituationBox.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\API.js",[],"E:\\bidboland\\src\\dashboard-ppc\\DataGrouping50KPoints.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ResetState.js",["3215"],"class ResetState {\r\n  handleSwtich = name => {\r\n    let obj1 = this.ManageState(name)\r\n    let obj2 = { notification_cc: [] }\r\n    let merge = { ...obj1, ...obj2 }\r\n    return merge\r\n  }\r\n  ManageState = name => {\r\n    switch (name) {\r\n      case 'fixed_mechanical':\r\n        return {\r\n          fixed_mechanical_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          fixed_mechanical_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          fixed_mechanical_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          fixed_mechanical_test_result: false,\r\n          fixed_mechanical_marked_document: false\r\n        }\r\n      case 'rotating_mechanical':\r\n        return {\r\n          rotating_mechanical_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          rotating_mechanical_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          rotating_mechanical_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          rotating_mechanical_test_result: false,\r\n          rotating_mechanical_marked_document: false\r\n        }\r\n      case 'electrical':\r\n        return {\r\n          electrical_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          electrical_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          electrical_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          electrical_test_result: false,\r\n          electrical_marked_document: false\r\n        }\r\n      case 'instrument':\r\n        return {\r\n          instrument_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          instrument_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          instrument_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          instrument_test_result: false,\r\n          instrument_marked_document: false\r\n        }\r\n      case 'sensitive_equipment':\r\n        return {\r\n          sensitive_equipment_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          sensitive_equipment_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          sensitive_equipment_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          sensitive_equipment_test_result: false,\r\n          sensitive_equipment_marked_document: false\r\n        }\r\n      case 'repair_services':\r\n        return {\r\n          repair_services_instruction: [\r\n            {\r\n              group: '',\r\n              instructionNumber: '',\r\n              dateIssuanceInstructions: null,\r\n              wo: '',\r\n              wODate: null,\r\n              startDate: null,\r\n              endDate: null\r\n            }\r\n          ],\r\n          repair_services_foreign_attachment: [\r\n            {\r\n              documentNumber: '',\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: '',\r\n              AttachementName: [],\r\n              Attachement: []\r\n            }\r\n          ],\r\n          repair_services_internal_attachment: [\r\n            {\r\n              documentNumber: null,\r\n              degreeTitle: '',\r\n              numberPages: '',\r\n              descriptionAttachment: ''\r\n            }\r\n          ],\r\n          repair_services_test_result: false,\r\n          repair_services_marked_document: false\r\n        }\r\n    }\r\n  }\r\n}\r\nexport default ResetState\r\n","E:\\bidboland\\src\\tsrNew\\TSR9\\SecondLevel.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\FirstLevel.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\API.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ResponsibleExpert.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\API.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\RejectReasonsItems.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\API.js",["3216"],"import RejectReasons from './RejectReasons'\r\nimport StaticData from '../../staticData'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport handleString from '../../handleString'\r\nimport axios from 'axios'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  ResetIssue = () => {\r\n    const { handleState, state } = this.data\r\n    for (let value in state) {\r\n      if (value.includes('improvement_')) {\r\n        handleState({ [value]: false })\r\n      }\r\n    }\r\n  }\r\n  FetchCreateAPI = () => {\r\n    let state = this.data.props.state || {}\r\n    let {\r\n      //  level,\r\n      // tsr1\r\n      // edit_form\r\n    } = state\r\n    // let page = tsr1.page || '0'\r\n    let { edit } = state\r\n    let newState = state.tsr2 || {}\r\n    // const { handleForeignLink } = this.data.props.API\r\n    let reject_reasons_selected = state.reject_reasons_selected\r\n    let reject_reasons = RejectReasons.list\r\n    let obj = this.RejectReasonsSelected(reject_reasons_selected)\r\n    let merge = { ...newState, ...{ reject_reasons }, ...obj }\r\n    let check_value_ = merge['issued_status']\r\n    merge['issued_status'] = check_value_ === '0' ? false : true\r\n    merge['canchangeDescription'] = edit === '1' ? false : check_value_ === '1'\r\n    // const chekCantRes =\r\n    //   parseInt(page) !== level && edit_form === '21' && edit === '1'\r\n    // merge['chekCantRes'] = chekCantRes\r\n    const checkRes = merge.responsible || []\r\n    let objRes = { user_unit: '', value: '', user_role: '' }\r\n    let res = checkRes.length > 0 ? checkRes : [objRes]\r\n    merge['responsible'] = res\r\n    // const { foreign_attachments } = merge\r\n    // merge['foreign_attachments'] = handleForeignLink(foreign_attachments || [])\r\n    const { handleState } = this.data\r\n    handleState(merge)\r\n  }\r\n  RejectReasonsSelected = data => {\r\n    let text = handleString(data)\r\n    let result = {}\r\n    let list = text.split(',')\r\n    list.forEach(value => {\r\n      if (handleCheckText(value)) {\r\n        let textTrim = value.trim()\r\n        if (textTrim === 'other') {\r\n          result['other'] = true\r\n        } else {\r\n          let finalValue = `improvement_${textTrim}`\r\n          result[finalValue] = true\r\n        }\r\n      }\r\n    })\r\n    return result\r\n  }\r\n  handleSwitchPermission = () => {\r\n    const {\r\n      general_boss_fill_allow,\r\n      tab,\r\n      process_boss_fill_allow,\r\n      inspection_boss_fill_allow\r\n    } = this.data.state\r\n    let result = false\r\n    switch (tab) {\r\n      case 1:\r\n        result = general_boss_fill_allow ? true : false\r\n        break\r\n      case 2:\r\n        result = process_boss_fill_allow ? true : false\r\n        break\r\n      case 3:\r\n        result = inspection_boss_fill_allow ? true : false\r\n        break\r\n      default:\r\n        result = true\r\n        break\r\n    }\r\n    return result\r\n  }\r\n  Split = () => {\r\n    const { state } = this.data\r\n    const { tab } = state\r\n    const parentState = this.data.props.state || {}\r\n    const status = handleString(parentState.status)\r\n    const arrayStatus = status.split('_')\r\n    const finalStatus = arrayStatus[tab - 1] || 'show'\r\n    return finalStatus\r\n  }\r\n  SwitchNamePermission = () => {\r\n    let state = this.data.state || {}\r\n    let { tab } = state\r\n    let obj\r\n    switch (tab) {\r\n      case 1:\r\n        obj = {\r\n          create: 'general_boss_fill_allow',\r\n          update: 'general_boss_update_allow'\r\n        }\r\n        break\r\n      case 2:\r\n        obj = {\r\n          create: 'process_boss_fill_allow',\r\n          update: 'process_boss_update_allow'\r\n        }\r\n        break\r\n      case 3:\r\n        obj = {\r\n          create: 'inspection_boss_fill_allow',\r\n          update: 'inspection_boss_update_allow'\r\n        }\r\n        break\r\n      default:\r\n        obj = {}\r\n        break\r\n    }\r\n    return obj\r\n  }\r\n  handleCheckUpdate = (id) => {\r\n    let parentState = this.data.props.state || {}\r\n    const { page } = parentState\r\n    const { CheckAllow } = this.data.props\r\n    let { update } = this.SwitchNamePermission()\r\n    const Allow = CheckAllow(update)\r\n    const check1 = parseInt(page) === id\r\n    const result = Allow && check1\r\n    return result\r\n  }\r\n  handlCreate = id => {\r\n    const firstPermission = this.handleSwitchPermission()\r\n    const { CheckAllow, state, API } = this.data.props\r\n    const { handleSwitchid } = API\r\n    const { page, select } = state\r\n    const nameAdmin = `tsr${handleSwitchid(select)}admin_update_allow`\r\n    const notAdmin = state[nameAdmin] ? false : true\r\n    const status = this.Split()\r\n    const check = status === 'create' && parseInt(page) === id\r\n    let { create } = this.SwitchNamePermission()\r\n    const Allow = CheckAllow(create)\r\n    const result = firstPermission && check && Allow && notAdmin\r\n    return result\r\n  }\r\n  handleDisabledAPI = () => {\r\n    const canUpdate = this.handleCheckUpdate(2)\r\n    const canCreate = this.handlCreate(2)\r\n    const check = canUpdate || canCreate\r\n    const result = check\r\n    return !result\r\n  }\r\n  handleUrlAPI = () => {\r\n    const { tab } = this.data.state\r\n    let url = ''\r\n    switch (tab) {\r\n      case 1:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Insert/generalBoss`\r\n        this.handleSubmit1(url)\r\n        break\r\n      case 2:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Insert/processBoss`\r\n        this.handleSubmit2(url)\r\n        break\r\n      case 3:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Insert/inspectionBoss`\r\n        this.handleSubmit2(url)\r\n        break\r\n      default:\r\n        url = ''\r\n        break\r\n    }\r\n    return url\r\n  }\r\n  DescriptionName = () => {\r\n    const { tab } = this.data.state\r\n    let name = ''\r\n    switch (tab) {\r\n      case 1:\r\n        name = 'general_boss_description'\r\n        break\r\n      case 2:\r\n        name = 'process_boss_description'\r\n        break\r\n      case 3:\r\n        name = 'inspection_boss_description'\r\n        break\r\n      default:\r\n        name = ''\r\n        break\r\n    }\r\n    return name\r\n  }\r\n  CheckReasons = () => {\r\n    let list = [],\r\n      state = this.data.state || {}\r\n    const { other } = state\r\n    if (other) {\r\n      list = ['other']\r\n    } else {\r\n      for (let value in state) {\r\n        if (value.includes('improvement_')) {\r\n          if (state[value]) {\r\n            let finalValue = value.replace('improvement_', '')\r\n            list.push(finalValue.trim())\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return list\r\n  }\r\n  CheckResponsible = responsible => {\r\n    let check = false,\r\n      list = responsible || [],\r\n      i = 0\r\n    while (i < list.length) {\r\n      let _obj = list[i]\r\n      const { user_role, user_unit, value } = _obj\r\n      check =\r\n        handleCheckText(user_role) &&\r\n        handleCheckText(user_unit) &&\r\n        handleCheckText(value)\r\n\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  handleSubmit1 = async url => {\r\n    const {\r\n      tsr_id,\r\n      issued_status,\r\n      general_boss_description,\r\n      responsible,\r\n      token\r\n    } = this.data.state\r\n    const { handleState } = this.data\r\n    const listReasons = this.CheckReasons()\r\n    const checkReasons = issued_status ? true : listReasons.length > 0\r\n    const checkRes = issued_status ? this.CheckResponsible(responsible) : true\r\n    const checkId = handleCheckText(tsr_id)\r\n    const finalCheck = checkReasons && checkRes && checkId\r\n    if (finalCheck) {\r\n      handleState({ loading: 'submit', disabled: true })\r\n      const datareg = new FormData()\r\n      datareg.append('tsr_id', tsr_id)\r\n      datareg.append('issued_status', issued_status ? 'true' : 'false')\r\n      datareg.append('reject_reasons', listReasons.join(' , '))\r\n      datareg.append(\r\n        'general_boss_description',\r\n        handleString(general_boss_description)\r\n      )\r\n      datareg.append(\r\n        'responsible',\r\n        issued_status ? JSON.stringify(responsible) : []\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleSubmit2 = async url => {\r\n    const state = (await this.data.state) || {}\r\n    const { tsr_id, token } = await state\r\n    const nameValue = this.DescriptionName()\r\n    const text = handleString(state[nameValue])\r\n    const datareg = await new FormData()\r\n    const check = handleCheckText(tsr_id) && handleCheckText(nameValue)\r\n    const { handleState } = await this.data\r\n    if (check) {\r\n      await datareg.append('tsr_id', tsr_id)\r\n      await datareg.append(nameValue, text)\r\n      await handleState({ loading: 'submit', disabled: true })\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              handleState({ redirect: false, disabled: false })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleUrlEditAPI = () => {\r\n    const { tab } = this.data.state\r\n    let url = ''\r\n    switch (tab) {\r\n      case 1:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Update/generalBoss`\r\n        this.handleSubmit1(url)\r\n        break\r\n      case 2:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Update/processBoss`\r\n        this.handleSubmit2(url)\r\n        break\r\n      case 3:\r\n        url = `${StaticData.domainIp}/tsr_v1/tsr2Update/inspectionBoss`\r\n        this.handleSubmit2(url)\r\n        break\r\n      default:\r\n        url = ''\r\n        break\r\n    }\r\n    return url\r\n  }\r\n  ShowSign = () => {\r\n    let { handleDisabledElm } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let { level, select, edit } = parentState\r\n    const status = this.Split()\r\n    let state1 = edit === '0'\r\n    let state2 = status === 'sign' || status === 'reject'\r\n    level = level || 0\r\n    select = select || 0\r\n    let check1 = level >= select\r\n    let check2 = handleDisabledElm()\r\n    let resultCheck = check1 && check2\r\n    let resultState = state1 && state2\r\n    const check = resultCheck || resultState\r\n    return check\r\n  }\r\n  handleOtherCheck = () => {\r\n    this.ResetIssue()\r\n    const { handleState, state } = this.data\r\n    const { other } = state\r\n    handleState({\r\n      other: !other\r\n    })\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\tsrNew\\TSR10\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\ListProblems.js",[],"E:\\bidboland\\src\\tsrNew\\Dispatch\\History.js",[],"E:\\bidboland\\src\\tsrNew\\Dispatch\\ShowNameDispacht.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\ResetState.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\Building.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\Instrument.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\Electrical.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\API.js",["3217"],"import ListTab from './ListTab'\r\nimport Foreign from '../ShowTsr/Foreign'\r\nimport Internal from '../ShowTsr/Internal'\r\nimport handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport axios from 'axios'\r\nimport Notification from '../../notification/notification'\r\nimport Message from '../../notification/Message'\r\nimport StaticData from '../../staticData'\r\nimport StaticList from './StaticList'\r\nimport getCustomFormat from '../../getCustomFormat'\r\nclass API {\r\n  constructor(props) {\r\n    this.data = props\r\n  }\r\n  handleCheckList = data => {\r\n    let nameArray = StaticList.List\r\n    let object = {}\r\n    // const { handleForeignLink } = this.data.props.API\r\n    nameArray.forEach(value => {\r\n      let defaultList = data[value] || []\r\n      let fixed = StaticList[value]\r\n      let resukt_list = defaultList.length > 0 ? defaultList : fixed\r\n      // if (value.includes('foreign_attachment')) resukt_list = handleForeignLink(resukt_list)\r\n      object[value] = resukt_list\r\n    })\r\n    return object\r\n  }\r\n  finallCheck = data => {\r\n    let state = this.data.state\r\n    let list = ListTab.List || []\r\n    let result = {}\r\n    list.forEach(_item => {\r\n      let { value } = _item\r\n      let nameText = `${value}_instruction`,\r\n        text = data[nameText],\r\n        nameDate = `${value}_time_execution`,\r\n        date = data[nameDate],\r\n        nameCC = `${value}_notification_cc`,\r\n        CC = state[nameCC] || null\r\n      result[nameText] = text\r\n      result[nameDate] = date\r\n      result[nameCC] = CC\r\n    })\r\n    return result\r\n  }\r\n  fetchDataAPI = () => {\r\n    const { handleState } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let newState = parentState.tsr7 || {}\r\n    let _obj = this.handleCheckList(newState)\r\n    let object = this.finallCheck(newState)\r\n    let merge = { ...newState, ..._obj, ...object }\r\n    handleState(merge)\r\n  }\r\n  Split = () => {\r\n    const { state } = this.data\r\n    const { tab } = state\r\n    const parentState = this.data.props.state || {}\r\n    const status = handleString(parentState.status)\r\n    const arrayStatus = status.split('_')\r\n    let currenttab = tab - 1\r\n    const finalStatus = arrayStatus[currenttab] ? arrayStatus[currenttab] : ''\r\n    return finalStatus\r\n  }\r\n  handleSwitchName = () => {\r\n    let _list = ListTab.List || []\r\n    let { tab } = this.data.state\r\n    let filter = Object.keys(_list).map(_data => {\r\n      let _obj = _list[_data]\r\n      return _obj.value\r\n    })\r\n    let value = filter[tab - 1] ? filter[tab - 1] : ''\r\n    let result = value\r\n    return result\r\n  }\r\n  SwitchNamePermission = () => {\r\n    let state = this.data.state || {}\r\n    let { tab } = state\r\n    let obj\r\n    switch (tab) {\r\n      case 1:\r\n        obj = {\r\n          create: 'mechanical_fill_allow',\r\n          update: 'mechanical_update_allow'\r\n        }\r\n        break\r\n      case 2:\r\n        obj = {\r\n          create: 'electrical_fill_allow',\r\n          update: 'electrical_update_allow'\r\n        }\r\n        break\r\n      case 3:\r\n        obj = {\r\n          create: 'instrument_fill_allow',\r\n          update: 'instrument_update_allow'\r\n        }\r\n        break\r\n      case 4:\r\n        obj = {\r\n          create: 'building_fill_allow',\r\n          update: 'building_update_allow'\r\n        }\r\n        break\r\n      default:\r\n        obj = {}\r\n        break\r\n    }\r\n    return obj\r\n  }\r\n  handleCheckUpdate = id => {\r\n    let parentState = this.data.props.state || {}\r\n    const { page } = parentState\r\n    const { CheckAllow } = this.data.props\r\n    let { update } = this.SwitchNamePermission()\r\n    const Allow = CheckAllow(update)\r\n    const check1 = parseInt(page) === id\r\n    const result = Allow && check1\r\n    return result\r\n  }\r\n  handlCreate = id => {\r\n    const { CheckAllow, state , API } = this.data.props\r\n    let check = false\r\n    const {handleSwitchid}  =API\r\n    const { page , select} = state\r\n    if (page >= id) check = true\r\n    else check = false\r\n    const nameAdmin = `tsr${handleSwitchid(select)}admin_update_allow`\r\n    const notAdmin = state[nameAdmin] ? false : true\r\n    let { create } = this.SwitchNamePermission()\r\n    const Allow = CheckAllow(create)\r\n    const result = check && Allow && notAdmin\r\n    return result\r\n  }\r\n  handleDisabledAPI = () => {\r\n    const canUpdate = this.handleCheckUpdate(7)\r\n    const canCreate = this.handlCreate(7)\r\n    const check = canUpdate || canCreate\r\n    const result = check\r\n    return !result\r\n  }\r\n  handleDisabledAPIElm = () => {\r\n    let name = this.handleSwitchName()\r\n    const { state } = this.data\r\n    const { tab } = state\r\n    let parentState = this.data.props.state || {}\r\n    const { select } = parentState\r\n    const NameCheckbox = `checkBox_${select}${tab}_${name}`\r\n    const checkBox = state[NameCheckbox] ? true : false\r\n    const canUpdate = this.handleCheckUpdate(7)\r\n    const canCreate = this.handlCreate(7)\r\n    const check = canUpdate || canCreate\r\n    const result = !check\r\n    return result || checkBox\r\n  }\r\n  CheckForeign = nameState => {\r\n    const state = this.data.state || {}\r\n    const foreign_attachment = state[nameState] || []\r\n    let i = 0\r\n    let check = false\r\n    while (i < foreign_attachment.length) {\r\n      let _obj = foreign_attachment[i]\r\n      const { Attachement, AttachementName, degreeTitle } = _obj\r\n      check = Attachement.length > 0 && AttachementName.length > 0\r\n      // handleCheckText(degreeTitle)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  CheckInternal = nameState => {\r\n    let check = false\r\n    const state = this.data.state || {}\r\n    const internal_attachment = state[nameState] || []\r\n    let i = 0\r\n    while (i < internal_attachment.length) {\r\n      let _obj = internal_attachment[i]\r\n      const { degreeTitle, documentNumber } = _obj\r\n      check = handleCheckText(degreeTitle) && handleCheckText(documentNumber)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  deleteFileListAPI = async (key, num, files, names, parent) => {\r\n    const { handleState } = this.data\r\n    let state = this.data.state\r\n    let _Parent = await state[parent]\r\n    let obj = await _Parent[key]\r\n    let data1 = await obj[files]\r\n    let data2 = await obj[names]\r\n    await data1.splice(num, 1)\r\n    await data2.splice(num, 1)\r\n    await handleState({ [parent]: _Parent })\r\n  }\r\n  handleUploadListAPI = async (e, files, names, parentState) => {\r\n    const { handleState } = this.data\r\n    await e.preventDefault()\r\n    let _files_ = e.target.files\r\n    handleState({ loading: files })\r\n    names = await names.split('_')[0]\r\n    let key = await parseInt(files.split('_')[1])\r\n    files = await files.split('_')[0]\r\n    for (let i = 0; i < _files_.length; i++) {\r\n      let reader = await new FileReader()\r\n      await reader.readAsDataURL(_files_[i])\r\n      await this.GetLinkAPI(\r\n        files,\r\n        _files_[i],\r\n        names,\r\n        _files_.length,\r\n        key,\r\n        i,\r\n        parentState\r\n      )\r\n    }\r\n  }\r\n  GetLinkAPI = (nameState, file, names, length, key, i, parentState) => {\r\n    let { state, handleState } = this.data\r\n\r\n    const { token, tsr_id } = state\r\n    let datareg = new FormData()\r\n    let array = state[parentState][key][nameState],\r\n      arrayName = state[parentState][key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Tsr/Form7/${tsr_id}`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    }).then(async response => {\r\n      if (i + 1 === length) {\r\n        handleState({ loading: '' })\r\n      }\r\n      if (response.status === 200) {\r\n        const { content } = response.data\r\n        await array.push(content)\r\n        await arrayName.push(file.name)\r\n        let _Parent = await state[parentState]\r\n        let obj = await _Parent[key]\r\n        obj[nameState] = await array\r\n        obj[names] = await arrayName\r\n        await handleState({ [parentState]: _Parent })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    })\r\n  }\r\n  handleAddAttachAPI = nameState => {\r\n    const { handleState, state } = this.data\r\n    let obj = {}\r\n    let check = false\r\n    let name = this.handleSwitchName()\r\n    switch (nameState) {\r\n      case `${name}_foreign_attachment`:\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n        check = this.CheckForeign(nameState)\r\n        break\r\n      case `${name}_internal_attachment`:\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n        check = this.CheckInternal(nameState)\r\n        break\r\n      default:\r\n        obj = {}\r\n        break\r\n    }\r\n    if (check) {\r\n      const resultState = { [nameState]: [...state[nameState], obj] }\r\n      handleState(resultState)\r\n    } else {\r\n      Notification.notify(Message.text(932), 'error')\r\n    }\r\n  }\r\n  handleListFormAPI = () => {\r\n    let name = this.handleSwitchName()\r\n    let data = [\r\n      {\r\n        label: 'دستور کار',\r\n        access: true,\r\n        value: `${name}_instruction`,\r\n        name: 'شرح دستور العمل',\r\n        rtl: true,\r\n        textArea: true,\r\n        disabled: this.handleDisabledAPIElm(),\r\n        require: true\r\n      },\r\n      {\r\n        value: `${name}_time_execution`,\r\n        name: 'زمان اجرا',\r\n        date: true,\r\n        rtl: true,\r\n        objectSetState: true,\r\n        isGregorian: false,\r\n        disabled: this.handleDisabledAPIElm()\r\n      },\r\n      {\r\n        class: true,\r\n        html: () => (\r\n          <Foreign\r\n            {...this.data}\r\n            notRequire={true}\r\n            name={`${name}_foreign_attachment`}\r\n            check_disabled={this.handleDisabledAPIElm()}\r\n          />\r\n        ),\r\n        access: true\r\n      },\r\n      {\r\n        class: true,\r\n        html: () => (\r\n          <Internal\r\n            {...this.data}\r\n            name={`${name}_internal_attachment`}\r\n            check_disabled={this.handleDisabledAPIElm()}\r\n          />\r\n        ),\r\n        access: true\r\n      }\r\n    ]\r\n    return data\r\n  }\r\n  handleSearchDocument = value => {\r\n    let { handleState } = this.data\r\n    let url = `${StaticData.domainIp}/detailEng/searchInDocuments?documentNumber=${value}`\r\n    const check = value.length > 9\r\n    const checkText = handleCheckText(value)\r\n    if (check && checkText) {\r\n      handleState({ loading: 'document' })\r\n      this._Request(url)\r\n    } else handleState({ listData: [], loading: '' })\r\n  }\r\n  _Request = url => {\r\n    let { handleState, state } = this.data\r\n    const { token } = state\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        handleState({ loading: '' })\r\n        if (response.status === 200) {\r\n          handleState({ listData: response.data.content, loading: '' })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        handleState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  ShowSign = () => {\r\n    let { handleDisabledElm } = this.data\r\n    let parentState = this.data.props.state || {}\r\n    let { edit, level, select } = parentState\r\n    let status = this.Split()\r\n    let state1 = edit === '0'\r\n    let state2 = status === 'sign' || status === 'reject'\r\n    level = level || 0\r\n    select = select || 0\r\n    let check1 = level >= select\r\n    let check2 = handleDisabledElm()\r\n    let resultCheck = check1 && check2\r\n    let resultState = state1 && state2\r\n    const check = resultCheck || resultState\r\n    return check\r\n  }\r\n  handleCC = cc => {\r\n    let list = cc || []\r\n    let filter = Object.keys(list).map(_data => {\r\n      let _obj = list[_data]\r\n      return _obj.value\r\n    })\r\n    return filter.join(',')\r\n  }\r\n  handleDataSend = status => {\r\n    let name = this.handleSwitchName()\r\n    let { state } = this.data\r\n    let { tsr_id } = state\r\n    const checkText = handleCheckText(state[`${name}_instruction`])\r\n    let result = {\r\n      tsr_id,\r\n      [`${name}_instruction`]: handleString(state[`${name}_instruction`]),\r\n      [`${name}_time_execution`]: getCustomFormat(\r\n        state[`${name}_time_execution`]\r\n      ),\r\n      [`${name}_foreign_attachment`]: JSON.stringify(\r\n        state[`${name}_foreign_attachment`] || []\r\n      ),\r\n      [`${name}_internal_attachment`]: JSON.stringify(\r\n        state[`${name}_internal_attachment`] || []\r\n      )\r\n    }\r\n    if (status === 'create') {\r\n      result[`${name}_notification_cc`] = this.handleCC(\r\n        state[`${name}_notification_cc`]\r\n      )\r\n    }\r\n    return { result, checkText }\r\n  }\r\n  handleSign = () => {\r\n    const { handleCheckSigned } = this.data.props.API\r\n    let name = this.handleSwitchName()\r\n    let { state } = this.data\r\n    let name_supervisor_select = `${name}_supervisor_select`,\r\n      supervisor_select = state[name_supervisor_select],\r\n      name_general_boss = `general_boss_${name}_select`,\r\n      general_boss = state[name_general_boss],\r\n      name_technical_boss = `technical_boss_${name}_select`,\r\n      technical_boss = state[name_technical_boss]\r\n    const check =\r\n      handleCheckSigned(supervisor_select) &&\r\n      handleCheckSigned(general_boss) &&\r\n      handleCheckSigned(technical_boss)\r\n    return {\r\n      check_sign: check,\r\n      dataSign: check\r\n        ? { [`${name}_supervisor_verify_by`]: supervisor_select.value }\r\n        : {}\r\n    }\r\n  }\r\n  handleSwitchSubmit = async () => {\r\n    let dataSend = await this.handleDataSend('create')\r\n    let sign = await this.handleSign()\r\n    let { check_sign, dataSign } = await sign\r\n    let { result, checkText } = await dataSend\r\n    const checkFinal = check_sign && checkText\r\n    if (checkFinal) {\r\n      const { handleState, state } = this.data\r\n      await handleState({\r\n        loading: 'submit',\r\n        disabled: true\r\n      })\r\n      const { token } = state\r\n      let nameTab = this.handleSwitchName()\r\n      const mergeFinal = await { ...dataSign, ...result }\r\n      const datareg = await new FormData()\r\n      for (let name in mergeFinal) {\r\n        let value = await mergeFinal[name]\r\n        await datareg.append(name, value)\r\n      }\r\n      let url = `${StaticData.domainIp}/tsr_v1/tsr7Insert/${nameTab}`\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              window.location.reload(true)\r\n              handleState({ redirect: false, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else Notification.notify(Message.text(99), 'error')\r\n  }\r\n  handleEditAPI = async () => {\r\n    let dataSend = await this.handleDataSend()\r\n    let { result, checkText } = await dataSend\r\n    if (checkText) {\r\n      const { handleState, state } = this.data\r\n      const { token } = state\r\n      let nameTab = this.handleSwitchName()\r\n      await handleState({\r\n        loading: 'submit',\r\n        disabled: true\r\n      })\r\n      const datareg = await new FormData()\r\n      for (let name in result) {\r\n        let value = await result[name]\r\n        await datareg.append(name, value)\r\n      }\r\n      let url = `${StaticData.domainIp}/tsr_v1/tsr7Update/${nameTab}`\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              window.location.reload(true)\r\n              handleState({ redirect: false, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else Notification.notify(Message.text(99), 'error')\r\n  }\r\n}\r\nexport default API\r\n","E:\\bidboland\\src\\tsrNew\\TSR7\\Mechanical.js",[],"E:\\bidboland\\src\\layout\\GeneralSearch.js",[],"E:\\bidboland\\src\\FAQ\\IndexFAQ.js",[],"E:\\bidboland\\src\\FAQ\\Edit.js",[],"E:\\bidboland\\src\\Tools\\InternalPhonebook\\Create.js",[],"E:\\bidboland\\src\\FAQ\\Create.js",[],"E:\\bidboland\\src\\index-builder\\ListIndexes.js",[],"E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchive.js",["3218"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../Customization/customization'\r\n// import SearchIcon from '@material-ui/icons/Search';\r\nimport StaticData from '../staticData'\r\nimport IsoMetric from './IsoMetric'\r\n// import FinalEquipmentManual from './FinalEquipmentManual'\r\nimport Permision from '../permision/permision'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport PAndId from './P&ID'\r\nimport LineList from './LineList'\r\nimport PFD from './PFD'\r\nimport Model3D from './3DModel'\r\n// import { Switch } from '@material-ui/core'\r\nimport Instrument from './Instrument'\r\nimport UploadInformation from '../Customization/UploadInformation'\r\nimport CounterTab from '../Customization/CounterTab'\r\nimport SearchTable from '../table/SearchTable'\r\nexport default class TechnicalArchive extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Permision = new Permision()\r\n    this.Reset = null\r\n    this.FilterReset = null\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [],\r\n      selected: [],\r\n      open: false,\r\n      search: '',\r\n      select: 1,\r\n      accessTab: true,\r\n      defaultSelected: [],\r\n      num: 0\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - آرشیو فنی شناسنامه`\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    setTimeout(async () => {\r\n      this.state.header.forEach(head => {\r\n        if (!head.notDefault) {\r\n          this.setState({\r\n            [`_header_${head.name}`]: true,\r\n            selected: [...this.state.selected, head.name]\r\n          })\r\n        }\r\n      })\r\n    }, 50)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  loadCheck = async () => {\r\n    await this.setState({ selected: [] })\r\n    await Object.keys(this.state).map(value => {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: false })\r\n      }\r\n      return true\r\n    })\r\n    await this.state.header.forEach(head => {\r\n      if (!head.notDefault) {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      }\r\n    })\r\n  }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let _name = value.split('_header_')[1]\r\n            array.push(_name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = async () => {\r\n    let list = await []\r\n    await this.setState({ selected: [] })\r\n    await this.state.header.filter(head => {\r\n      if (!head.notDefault) {\r\n        list.push(head.name)\r\n      }\r\n    })\r\n    await this.setState({ selected: list, search: '' })\r\n    await Object.keys(this.state).map(value => {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: false })\r\n      }\r\n      return true\r\n    })\r\n    await this.state.header.forEach(head => {\r\n      if (!head.notDefault) {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      }\r\n    })\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      await this.FilterReset()\r\n      await this.Reset()\r\n    }\r\n  }\r\n  HasNotRol = () => {\r\n    this.setState({ select: 0, accessTab: false, _404: true })\r\n  }\r\n  getRole = (response, status) => {\r\n    setTimeout(() => {\r\n      this.loadCheck()\r\n    }, 100)\r\n    if (status === 'response') {\r\n      if (response.status === 200) {\r\n        this.setState({ role: response.data.role })\r\n        if (this.props.location && this.props.location.state) {\r\n          if (this.props.location.state.select === 1) {\r\n            if (this.Permision.handlePermision(response.data.role, 'pfd')) {\r\n              this.setState({ select: 1, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          } else if (this.props.location.state.select === 2) {\r\n            if (this.Permision.handlePermision(response.data.role, 'p_and_id')) {\r\n              this.setState({ select: 2, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          } else if (this.props.location.state.select === 3) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'line_list')\r\n            ) {\r\n              this.setState({ select: 3, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          } else if (this.props.location.state.select === 4) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'isometric')\r\n            ) {\r\n              this.setState({ select: 4, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          } else if (this.props.location.state.select === 5) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, 'instrument_list')\r\n            ) {\r\n              this.setState({ select: 5, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          } else if (this.props.location.state.select === 6) {\r\n            if (\r\n              this.Permision.handlePermision(response.data.role, '3d_model')\r\n            ) {\r\n              this.setState({ select: 6, accessTab: true })\r\n            } else {\r\n              this.HasNotRol()\r\n            }\r\n          }\r\n        } else {\r\n          if (this.Permision.handlePermision(response.data.role, 'pfd')) {\r\n            this.setState({ select: 1, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'p_and_id')\r\n          ) {\r\n            this.setState({ select: 2, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'line_list')\r\n          ) {\r\n            this.setState({ select: 3, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'isometric')\r\n          ) {\r\n            this.setState({ select: 4, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, 'instrument_list')\r\n          ) {\r\n            this.setState({ select: 5, accessTab: true })\r\n          } else if (\r\n            this.Permision.handlePermision(response.data.role, '3d_model')\r\n          ) {\r\n            this.setState({ select: 6, accessTab: true })\r\n          } else {\r\n            this.HasNotRol()\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.setState({ select: 0, accessTab: false })\r\n      if (response.response) {\r\n        Notification.notify(Message.text(response.response.status), 'error')\r\n      }\r\n    }\r\n  }\r\n  ChangeTab = async num => {\r\n    this.setState({ select: num, search: '' })\r\n    this.loadCheck()\r\n  }\r\n  handleShow = () => {\r\n    if (this.state.token) {\r\n      switch (this.state.select) {\r\n        case 1:\r\n          return (\r\n            <PFD\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        case 2:\r\n          return (\r\n            <PAndId\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        case 3:\r\n          return (\r\n            <LineList\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n              GetDefaultSelected={defaultSelected =>\r\n                this.setState({ defaultSelected })\r\n              }\r\n            />\r\n          )\r\n        case 4:\r\n          return (\r\n            <IsoMetric\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n              GetDefaultSelected={defaultSelected =>\r\n                this.setState({ defaultSelected })\r\n              }\r\n            />\r\n          )\r\n        case 5:\r\n          return (\r\n            <Instrument\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        case 6:\r\n          return (\r\n            <Model3D\r\n              GetFunction={e => (this.Search = e)}\r\n              getHeader={e => this.setState({ header: e })}\r\n              selected={this.state.selected}\r\n              resetSearch={() => this.setState({ search: '' })}\r\n              getReset={e => (this.Reset = e)}\r\n              getRole={(e, name) =>\r\n                this.setState({\r\n                  role: e,\r\n                  nameRole: name,\r\n                  disabledCreate: false\r\n                })\r\n              }\r\n              FilterReset={remove => (this.FilterReset = remove)}\r\n            />\r\n          )\r\n        default:\r\n          return ''\r\n      }\r\n    }\r\n  }\r\n  handleShowTab = () => {\r\n    let list = [\r\n      {\r\n        name: 'PFD',\r\n        value: 1,\r\n        access: this.Permision.handlePermision(this.state.role, 'pfd')\r\n      },\r\n      {\r\n        name: 'P&ID',\r\n        value: 2,\r\n        access: this.Permision.handlePermision(this.state.role, 'p_and_id')\r\n      },\r\n      {\r\n        name: 'Line List',\r\n        value: 3,\r\n        access: this.Permision.handlePermision(this.state.role, 'line_list')\r\n      },\r\n      {\r\n        name: 'ISOmetric',\r\n        value: 4,\r\n        access: this.Permision.handlePermision(this.state.role, 'isometric')\r\n      },\r\n      {\r\n        name: 'Instrument List',\r\n        value: 5,\r\n        access: this.Permision.handlePermision(this.state.role, 'instrument_list')\r\n      },\r\n      {\r\n        name: '3D Model',\r\n        value: 6,\r\n        access: this.Permision.handlePermision(this.state.role, '3d_model')\r\n      }\r\n    ]\r\n    return list\r\n  }\r\n  handleShowLink = () => {\r\n    if (this.state.token) {\r\n      switch (this.state.select) {\r\n        case 1:\r\n          return {\r\n            link: '/create-PFD',\r\n            access: 'pfd_create',\r\n            update: 'pfd_update',\r\n            linkUpload: 'pfd/create'\r\n          }\r\n        case 2:\r\n          return {\r\n            link: '/create-PAndID',\r\n            access: 'p&id_create',\r\n            update: 'p&id_update',\r\n            linkUpload: 'technicalArchive/PAndId/create'\r\n          }\r\n        case 3:\r\n          return {\r\n            link: '/create-linelist',\r\n            access: 'line_list_create',\r\n            update: 'line_list_update',\r\n            linkUpload: 'technicalArchive/lineList/create'\r\n          }\r\n        case 4:\r\n          return {\r\n            link: '/create-IsoMetric',\r\n            access: 'isometric_create',\r\n            update: 'isometric_update',\r\n            linkUpload: 'isometrics/create'\r\n          }\r\n        case 5:\r\n          return {\r\n            link: '/create-instrument',\r\n            access: 'instrument_list_create',\r\n            update: 'instrument_list_update',\r\n            linkUpload: 'technicalArchive/instrumentList/create'\r\n          }\r\n        case 6:\r\n          return {\r\n            link: '/create-3DModel',\r\n            access: '3d_model_create',\r\n            update: '3d_model_update'\r\n          }\r\n        default:\r\n          return null\r\n      }\r\n    }\r\n  }\r\n  handleNameRole = () => {\r\n    const role = this.state.role\r\n    if (role['pfd'] || role === 'all') {\r\n      return 'pfd'\r\n    } else if (role['p_and_id'] || role === 'all') {\r\n      return 'p_and_id'\r\n    } else if (role['line_list'] || role === 'all') {\r\n      return 'line_list'\r\n    } else if (role['isometric'] || role === 'all') {\r\n      return 'isometric'\r\n    } else if (role['instrument'] || role === 'all') {\r\n      return 'instrument'\r\n    } else if (role['3d_model'] || role === 'all') {\r\n      return '3d_model'\r\n    } else return ''\r\n  }\r\n  render () {\r\n    if (!this.state.token) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state._404) {\r\n      return <Redirect to='/404' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole={this.state.role ? this.handleNameRole() : 'Home'}\r\n                  getRole={this.getRole}\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            {this.handleShowLink() &&\r\n                              this.Permision.handlePermision(\r\n                                this.state.role,\r\n                                this.handleShowLink().access\r\n                              ) && (\r\n                                <div className='icon'>\r\n                                  <a href={this.handleShowLink().link}>\r\n                                    <AddCircleIcon />\r\n                                    <span>ایجاد کاربرگ</span>\r\n                                  </a>\r\n                                </div>\r\n                              )}\r\n                            {this.handleShowLink() &&\r\n                              this.Permision.handlePermision(\r\n                                this.state.role,\r\n                                this.handleShowLink().update\r\n                              ) && (\r\n                                <React.Fragment>\r\n                                  <div className='icon'>\r\n                                    <span\r\n                                      className='item'\r\n                                      onClick={() =>\r\n                                        this.setState({\r\n                                          upload: this.handleShowLink()\r\n                                            .linkUpload\r\n                                            ? !this.state.upload\r\n                                            : false\r\n                                        })\r\n                                      }\r\n                                    >\r\n                                      <SystemUpdateAltIcon />\r\n                                      <span>بروز رسانی</span>\r\n                                    </span>\r\n                                  </div>\r\n                                  {this.state.upload &&\r\n                                    this.handleShowLink().linkUpload && (\r\n                                      <UploadInformation\r\n                                        linkUpload={\r\n                                          this.handleShowLink().linkUpload\r\n                                        }\r\n                                        {...this}\r\n                                        handleState={(name, value) =>\r\n                                          this.setState({ [name]: value })\r\n                                        }\r\n                                      />\r\n                                    )}\r\n                                </React.Fragment>\r\n                              )}\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیلترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='tab-form ltr'>\r\n                      <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start ltr'>\r\n                        {this.state.accessTab &&\r\n                          this.handleShowTab().map(\r\n                            (tab, index) =>\r\n                              tab.access && (\r\n                                <div\r\n                                  className={`col-xl col-lg col mr-0 pr-3 pl-0`}\r\n                                  onClick={() => this.ChangeTab(tab.value)}\r\n                                  key={index}\r\n                                >\r\n                                  <div\r\n                                    className={`item-tab ltr mr-0 w-100 p-0 col-12 ${\r\n                                      this.state.select === tab.value\r\n                                        ? 'active IranSans_Bold'\r\n                                        : ''\r\n                                    }`}\r\n                                  >\r\n                                    <span>\r\n                                      <label\r\n                                        className={`${\r\n                                          this.state.select === tab.value\r\n                                            ? 'IranSans_Bold'\r\n                                            : ''\r\n                                        }`}\r\n                                      >\r\n                                        <CounterTab\r\n                                          key={index}\r\n                                          tafazol={\r\n                                            this.handleShowTab().filter(\r\n                                              item => !item.access\r\n                                            ).length\r\n                                          }\r\n                                          data={tab}\r\n                                        />\r\n                                        .\r\n                                      </label>\r\n                                      {tab.name}\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                          )}\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-end'>\r\n                      {this.handleShow()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveBirthCertificate.js",[],"E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveFinalBooklet.js",[],"E:\\bidboland\\src\\TechnicalArchive\\TechnicalArchiveEngineering.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\index.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Create\\index.js",[],"E:\\bidboland\\src\\tsrNew\\note\\List\\index.js",["3219"],"import React, { useEffect, useState } from 'react'\r\nimport TableAPI from './API'\r\nimport Loading from '../../../layout/loading'\r\nimport handleString from '../../../handleString'\r\nimport handleCheckText from '../../../handleCheckText'\r\nimport AttachFileRoundedIcon from '@material-ui/icons/AttachFileRounded'\r\nconst List = props => {\r\n  const [row, setRow] = useState([])\r\n  const [loadTable, setLoadTable] = useState(true)\r\n  const myProps = { loadTable, setLoadTable, row, setRow, ...props }\r\n  const myAPI = new TableAPI(myProps)\r\n  const { fetchData, convertDate, ClickRow } = myAPI\r\n  useEffect(fetchData, [])\r\n  return (\r\n    <div className='fixed-heigh-table'>\r\n      <table className='table-note'>\r\n        <thead>\r\n          <tr className='head-tr'>\r\n            <th>فرستنده</th>\r\n            <th>گیرنده</th>\r\n            <th>تاریخ</th>\r\n            <th>متن</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        {loadTable ?\r\n          <div className='mt-5 w-100 row align-items-center justify-content-center position-absolute r-0 t-0 l-0 b-0'>\r\n            <span className='d-block mt-2'>\r\n              <Loading className='table d-flex justify-content-center align-items-center' />\r\n              در حال بارگزاری اطلاعات\r\n            </span>\r\n          </div>\r\n          :\r\n          <tbody className='w-100'>\r\n            {row.length === 0 ?\r\n              <div className='not-found position-absolute r-0 l-0 b-0 d-flex align-items-center justify-content-center'>\r\n                <span className='m-5'>\r\n                  موردی وجود ندارد\r\n                </span>\r\n              </div>\r\n              :\r\n              row?.map((data, key) => (\r\n                <tr className='w-100 pointer row-data' key={key} onClick={() => ClickRow(data)}>\r\n                  <td className='IranSans_Medium_FA'>{handleString(data.send_from)}</td>\r\n                  <td className='IranSans_Medium_FA'>{handleString(data.recieve_to)}</td>\r\n                  <td className='IranSans_Medium_FA'>{handleCheckText(data?.created_at) ? convertDate(handleString(data.created_at)) : '-'}</td>\r\n                  <td className='IranSans_Medium_FA'>\r\n                    <span className='cut-text IranSans_Medium_FA'>\r\n                      {handleString(data.text)}\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    {data?.attach?.length > 0 && <AttachFileRoundedIcon />}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        }\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\nexport default List\r\n","E:\\bidboland\\src\\ARP\\ShowArp.js",[],"E:\\bidboland\\src\\ARP\\ARP.js",[],"E:\\bidboland\\src\\ARP\\IndexARP.js",[],"E:\\bidboland\\src\\TSR\\ShowTSR.js",["3220"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport TechnicalServiceApplication from './TechnicalServiceApplication'\r\nimport PreliminaryReview from './PreliminaryReview'\r\nimport ProcessTSR from './ProcessTsr'\r\nimport HSE from './HSE'\r\nimport GeneralEngineering from './GeneralEngineering'\r\nimport Committee from './committee'\r\nimport WorkOrder from './WorkOrder'\r\nimport Inspector from './Inspector'\r\nimport AnnouncementEndWork from './AnnouncementEndWork'\r\nimport CheckEndWork from './CheckEndWork'\r\nimport MapDelivery from './MapDelivery'\r\nimport Effectiveness from './Effectiveness'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport StaticData from '../staticData'\r\nimport Revisions from './Revisions'\r\nimport Permision from '../permision/permision'\r\nimport handleCheckText from '../handleCheckText'\r\nimport EditBeforeRequest from './EditBeforeRequest'\r\nimport ListSign from './ListSign'\r\nexport default class ShowTSR extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.ShowFetch = {}\r\n    this.ResetRev = null\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      select: '',\r\n      token: Cookies.get('token'),\r\n      stop: false,\r\n      ListTab: [\r\n        {\r\n          id: 1,\r\n          nameTab: 'صدور درخواست TSR',\r\n          title: 'صدور درخواست توسط متقاضی',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 2,\r\n          nameTab: 'بررسی اولیه و انتخاب مسئول TSR',\r\n          title: 'بررسی اولیه و انتخاب مسئول TSR و گروه کارشناسی',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 3,\r\n          nameTab: 'بررسی TSR توسط مهندس فرآیند',\r\n          title: 'بررسی TSR توسط مهندس فرآیند',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 4,\r\n          nameTab: 'بررسی توسط اداره ایمنی',\r\n          title: 'بررسی TSR از دیدگاه ایمنی ، سلامت و زیست محیطی (HSE)',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 5,\r\n          nameTab: 'بررسی TSR توسط مهندسی عمومی',\r\n          title: 'بررسی TSR توسط مهندسی عمومی',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 6,\r\n          nameTab: 'کمیته TSR',\r\n          title: 'کمیته TSR',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 7,\r\n          nameTab: 'دستور کار مهندسی',\r\n          title: 'دستور کار مهندسی',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 8,\r\n          nameTab: 'دستور العمل بارزسی فنی',\r\n          title: 'دستور العمل بارزسی فنی',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 9,\r\n          nameTab: 'اعلام پایان کار',\r\n          title: 'اعلام پایان کار توسط مسئول اجرا',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 10,\r\n          nameTab: 'بررسی پایان اجرای کار',\r\n          title: 'بررسی پایان اجرای کار',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 11,\r\n          nameTab: 'تحویل نقشه‌های As Built',\r\n          title: 'تحویل نقشه‌های As Built',\r\n          permision: 'tsr_show'\r\n        },\r\n        {\r\n          id: 12,\r\n          nameTab: 'ارزیابی اثر بخشی',\r\n          title: 'ارزیابی اثر بخشی',\r\n          permision: 'tsr_show'\r\n        }\r\n      ],\r\n      id: '',\r\n      tsr1: {},\r\n      tsr2: {},\r\n      tsr3: {},\r\n      tsr4: {},\r\n      tsr5: {},\r\n      tsr6: {},\r\n      tsr7: {},\r\n      tsr8: {},\r\n      tsr9: {},\r\n      tsr10: {},\r\n      tsr11: {},\r\n      tsr12: {},\r\n      status: '',\r\n      part: '',\r\n      role: null,\r\n      can_do_action: false,\r\n      loading: '',\r\n      revisions: {},\r\n      disabledRev: false,\r\n      listData: [],\r\n      firstLoading: true,\r\n      user_list: [],\r\n      verify: false,\r\n      Signs: {},\r\n      hasNot: false,\r\n      numResult: 0\r\n    }\r\n  }\r\n  async componentDidMount () {\r\n    const url = window.location.href\r\n    let id = url.split('-')[url.split('-').length - 1]\r\n    await this.setState({ id: id })\r\n    await this.fetchData(id)\r\n  }\r\n  handleStatus = () => {\r\n    // let result = 'disabled'\r\n    // if (data.tsr1_verified !== '1') {\r\n    //   result = 'disabled'\r\n    // } else if (status) {\r\n    //   result = status.status\r\n    // }\r\n    // return result\r\n    return 'disabled'\r\n  }\r\n  fetchData = async (id, NotChange = false) => {\r\n    if (this.state.token) {\r\n      await axios\r\n        .get(`${StaticData.domainIp}/tsr/get/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '', firstLoading: false })\r\n          const content = response.data.content\r\n          const status = content.status\r\n          if (response.status === 200) {\r\n            let select, requestEdit\r\n            if (status) {\r\n              select = parseInt(status.page.split('tsr')[1])\r\n              requestEdit = true\r\n            } else {\r\n              select = 12\r\n              requestEdit = false\r\n            }\r\n            let tsr1 = {},\r\n              tsr2 = {},\r\n              tsr3 = {},\r\n              tsr4 = {},\r\n              tsr5 = {},\r\n              tsr6 = {},\r\n              tsr7 = {},\r\n              tsr8 = {},\r\n              tsr9 = {},\r\n              tsr10 = {},\r\n              tsr11 = {},\r\n              tsr12 = {},\r\n              Signs = {}\r\n            const data = content.data\r\n            for (let value in data) {\r\n              if (value.includes('tsr1_')) {\r\n                tsr1[value] = await data[value]\r\n              } else if (value.includes('tsr2')) {\r\n                tsr2[value] = await data[value]\r\n              } else if (value.includes('tsr3')) {\r\n                tsr3[value] = await data[value]\r\n              } else if (value.includes('tsr4')) {\r\n                tsr4[value] = await data[value]\r\n              } else if (value.includes('tsr5')) {\r\n                tsr5[value] = await data[value]\r\n              } else if (value.includes('tsr6')) {\r\n                tsr6[value] = await data[value]\r\n              } else if (value.includes('tsr7')) {\r\n                tsr7[value] = await data[value]\r\n              } else if (value.includes('tsr8')) {\r\n                tsr8[value] = await data[value]\r\n              } else if (value.includes('tsr9')) {\r\n                tsr9[value] = await data[value]\r\n              } else if (value.includes('tsr10')) {\r\n                tsr10[value] = await data[value]\r\n              } else if (value.includes('tsr11')) {\r\n                tsr11[value] = await data[value]\r\n              } else if (value.includes('tsr12')) {\r\n                tsr12[value] = await data[value]\r\n              }\r\n              if (value.includes('_verify') && data[value] === '1') {\r\n                Signs[value] = data[value]\r\n              }\r\n            }\r\n            tsr1['subjectSuggest'] = data.subject_suggest\r\n              ? data.subject_suggest\r\n              : []\r\n            tsr1['tsr1_user_list'] = data.tsr2_user_list\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr2['tsr2_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr2['tsr2_subject'] = await data.tsr1_subject\r\n            tsr2['tsr2_created_at'] = await data.tsr1_created_at\r\n            tsr2['tsr2_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr3['tsr3_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr3['tsr3_subject'] = await data.tsr1_subject\r\n            tsr3['tsr3_created_at'] = await data.tsr1_created_at\r\n            tsr3['tsr3_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr4['tsr4_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr4['tsr4_subject'] = await data.tsr1_subject\r\n            tsr4['tsr4_created_at'] = await data.tsr1_created_at\r\n            tsr4['tsr4_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr5['tsr5_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr5['tsr5_subject'] = await data.tsr1_subject\r\n            tsr5['tsr5_created_at'] = await data.tsr1_created_at\r\n            tsr5['tsr5_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr6['tsr6_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr6['tsr6_subject'] = await data.tsr1_subject\r\n            tsr6['tsr6_created_at'] = await data.tsr1_created_at\r\n            tsr6['tsr6_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr7['tsr7_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr7['tsr7_subject'] = await data.tsr1_subject\r\n            tsr7['tsr7_created_at'] = await data.tsr1_created_at\r\n            tsr7['tsr7_author_name'] = await data.tsr1_author_name\r\n            tsr7['tsr7_applicant_unit'] = await data.tsr1_applicant_unit\r\n            tsr7['tsr7_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr8['tsr8_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr8['tsr8_subject'] = await data.tsr1_subject\r\n            tsr8['tsr8_created_at'] = await data.tsr1_created_at\r\n            tsr8['tsr8_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr9['tsr9_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr9['tsr9_subject'] = await data.tsr1_subject\r\n            tsr9['tsr9_created_at'] = await data.tsr1_created_at\r\n            tsr9['tsr9_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr10['tsr10_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr10['tsr10_subject'] = await data.tsr1_subject\r\n            tsr10['tsr10_created_at'] = await data.tsr1_created_at\r\n            tsr10['tsr10_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr11['tsr11_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr11['tsr11_subject'] = await data.tsr1_subject\r\n            tsr11['tsr11_created_at'] = await data.tsr1_created_at\r\n            tsr11['tsr11_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n\r\n            tsr12['tsr12_tsr_no'] = await data.tsr1_tsr_no\r\n            tsr12['tsr12_subject'] = await data.tsr1_subject\r\n            tsr12['tsr12_created_at'] = await data.tsr1_created_at\r\n            tsr12['tsr12_user_list'] = (await data.tsr2_user_list)\r\n              ? data.tsr2_user_list\r\n              : []\r\n            await this.setState({\r\n              select: NotChange\r\n                ? this.state.select\r\n                : data.tsr1_verified === '1'\r\n                ? this.CoercionSign(data, select)\r\n                : 1,\r\n              tsr1: tsr1,\r\n              tsr2: tsr2,\r\n              tsr3: tsr3,\r\n              tsr4: tsr4,\r\n              tsr5: tsr5,\r\n              tsr6: tsr6,\r\n              tsr7: tsr7,\r\n              tsr8: tsr8,\r\n              tsr9: tsr9,\r\n              tsr10: tsr10,\r\n              tsr11: tsr11,\r\n              tsr12: tsr12,\r\n              status: this.handleStatus(),\r\n              // status:\r\n              //   data.tsr1_verified !== '1' && data.tsr1_verified !== '2'\r\n              //     ? 'disabled'\r\n              //     : status\r\n              //     ? status.status\r\n              //     : null,\r\n              part: status ? status.part : null,\r\n              role: response.data.role,\r\n              level: NotChange\r\n                ? this.state.select\r\n                : data.tsr1_verified === '1'\r\n                ? this.CoercionSign(data, select)\r\n                : 1,\r\n              // can_do_action: status ? status.can_do_action : null,\r\n              can_do_action: status ? true : false,\r\n              make_complete: status ? status.make_complete : null,\r\n              revisions: response.data.content.revisions,\r\n              disabledRev: false,\r\n              msg: status ? status.msg : '',\r\n              user_list: data.tsr2_user_list ? data.tsr2_user_list : [],\r\n              unverify_msg:\r\n                data.tsr1_verified === '0' ? data.tsr1_verify_msg : '',\r\n              verify: data.tsr1_verified === '1',\r\n              requestEdit: requestEdit,\r\n              Signs: Signs\r\n            })\r\n            if (this.ShowFetch) {\r\n              await this.ShowFetch[this.state.select]()\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', firstLoading: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  GetShowFetch = (number, fn) => {\r\n    this.ShowFetch[number] = fn\r\n  }\r\n  handleString = str => {\r\n    let result = str.replace(/&amp;/g, '&').replace(/amp;/g, '')\r\n    return result\r\n  }\r\n  CanShow = id => {\r\n    const { status, level } = this.state\r\n    const check = !(\r\n      (status === 'create' || status === 'update') &&\r\n      level === id\r\n    )\r\n    return check\r\n  }\r\n  CanUpdate = id => {\r\n    const { level, status, role } = this.state\r\n    const check =\r\n      level === id &&\r\n      status === 'update' &&\r\n      this.Permision.handlePermision(role, `tsr_update`)\r\n    return check\r\n  }\r\n  handleState = (name, value) => {\r\n    this.setState({ [name]: value })\r\n  }\r\n  handleClose = id => {\r\n    const { status, level } = this.state\r\n    const check = status === 'close' && level === id\r\n    return check\r\n  }\r\n  handleShow = () => {\r\n    switch (this.state.select) {\r\n      case 1:\r\n        return (\r\n          <TechnicalServiceApplication\r\n            show={this.CanShow(1)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(1)}\r\n            close={this.handleClose(1)}\r\n          />\r\n        )\r\n      case 2:\r\n        return (\r\n          <PreliminaryReview\r\n            show={this.CanShow(2)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(2)}\r\n            close={this.handleClose(2)}\r\n          />\r\n        )\r\n      case 3:\r\n        return (\r\n          <ProcessTSR\r\n            show={this.CanShow(3)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(3)}\r\n            close={this.handleClose(3)}\r\n          />\r\n        )\r\n      case 4:\r\n        return (\r\n          <HSE\r\n            show={this.CanShow(4)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(4)}\r\n            close={this.handleClose(4)}\r\n          />\r\n        )\r\n      case 5:\r\n        return (\r\n          <GeneralEngineering\r\n            show={this.CanShow(5)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(5)}\r\n            close={this.handleClose(5)}\r\n          />\r\n        )\r\n      case 6:\r\n        return (\r\n          <Committee\r\n            show={this.CanShow(6)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(6)}\r\n            close={this.handleClose(6)}\r\n          />\r\n        )\r\n      case 7:\r\n        return (\r\n          <WorkOrder\r\n            show={this.CanShow(7)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(7)}\r\n            close={this.handleClose(7)}\r\n          />\r\n        )\r\n      case 8:\r\n        return (\r\n          <Inspector\r\n            show={this.CanShow(8)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(8)}\r\n            close={this.handleClose(8)}\r\n          />\r\n        )\r\n      case 9:\r\n        return (\r\n          <AnnouncementEndWork\r\n            show={this.CanShow(9)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(9)}\r\n            close={this.handleClose(9)}\r\n          />\r\n        )\r\n      case 10:\r\n        return (\r\n          <CheckEndWork\r\n            show={this.CanShow(10)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(10)}\r\n            close={this.handleClose(10)}\r\n          />\r\n        )\r\n      case 11:\r\n        return (\r\n          <MapDelivery\r\n            show={this.CanShow(11)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(11)}\r\n            close={this.handleClose(11)}\r\n          />\r\n        )\r\n      case 12:\r\n        return (\r\n          <Effectiveness\r\n            show={this.CanShow(12)}\r\n            {...this}\r\n            canUpdate={this.CanUpdate(12)}\r\n            close={this.handleClose(12)}\r\n          />\r\n        )\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n  handleVerify = async (accept, value = '') => {\r\n    const { url, itemReject } = await this.state.rejectSelect\r\n    if (url) {\r\n      let a = {}\r\n      if (this.state.token && this.state.id) {\r\n        let datareg = await new FormData()\r\n        await datareg.append('verify_msg', value)\r\n        a['verify_msg'] = value\r\n        // await datareg.append('verify', accept)\r\n        if (itemReject) {\r\n          await itemReject.forEach(async row => {\r\n            await datareg.append(\r\n              row.value,\r\n              row.value === 'verify' ? accept : row.accept\r\n            )\r\n            a[row.value] = row.value === 'verify' ? accept : row.accept\r\n          })\r\n          const notVerify =\r\n            (await itemReject.filter(_row => _row.value === 'verify')\r\n              .length) === 0\r\n          if (notVerify) {\r\n            await datareg.append('verify', accept)\r\n            a['verify'] = accept\r\n          }\r\n        } else {\r\n          if (accept) {\r\n            await datareg.append('verify', accept)\r\n            a['verify'] = accept\r\n          }\r\n        }\r\n        await axios({\r\n          method: 'post',\r\n          url: `${StaticData.domainIp}/tsr/${url}/${this.state.id}`,\r\n          data: datareg,\r\n          headers: {\r\n            Authorization: `Bearer ${\r\n              this.state.token ? this.state.token : null\r\n            }`\r\n          }\r\n        })\r\n          .then(async response => {\r\n            await this.setState({ loading: '', rejectSelect: '' })\r\n            if (response.status === 200) {\r\n              await Notification.notify(Message.text(924), 'success')\r\n              setTimeout(async () => {\r\n                await this.setState({ redirect: true, disabled: false })\r\n              }, 5000)\r\n            } else {\r\n              this.setState({ disabled: false })\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '', disabled: false, rejectSelect: '' })\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  hadnleTab = () => {\r\n    const { select } = this.state\r\n    let listNumber = []\r\n    if (select === 1) {\r\n      listNumber = [1, 2, 3, 4]\r\n    } else if (select > 9) {\r\n      listNumber = [9, 10, 11, 12]\r\n    } else {\r\n      listNumber = [select - 1, select, select + 1, select + 2]\r\n    }\r\n    return listNumber\r\n  }\r\n  handleShowTab = data => {\r\n    const { ListTab, role } = this.state\r\n    let filter = ListTab.filter(tab => parseInt(tab.id) === data)[0]\r\n    const CheckPermission = this.Permision.handlePermision(\r\n      role,\r\n      filter.permision\r\n    )\r\n    if (CheckPermission) {\r\n      return filter\r\n    } else return ''\r\n  }\r\n  handleRev = data => {\r\n    const page = this.state.select,\r\n      tsrid = this.state.id,\r\n      id = data.id\r\n    if (this.ShowFetch[this.state.select]) {\r\n      if (page && tsrid && id) {\r\n        axios\r\n          .get(\r\n            `${StaticData.domainIp}/tsr/getRevisionDetail/${page}/tsr/${tsrid}/id/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${this.state.token}`\r\n              }\r\n            }\r\n          )\r\n          .then(async response => {\r\n            this.setState({ loading: '' })\r\n            if (response.status === 200) {\r\n              const state = await response.data.content\r\n              if (state) {\r\n                await this.setState({\r\n                  [`tsr${this.state.select}`]: state,\r\n                  status: 'sign',\r\n                  can_do_action: null,\r\n                  disabledRev: true\r\n                })\r\n                await this.ShowFetch[this.state.select]()\r\n              }\r\n            } else {\r\n              Notification.notify(Message.text(response.status), 'error')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({ loading: '' })\r\n\r\n            if (err.response) {\r\n              Notification.notify(Message.text(err.response.status), 'error')\r\n            }\r\n          })\r\n      }\r\n    }\r\n  }\r\n  ChangeTab = num => {\r\n    this.setState({ select: num })\r\n    if (this.ResetRev) {\r\n      this.ResetRev()\r\n    }\r\n  }\r\n  handleDocumentMdl = text => {\r\n    this.setState({ loading: 'select' })\r\n    let url = `${StaticData.domainIp}/detailEng/searchInDocuments?documentNumber=${text}`\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        this.setState({ loading: '' })\r\n        if (response.status === 200) {\r\n          this.setState({ listData: response.data.content })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  ForeignAttachments = list => {\r\n    let check = false\r\n    if (list) {\r\n      let i = 0\r\n      while (i < list.length) {\r\n        let obj = list[i]\r\n        if (obj.Attachement && obj.Attachement.length > 0) {\r\n          check =\r\n            handleCheckText(obj.degreeTitle) && handleCheckText(obj.numberPages)\r\n        } else {\r\n          check = true\r\n        }\r\n        if (!check) {\r\n          break\r\n        }\r\n        i++\r\n      }\r\n    }\r\n    return check\r\n  }\r\n  Internalَttachments = list => {\r\n    let check = false\r\n    if (list) {\r\n      let i = 0\r\n      while (i < list.length) {\r\n        let obj = list[i]\r\n        check =\r\n          handleCheckText(obj.documentNumber) &&\r\n          handleCheckText(obj.degreeTitle)\r\n        if (!check) {\r\n          break\r\n        }\r\n        i++\r\n      }\r\n    }\r\n    return check\r\n  }\r\n  SelctDocumentMdl = async (value, props, workOrder = false) => {\r\n    let url = await `${StaticData.domainIp}/mdl/getDocumentDetailByNumber`\r\n    let datareg = await new FormData()\r\n    await datareg.append('documentNumber', value)\r\n    await axios({\r\n      method: 'post',\r\n      url: url,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        const degreeTitle = await response.data.content.activityName\r\n        if (workOrder) {\r\n          let typeWork = props.state.typeWork\r\n          let obj = props.state[typeWork]\r\n          if (obj) {\r\n            let list = obj[props.nameParent]\r\n            let _obj = list[props.index]\r\n            _obj['degreeTitle'] = await degreeTitle\r\n            props.handleState(typeWork, obj)\r\n          }\r\n        } else {\r\n          let list = await props.state[props.nameParent]\r\n          if (list) {\r\n            let obj = await list[props.index]\r\n            obj['degreeTitle'] = await degreeTitle\r\n            await props.handleState(props.nameParent, list)\r\n          }\r\n          if (response.status === 200) {\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  CheckTab = key => {\r\n    const { verify } = this.state\r\n    const check = verify ? true : key === 0\r\n    return check\r\n  }\r\n  CoercionSign = (data, level) => {\r\n    let list = ListSign.ListMandatory\r\n    let i = 1\r\n    let numResult = level\r\n    let Not_Complete = false\r\n    while (i <= level) {\r\n      let tsr = list[`tsr${i}`]\r\n      if (tsr) {\r\n        let array = tsr.filter(_tsr => !_tsr.mandatory)\r\n        let arraySign = Object.keys(array).map(_value => {\r\n          return array[_value].state\r\n        })\r\n        const CheckFilter = arraySign.filter(\r\n          _sign => data[`tsr${i}_${_sign}`] !== '1'\r\n        )\r\n        Not_Complete = CheckFilter.length > 0\r\n        if (Not_Complete) {\r\n          const SecondCounter = this.CheckResult(data, level)\r\n          this.setState({\r\n            hasNot: true,\r\n            numResult: i === SecondCounter ? i : SecondCounter\r\n          })\r\n          numResult = i === SecondCounter ? i : SecondCounter\r\n          break\r\n        }\r\n      }\r\n      i++\r\n    }\r\n    return numResult\r\n  }\r\n  CheckResult = (data, level) => {\r\n    let number = level\r\n    let _tsr3 = {\r\n      check: data['tsr3_review_result'] !== '0' || !data['tsr3_review_result'],\r\n      num: 3\r\n    }\r\n    let _tsr4 = {\r\n      check: data['tsr4_hse_review'] !== '0' || !data['tsr4_hse_review'],\r\n      num: 4\r\n    }\r\n    let _tsr5 = {\r\n      check: data['tsr5_review_result'] !== '0' || !data['tsr5_review_result'],\r\n      num: 5\r\n    }\r\n    let _tsr6 = {\r\n      check:\r\n        data['tsr6_technical_review'] !== '0' || !data['tsr6_technical_review'],\r\n      num: 6\r\n    }\r\n    let _tsr10 = {\r\n      check:\r\n        data['tsr10_review_result'] !== '0' || !data['tsr10_review_result'],\r\n      num: 10\r\n    }\r\n    if (!_tsr3.check) number = _tsr3.num\r\n    else if (!_tsr4.check) number = _tsr4.num\r\n    else if (!_tsr5.check) number = _tsr5.num\r\n    else if (!_tsr6.check) number = _tsr6.num\r\n    else if (!_tsr10.check) number = _tsr10.num\r\n    return number\r\n  }\r\n  handleCheckShow = id => {\r\n    const { hasNot, numResult } = this.state\r\n    let result = hasNot ? id <= numResult : true\r\n    return result\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/index-TSR`,\r\n            state: { select: 2 }\r\n          }}\r\n        />\r\n      )\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole='tsr_show'\r\n                  firstLoading={this.state.firstLoading}\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard row m-0 p-0'>\r\n                    <div className='main-form'>\r\n                      {this.state.select && (\r\n                        <div className='title-from d-flex align-items-center py-3'>\r\n                          <div className='col pr-0'>\r\n                            <h2>\r\n                              {this.state.ListTab[this.state.select - 1].title}\r\n                            </h2>\r\n                          </div>\r\n                          {this.state.requestEdit &&\r\n                            this.state.status !== 'update' && (\r\n                              <EditBeforeRequest {...this} />\r\n                            )}\r\n                        </div>\r\n                      )}\r\n                      {this.state.select && (\r\n                        <div className='tab-form rtl'>\r\n                          <div className='col-xl-11 col-lg-11 col-12 row m-0 justify-content-start'>\r\n                            {this.hadnleTab().map(\r\n                              (data, key) =>\r\n                                this.CheckTab(key) &&\r\n                                this.handleCheckShow(\r\n                                  this.handleShowTab(data).id\r\n                                ) && (\r\n                                  // this.handleShowTab(data).id <=\r\n                                  //   this.state.level &&\r\n                                  <div\r\n                                    className={`col-xl-3 col-lg-3 col-3 mr-0 pr-3 pl-0`}\r\n                                    key={key}\r\n                                    onClick={() =>\r\n                                      // this.handleShowTab(data).id <=\r\n                                      //   this.state.level &&\r\n                                      this.ChangeTab(\r\n                                        this.handleShowTab(data).id\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <div\r\n                                      className={`item-tab rtl mr-0 w-100 p-0 col-12\r\n                                       ${\r\n                                         this.state.select ===\r\n                                         this.handleShowTab(data).id\r\n                                           ? 'active IranSans_Bold'\r\n                                           : ''\r\n                                       }`}\r\n                                    >\r\n                                      <span>\r\n                                        <label\r\n                                          className={`${\r\n                                            this.state.select ===\r\n                                            this.handleShowTab(data).id\r\n                                              ? 'IranSans_Bold'\r\n                                              : ''\r\n                                          }`}\r\n                                        >\r\n                                          {this.handleShowTab(data).id}.\r\n                                        </label>\r\n                                        {this.handleShowTab(data).nameTab}\r\n                                      </span>\r\n                                    </div>\r\n                                  </div>\r\n                                )\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      <div className='col-xl-8 col-lg-12 col-md-12 col-12'>\r\n                        {handleCheckText(this.state.unverify_msg) && (\r\n                          <div className='col-12'>\r\n                            <div className='message-error'>\r\n                              <label className='strong'>\r\n                                <span className='ml-1'>\r\n                                  tsr {this.state.id}\r\n                                </span>\r\n                                به دلیل زیر بسته شد\r\n                              </label>\r\n                              <p className='m-0'>{this.state.unverify_msg}</p>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        {this.state.status === 'close' &&\r\n                          handleCheckText(this.state.msg) && (\r\n                            <div className='col-12 mt-2'>\r\n                              <div className='message-error'>\r\n                                <label className='strong'>\r\n                                  <span className='ml-1'>\r\n                                    tsr {this.state.id}\r\n                                  </span>\r\n                                  به دلیل زیر بسته شد\r\n                                </label>\r\n                                <p className='m-0'>{this.state.msg}</p>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        {this.Permision.handlePermision(\r\n                          this.state.role,\r\n                          'tsr_revisions'\r\n                        ) && (\r\n                          <Revisions\r\n                            {...this}\r\n                            GetReset={fn => (this.ResetRev = fn)}\r\n                          />\r\n                        )}\r\n                        {this.handleShow()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TechnicalArchive\\ActionCcs.js",[],"E:\\bidboland\\src\\TSR\\IndexTSR.js",[],"E:\\bidboland\\src\\TechnicalArchive\\API\\FnsTables.js",[],"E:\\bidboland\\src\\layout\\PopUPText.js",[],"E:\\bidboland\\src\\library\\IndexRequest.js",["3221"],"import React, { Component } from 'react'\r\nimport Sidebar from '../layout/sidebar'\r\nimport Menu from '../layout/menu'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport StaticData from '../staticData'\r\nimport Cookies from 'js-cookie'\r\n// import AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt'\r\nimport RefreshIcon from '@material-ui/icons/Refresh'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport Customization from '../Customization/customization'\r\n// import SearchIcon from '@material-ui/icons/Search';\r\nimport TableRequest from './TableRequest'\r\nimport UploadInformation from '../Customization/UploadInformation'\r\nimport Permision from '../permision/permision'\r\n// import axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport SearchTable from '../table/SearchTable'\r\nexport default class IndexRequest extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Search = null\r\n    this.Reset = null\r\n    this.FilterReset = null\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [],\r\n      selected: [],\r\n      open: false,\r\n      search: '',\r\n      loading: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - استانداردها`\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n    setTimeout(async () => {\r\n      this.state.header.forEach(head => {\r\n        this.setState({\r\n          [`_header_${head.name}`]: true,\r\n          selected: [...this.state.selected, head.name]\r\n        })\r\n      })\r\n    }, 50)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSelect = async (checked, name) => {\r\n    if (this.state.selected.length > 1 || checked) {\r\n      await this.setState({ [name]: checked })\r\n      let array = []\r\n      for (let value in this.state) {\r\n        if (value.includes('_header_')) {\r\n          if (this.state[value]) {\r\n            let _name = value.split('_header_')[1]\r\n            array.push(_name)\r\n          }\r\n        }\r\n      }\r\n      await this.setState({ selected: array })\r\n    }\r\n  }\r\n  handleButtonClick = () => {\r\n    this.setState(state => {\r\n      return {\r\n        open: !state.open\r\n      }\r\n    })\r\n  }\r\n  handleClickOutside = event => {\r\n    if (this.refs.container && !this.refs.container.contains(event.target)) {\r\n      this.setState({\r\n        open: false\r\n      })\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    let list = []\r\n    this.state.header.filter(head => list.push(head.name))\r\n    this.setState({ selected: list })\r\n    for (let value in this.state) {\r\n      if (value.includes('_header_')) {\r\n        this.setState({ [value]: true })\r\n      }\r\n    }\r\n    if (this.Reset !== null && this.FilterReset !== null) {\r\n      this.FilterReset()\r\n      this.Reset()\r\n    }\r\n  }\r\n  getRole = (response, status) => {\r\n    if (status === 'response') {\r\n      if (response.status === 200) {\r\n        this.setState({ role: response.data.role })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    } else {\r\n      if (response.response) {\r\n        Notification.notify(Message.text(response.response.status), 'error')\r\n      }\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else\r\n      return (\r\n        <div className='main'>\r\n          <div className='col-12 p-0'>\r\n            <div className='row m-0'>\r\n              <Sidebar\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n              />\r\n              <div\r\n                className={`${\r\n                  this.state._close\r\n                    ? 'mainSideClose'\r\n                    : 'col-xl-10 col-lg-10 p-0'\r\n                } dashboard`}\r\n              >\r\n                <Menu\r\n                  nameRole=''\r\n                  getRole={(response, status) => this.getRole(response, status)}\r\n                  nameUrl={this.props.nameUrl}\r\n                />\r\n                {this.state.upload && (\r\n                  <UploadInformation\r\n                    {...this}\r\n                    handleState={(name, value) =>\r\n                      this.setState({ [name]: value })\r\n                    }\r\n                  />\r\n                )}\r\n                <div className='w-100 row m-0 main-box-dashboard'>\r\n                  <div className='boxes-dashboard m-0 pr-0 pl-0'>\r\n                    <div className='col-12 header-index pr-0 pl-0'>\r\n                      <div className='row m-0'>\r\n                        <div className='col-xl-6 col-lg-6 col-md-8 col-12 p-0'>\r\n                          <div className='icon-header'>\r\n                            {this.Permision.handlePermision(\r\n                              this.state.role,\r\n                              ''\r\n                            ) && (\r\n                              <div className='icon'>\r\n                                <span\r\n                                  className='item'\r\n                                  onClick={() =>\r\n                                    this.setState({\r\n                                      upload: !this.state.upload\r\n                                    })\r\n                                  }\r\n                                >\r\n                                  <SystemUpdateAltIcon />\r\n                                  <span>بروز رسانی</span>\r\n                                </span>\r\n                              </div>\r\n                            )}\r\n                            <div className='icon'>\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.RemoveFilter}\r\n                              >\r\n                                <RefreshIcon />\r\n                                <span>حذف فیلترها</span>\r\n                              </span>\r\n                            </div>\r\n                            <div\r\n                              className='icon position-relative justify-content-center'\r\n                              ref='container'\r\n                            >\r\n                              <span\r\n                                className='item'\r\n                                onClick={this.handleButtonClick}\r\n                              >\r\n                                <SettingsIcon />\r\n                                <span>سفارشی سازی</span>\r\n                              </span>\r\n                              {this.state.open && (\r\n                                <Customization\r\n                                  {...this}\r\n                                  handleSelect={this.handleSelect}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <SearchTable\r\n                          {...this}\r\n                          handleState={(name, value) =>\r\n                            this.setState({ [name]: value })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='w-100 pr-3 pl-3 position-relative row m-0 justify-content-start'>\r\n                      <TableRequest\r\n                        GetFunction={e => (this.Search = e)}\r\n                        getHeader={e => this.setState({ header: e })}\r\n                        selected={this.state.selected}\r\n                        resetSearch={() => this.setState({ search: '' })}\r\n                        getReset={e => (this.Reset = e)}\r\n                        getRole={(e, name) =>\r\n                          this.setState({\r\n                            role: e,\r\n                            nameRole: name,\r\n                            disabledCreate: false\r\n                          })\r\n                        }\r\n                        FilterReset={remove => (this.FilterReset = remove)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\FG.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\ANALYZER.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\TRANSMITTERGAUGE.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\VALVES.js",[],"E:\\bidboland\\src\\Customization\\ItemMultiSelect.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\Tab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\Offices.js",[],"E:\\bidboland\\src\\tsrNew\\TSR6\\ListTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\ManageDocument.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\Tab.js",[],"E:\\bidboland\\src\\forgotPassword\\forgotPassword.js",[],"E:\\bidboland\\src\\WBS\\ActionProjectIdentify.js",[],"E:\\bidboland\\src\\WBS\\API\\FnsTables.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\PurchaseRequests.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonEdit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonSubmitFirst.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ListTab.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\Tab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\EditReqFirst.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\ItemResponsibleExpert.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ItemFirstLevel.js",[],"E:\\bidboland\\src\\tsrNew\\tsr2\\RejectReasons.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\Tab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR10\\ItemListProblems.js",["3222"],"import React from 'react'\r\n// import handleCheckText from '../../handleCheckText'\r\nimport handleString from '../../handleString'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport DatePicker from 'react-datepicker2'\r\nimport moment from 'moment-jalaali'\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded'\r\nimport handleCheckText from '../../handleCheckText'\r\nconst ItemListProblems = props => {\r\n  const check_disabled = props.check_disabled\r\n  const {\r\n    handleChangeList,\r\n    ValueTable,\r\n    handleDelete,\r\n    handlCreate,\r\n    handleDisabled_Update\r\n  } = props.API\r\n  let name_table = ValueTable()\r\n  const canCreate = handlCreate(10)\r\n  // foucs\r\n  function handleChange(e) {\r\n    let { nameList, _key } = props\r\n    const { name, value } = e.target\r\n    handleChangeList(name, value, nameList, _key)\r\n  }\r\n  function handleChangeDateList(name, value) {\r\n    let { nameList, _key } = props\r\n    handleChangeList(name, value, nameList, _key)\r\n  }\r\n  let data = props.data || {}\r\n  function handleClassName(name) {\r\n    let { foucs } = props.state\r\n    let state1 = foucs === `${name}_${props._key}`\r\n    let state2 = data[name] ? true : false\r\n    let result = state1 || state2\r\n    let className = result ? 'active' : ''\r\n    return className\r\n  }\r\n  function handleClassNameDate(name) {\r\n    let value = data[name]\r\n    let result = value ? 'active' : ''\r\n    return result\r\n  }\r\n  function CheckType(date) {\r\n    let result\r\n    if (typeof date === 'string') {\r\n      if (handleCheckText(date)) {\r\n        result = moment(date, 'jYYYY/jM/jD')\r\n      }\r\n    } else result = date || null\r\n    return result\r\n  }\r\n  function ConvertDate(date) {\r\n    const check = typeof date === 'object'\r\n    const checkString = typeof date === 'string'\r\n    let result = ''\r\n    if (check) {\r\n      date = date || {}\r\n      if (date._isValid) {\r\n        result = moment(date).local('fa').format('jYYYY/jMM/jDD')\r\n      }\r\n    } else if (checkString) {\r\n      result = date\r\n    }\r\n    return result\r\n  }\r\n  function handleRadio(name, value) {\r\n    if (!check_disabled) {\r\n      let { nameList, _key } = props\r\n      handleChangeList(name, value, nameList, _key)\r\n    }\r\n  }\r\n  const state1 = handleDisabled_Update(1)\r\n  const state2 = handleDisabled_Update(2)\r\n  const state3 = handleDisabled_Update(3)\r\n  const state4 = handleDisabled_Update(4)\r\n  function ClickRadio(value) {\r\n    if (state4) {\r\n      if (!data._not_disabled) {\r\n        if (data.PrevConfirmation === 'false') {\r\n          handleRadio('confirmation', value)\r\n        }\r\n      }\r\n    } else if (state2) {\r\n      if (!data._not_disabled) {\r\n        if (data.confirmation === 'false') {\r\n          handleRadio('confirmation', value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function handleDisabledDesc() {\r\n    let result = true\r\n    if (canCreate) {\r\n      result = check_disabled\r\n    } else if (state1) {\r\n      if (data.confirmation === 'false') {\r\n        result = false\r\n      }\r\n    } else if (state2 || state4) {\r\n      if (data._not_disabled) {\r\n        result = false\r\n      }\r\n    }else if(state3){\r\n      result = false\r\n    }\r\n    return result\r\n  }\r\n  function handleDisabledDate() {\r\n    let result = true\r\n    if (canCreate) {\r\n      result = check_disabled\r\n    } else if (state1) {\r\n      if (data.confirmation === 'false') {\r\n        result = false\r\n      }\r\n    } else if (state2 || state4) {\r\n      if (data._not_disabled) {\r\n        result = false\r\n      }\r\n    }else if(state3){\r\n      result = false\r\n    }\r\n    return result\r\n  }\r\n  function handleRemoveShow() {\r\n    let check = props.length > 0\r\n    let result = false\r\n    if (check) {\r\n      if (canCreate) {\r\n        result = true\r\n      } else if (state1) {\r\n        if (data.confirmation === 'false') {\r\n          result = true\r\n        }\r\n      } else if (state2 || state4 || state3) {\r\n        if (data._not_disabled) {\r\n          result = true\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  const dis_desc = handleDisabledDesc()\r\n  const dis_date = handleDisabledDate()\r\n  const show_remove = handleRemoveShow()\r\n  return (\r\n    <div className='w-100 mr-0 ml-0 row'>\r\n      <div className='title-password list-counter col-12 mt-3 mb-2'>\r\n        <h2 className='IranSans_Bold_FA'>{props._key + 1}</h2>\r\n        <div className='line'></div>\r\n      </div>\r\n      <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n        <div\r\n          className={`field-form persian textarea ${handleClassName(\r\n            'description'\r\n          )}`}\r\n        >\r\n          <div className='col p-0'>\r\n            <label className='textarea'>شرح اشکال</label>\r\n            <textarea\r\n              name='description'\r\n              value={handleString(data.description)}\r\n              onChange={handleChange}\r\n              onFocus={() => props.OnFocus(`description_${props._key}`)}\r\n              onBlur={props.OnBlur}\r\n              disabled={dis_desc}\r\n              readOnly={dis_desc}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n        <div className={`field-form persian ${handleClassName('followUp')}`}>\r\n          <label>پیگیری کننده</label>\r\n          <input disabled={true} readOnly={true} value={data.followUp} />\r\n        </div>\r\n      </div>\r\n      <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n        <div\r\n          className={`field-form persian ${handleClassNameDate('actionDate')}`}\r\n        >\r\n          <div className='icon-field'>\r\n            <DateRangeRoundedIcon />\r\n          </div>\r\n          <div className='col p-0'>\r\n            <label>مهلت اقدام</label>\r\n            {dis_date ? (\r\n              <input\r\n                className='IranSans_Medium_FA'\r\n                disabled={true}\r\n                readOnly={true}\r\n                value={ConvertDate(data.actionDate)}\r\n              />\r\n            ) : (\r\n              <DatePicker\r\n                persianDigits={true}\r\n                isGregorian={false}\r\n                timePicker={false}\r\n                onChange={date => handleChangeDateList('actionDate', date)}\r\n                value={CheckType(data.actionDate)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='col-xl-12 col-lg-12 col-md-12 col-12 d-flex align-items-center'>\r\n        <div className='field-radio align-items-center w-100'>\r\n          <label>تائید کننده : </label>\r\n          <div className='main-radio pr-0'>\r\n            <div className='radio-button px-1 m-1'>\r\n              <input\r\n                className='d-none'\r\n                type='radio'\r\n                id={`confirmation_${props._key}`}\r\n              />\r\n              <label\r\n                onClick={() => ClickRadio('true')}\r\n                htmlFor={`confirmation_${props._key}`}\r\n              >\r\n                {data.confirmation === 'true' ? (\r\n                  <RadioButtonCheckedIcon />\r\n                ) : (\r\n                  <RadioButtonUncheckedIcon />\r\n                )}\r\n                تائید شده\r\n              </label>\r\n            </div>\r\n            <div className='radio-button px-1 m-1'>\r\n              <input\r\n                className='d-none'\r\n                type='radio'\r\n                id={`confirmation_${props._key}`}\r\n              />\r\n              <label\r\n                onClick={() => ClickRadio('false')}\r\n                htmlFor={`confirmation_${props._key}`}\r\n              >\r\n                {data.confirmation === 'false' ? (\r\n                  <RadioButtonCheckedIcon />\r\n                ) : (\r\n                  <RadioButtonUncheckedIcon />\r\n                )}\r\n                تائید نشده\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {show_remove && (\r\n        <div className='button-add col-12 row mr-0 ml-0'>\r\n          <button\r\n            className='remove'\r\n            onClick={() => handleDelete(props.nameList, props._key)}\r\n          >\r\n            <DeleteRoundedIcon />\r\n            حذف\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default ItemListProblems\r\n","E:\\bidboland\\src\\tsrNew\\TSR9\\ButtonSubmit.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ImplementedEng.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ManageTab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\StaticList.js",[],"E:\\bidboland\\src\\tsrNew\\TSR7\\Tab.js",[],"E:\\bidboland\\src\\FAQ\\ListFiled.js",[],"E:\\bidboland\\src\\FAQ\\TabeleFAQ.js",[],"E:\\bidboland\\src\\FAQ\\FormDrag.js",[],"E:\\bidboland\\src\\index-builder\\TableListIndexes.js",[],"E:\\bidboland\\src\\TechnicalArchive\\Instrument.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\ANALYZERTable.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\FGTable.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\TRANSMITTERGAUGETable.js",[],"E:\\bidboland\\src\\TechnicalArchive\\PFD.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BuildFinalBooklet.js",[],"E:\\bidboland\\src\\TechnicalArchive\\EquipmentID\\Instrumentation\\VALVESTable.js",[],"E:\\bidboland\\src\\TechnicalArchive\\FinalEquipmentManual\\FinalEquipmentManual.js",[],"E:\\bidboland\\src\\TechnicalArchive\\3DModel.js",[],"E:\\bidboland\\src\\TechnicalArchive\\FinalEngineeringManual.js",[],"E:\\bidboland\\src\\TechnicalArchive\\DetailedEngineering.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\API.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\Body.js",[],"E:\\bidboland\\src\\ARP\\tableARP.js",[],"E:\\bidboland\\src\\TSR\\EditBeforeRequest.js",[],"E:\\bidboland\\src\\TSR\\Revisions.js",[],"E:\\bidboland\\src\\TSR\\MapDelivery.js",[],"E:\\bidboland\\src\\TSR\\Effectiveness.js",[],"E:\\bidboland\\src\\TSR\\CheckEndWork.js",[],"E:\\bidboland\\src\\TSR\\tableTSRRecord.js",[],"E:\\bidboland\\src\\TSR\\AnnouncementEndWork.js",["3223"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\n// import Sidebar from '../layout/sidebar'\r\n// import Menu from '../layout/menu'\r\nimport StaticData from '../staticData'\r\n// import DatePicker from 'react-datepicker2';\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\n// import CreatableSelect from 'react-select/creatable';\r\n// import CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\n// import AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\n// import AddIcon from '@material-ui/icons/Add';\r\nimport EngineeringItems from './EngineeringItems'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport AttachedDocument from './AttachedDocument'\r\nimport ListSign from './ListSign'\r\nimport SignTSR from './SignTSR'\r\nimport Permision from '../permision/permision'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport Dispatch from './Dispatch'\r\nimport TOCC from './TOCC'\r\nimport handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nexport default class AnnouncementEndWork extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      tsr_no: '',\r\n      created_at: '',\r\n      subject: '',\r\n      disabled: false,\r\n      note: '',\r\n      documentNumber: [],\r\n      Attachement: [],\r\n      AttachementName: [],\r\n      // executionTime: undefined,\r\n      // documentNumber: '',\r\n      implement_eng_instruction: [],\r\n      marked_documents: false,\r\n      test_result: false,\r\n      foreign_attachment: [\r\n        {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      ],\r\n      internal_attachment: [\r\n        {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      ],\r\n      listSign: [],\r\n      user_list: [],\r\n      notification_to: [],\r\n      notification_cc: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - اعلام پایان کار توسط مسئول اجرا`\r\n    this.ShowFetch()\r\n    this.props.GetShowFetch(9, this.ShowFetch)\r\n  }\r\n  async componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = await nextProps\r\n      // await this.ShowFetch()\r\n    }\r\n  }\r\n  ShowFetch = async () => {\r\n    let tsr9 = await this.props.state.tsr9,\r\n      obj = {}\r\n    if (tsr9) {\r\n      for (let value in tsr9) {\r\n        let state\r\n        if (value.includes('tsr9_')) {\r\n          state = value.split('tsr9_')[1]\r\n        } else {\r\n          state = value\r\n        }\r\n        if (state === 'foreign_attachment' || state === 'internal_attachment') {\r\n          if (this.props.show || this.props.canUpdate) {\r\n            let objDetail = tsr9[value]\r\n            if (objDetail) {\r\n              obj[state] = Object.keys(objDetail).map(fi => {\r\n                if (objDetail[fi].Attachement) {\r\n                  objDetail[fi].Attachement = Object.keys(\r\n                    objDetail[fi].Attachement\r\n                  ).map(att => {\r\n                    return objDetail[fi].Attachement[att]\r\n                  })\r\n                }\r\n                return objDetail[fi]\r\n              })\r\n            }\r\n          }\r\n        } else if (state === 'implement_eng_instruction') {\r\n          if (this.props.show || this.props.canUpdate) {\r\n            let _objDetail = tsr9[value]\r\n            if (_objDetail) {\r\n              obj[state] = Object.keys(_objDetail).map(item => {\r\n                return _objDetail[item]\r\n              })\r\n            }\r\n          } else {\r\n            // let tsr7Document = this.props.state.tsr7\r\n            let array = []\r\n            const _list = [\r\n              'mechanical',\r\n              'electrical',\r\n              'Instrumentation',\r\n              'building'\r\n            ]\r\n            _list.forEach(item => {\r\n              let tsr7 = this.props.state.tsr7\r\n              let text = `tsr7_${item}_eng_instruction`\r\n              let data = tsr7[text]\r\n              if (data) {\r\n                Object.keys(data).map(eng => {\r\n                  let dataEng = data[eng]\r\n                  if (dataEng.instruction_issuance_time) {\r\n                    let _obj = {\r\n                      group: '',\r\n                      instructionNumber: '',\r\n                      dateIssuanceInstructions:\r\n                        dataEng.instruction_issuance_time,\r\n                      wO: '',\r\n                      wODate: undefined,\r\n                      startDate: undefined,\r\n                      endDate: undefined\r\n                    }\r\n                    array.push(_obj)\r\n                  }\r\n                })\r\n              }\r\n            })\r\n            obj[state] = array\r\n          }\r\n        } else if (state === 'note') {\r\n          if (this.props.show || this.props.canUpdate) {\r\n            obj[state] = tsr9[value]\r\n          } else {\r\n            obj[state] = ''\r\n          }\r\n        } else if (state === 'marked_documents' || state === 'test_result') {\r\n          if (this.props.show || this.props.canUpdate) {\r\n            obj[state] = tsr9[value] === '1' ? true : false\r\n          } else {\r\n            obj[state] = false\r\n          }\r\n        } else {\r\n          obj[state] = tsr9[value]\r\n        }\r\n      }\r\n      let ListMandatory = await ListSign.ListMandatory.tsr9\r\n      let listSign = await this.state.listSign\r\n      ListMandatory.forEach(li => {\r\n        listSign = [...listSign, li]\r\n      })\r\n      listSign = await [...new Set(listSign)]\r\n      obj['listSign'] = await listSign\r\n      obj['role'] = await this.props.state.role\r\n      obj['canCreate'] = await this.Permision.handlePermision(\r\n        this.props.state.role,\r\n        'tsr_create'\r\n      )\r\n      await this.setState(obj)\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ foucs: name })\r\n    }\r\n  }\r\n  OnBlur = () => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ foucs: '' })\r\n    }\r\n  }\r\n  handleChange = e => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n  }\r\n  handleUploadList = async (e, files, names, parentState) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      await e.preventDefault()\r\n      await this.setState({ loading: files })\r\n      names = await names.split('_')[0]\r\n      let key = await parseInt(files.split('_')[1])\r\n      files = await files.split('_')[0]\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        let reader = await new FileReader()\r\n        await reader.readAsDataURL(e.target.files[i])\r\n        await this.GetLink(\r\n          files,\r\n          e.target.files[i],\r\n          names,\r\n          e.target.files.length,\r\n          key,\r\n          i,\r\n          parentState\r\n        )\r\n      }\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i, parentState) => {\r\n    let datareg = new FormData()\r\n    let array = this.state[parentState][key][nameState],\r\n      arrayName = this.state[parentState][key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/TSR`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let _Parent = await this.state[parentState]\r\n          let obj = await _Parent[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ [parentState]: _Parent })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  deleteFileList = async (key, num, files, names, parent) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let _Parent = await this.state[parent]\r\n      let obj = await _Parent[key]\r\n      let data1 = await obj[files]\r\n      let data2 = await obj[names]\r\n      await data1.splice(num, 1)\r\n      await data2.splice(num, 1)\r\n      await this.setState({ [parent]: _Parent })\r\n    }\r\n  }\r\n  handleChangeList = (parent, name, value, key) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let list = this.state[parent]\r\n      let obj = list[key]\r\n      obj[name] = value\r\n      this.setState({ [parent]: list })\r\n    }\r\n  }\r\n  handleAddAttach = nameState => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let obj = {}\r\n      if (nameState === 'foreign_attachment') {\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      } else if (nameState === 'internal_attachment') {\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      }\r\n      this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n    }\r\n  }\r\n  ChangeDateList = (date, key, nameState, name) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let list = this.state[nameState]\r\n      let obj = list[key]\r\n      obj[name] = getCustomFormat(date, false)\r\n      this.setState({ [nameState]: list })\r\n    }\r\n  }\r\n  handleAdd = nameState => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let obj = {\r\n        group: '',\r\n        instructionNumber: '',\r\n        dateIssuanceInstructions: undefined,\r\n        wO: '',\r\n        wODate: undefined,\r\n        startDate: undefined,\r\n        endDate: undefined\r\n      }\r\n      this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n    }\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let data = this.state[nameState]\r\n      data.splice(key, 1)\r\n      this.setState({ [nameState]: data })\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let {\r\n      implement_eng_instruction,\r\n      note,\r\n      marked_documents,\r\n      test_result,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      notification_to,\r\n      notification_cc,\r\n      listSign\r\n    } = this.state\r\n    // const foreignCheck = this.props.ForeignAttachments(foreign_attachment)\r\n    // const internalCheck = this.props.Internalَttachments(internal_attachment)\r\n    // if (internalCheck) {\r\n    const CheckTo = notification_to\r\n      ? notification_to.length === listSign.length && notification_to.length > 0\r\n      : false\r\n    const _check = CheckTo\r\n    if (_check) {\r\n      let To = Object.keys(notification_to).map(toData => {\r\n        return notification_to[toData].value\r\n      })\r\n      notification_cc = notification_cc ? notification_cc : []\r\n      let CC = Object.keys(notification_cc).map(toData => {\r\n        return notification_cc[toData].value\r\n      })\r\n      foreign_attachment = await Object.assign(\r\n        {},\r\n        Object.keys(foreign_attachment).map(_ => {\r\n          foreign_attachment[_].Attachement = Object.assign(\r\n            {},\r\n            foreign_attachment[_].Attachement\r\n          )\r\n          return foreign_attachment[_]\r\n        })\r\n      )\r\n      internal_attachment = await Object.assign({}, internal_attachment)\r\n      implement_eng_instruction = await Object.assign(\r\n        {},\r\n        implement_eng_instruction\r\n      )\r\n      let datareg = await new FormData()\r\n      await datareg.append('tsr_id', this.props.state.id)\r\n      await datareg.append(\r\n        'implement_eng_instruction',\r\n        JSON.stringify(implement_eng_instruction)\r\n      )\r\n      await datareg.append('note', note)\r\n      await datareg.append('marked_documents', marked_documents)\r\n      await datareg.append('test_result', test_result)\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await datareg.append('notification_to', To.join(','))\r\n      await datareg.append('notification_cc', CC.join(','))\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/tsr/tsr9/insert`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleDisabled = () => {\r\n    if (this.props.close) {\r\n      return true\r\n    } else if (this.props.show) {\r\n      return true\r\n    } else if (this.state.canCreate) {\r\n      return false\r\n    } else if (this.props.canUpdate) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  handleState = (name, value) => {\r\n    this.setState({ [name]: value })\r\n  }\r\n  render () {\r\n    const ShowToCC =\r\n      !this.handleDisabled() &&\r\n      this.props.state.can_do_action &&\r\n      !this.props.close\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/index-TSR`,\r\n            state: { select: 2 }\r\n          }}\r\n        />\r\n      )\r\n    } else\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <div className='w-100 row justify-content-start m-0'>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.tsr_no) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  شماره TSR\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='number'\r\n                  value={handleString(this.state.tsr_no)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.created_at) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className='icon-field'>\r\n                  <DateRangeRoundedIcon />\r\n                </div>\r\n                <div className='col p-0'>\r\n                  <label>\r\n                    تاریخ\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    type='text'\r\n                    name='number'\r\n                    value={handleString(this.state.created_at)}\r\n                    readOnly={true}\r\n                    disabled={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.subject) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  موضوع\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='subject'\r\n                  value={handleString(this.state.subject)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='w-100'>\r\n              <div className='title-password col-12 mt-3 mb-2'>\r\n                <h2 className='IranSans_Bold'>\r\n                  دستور العمل‌های مهندسی اجرا شده\r\n                </h2>\r\n                <div className='line'></div>\r\n              </div>\r\n              {this.state.implement_eng_instruction.map((data, key) => (\r\n                <EngineeringItems\r\n                  {...this}\r\n                  data={data}\r\n                  key={key}\r\n                  _key={key}\r\n                  length={this.state.implement_eng_instruction.length}\r\n                  name='implement_eng_instruction'\r\n                />\r\n              ))}\r\n              {/* <div className='button-add col-12'>\r\n                            <button\r\n                                onClick={() => this.handleAdd('implement_eng_instruction')}\r\n                            >\r\n                                <AddIcon />\r\n                                افزودن مورد جدید\r\n                            </button>\r\n                        </div> */}\r\n            </div>\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian textarea ${\r\n                  this.state.foucs === `note` ||\r\n                  handleCheckText(this.state.note)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col p-0'>\r\n                  <label className='textarea'>ملاحضات</label>\r\n                  <textarea\r\n                    className='w-100'\r\n                    type='text'\r\n                    name={`note`}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    value={handleString(this.state.note)}\r\n                    readOnly={this.handleDisabled()}\r\n                    disabled={this.handleDisabled()}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12 row m-0'>\r\n              <div className='disiplin-checkbox col-xl-3 col-lg-3 col-md-4 col-6 w-auto mt-3 mb-3'>\r\n                <div className='checkbox m-0'>\r\n                  {!this.handleDisabled() && (\r\n                    <input\r\n                      className='d-none'\r\n                      id={`marked_documents`}\r\n                      name={`marked_documents`}\r\n                      type='checkbox'\r\n                      onChange={e =>\r\n                        this.setState({ marked_documents: e.target.checked })\r\n                      }\r\n                      checked={this.state.marked_documents ? true : false}\r\n                    />\r\n                  )}\r\n                  <label className='full' htmlFor={`marked_documents`}>\r\n                    {this.state.marked_documents ? (\r\n                      <CheckBoxRoundedIcon />\r\n                    ) : (\r\n                      <CheckBoxOutlineBlankRoundedIcon />\r\n                    )}\r\n                    مدارک MarkUp شده\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className='disiplin-checkbox col-xl-3 col-lg-3 col-md-4 col-6 w-auto mt-3 mb-3'>\r\n                <div className='checkbox m-0'>\r\n                  {!this.handleDisabled() && (\r\n                    <input\r\n                      className='d-none'\r\n                      id={`test_result`}\r\n                      name={`test_result`}\r\n                      type='checkbox'\r\n                      onChange={e =>\r\n                        this.setState({ test_result: e.target.checked })\r\n                      }\r\n                      checked={this.state.test_result ? true : false}\r\n                    />\r\n                  )}\r\n                  <label className='full' htmlFor={`test_result`}>\r\n                    {this.state.test_result ? (\r\n                      <CheckBoxRoundedIcon />\r\n                    ) : (\r\n                      <CheckBoxOutlineBlankRoundedIcon />\r\n                    )}\r\n                    نتایج تست\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              out={true}\r\n              nameParent='foreign_attachment'\r\n              canCreate={!this.handleDisabled()}\r\n            />\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              nameParent='internal_attachment'\r\n              canCreate={!this.handleDisabled()}\r\n            />\r\n            {ShowToCC ? <TOCC {...this} /> : ''}\r\n            {this.props.close ? (\r\n              ''\r\n            ) : !this.handleDisabled() && this.props.state.can_do_action ? (\r\n              <React.Fragment>\r\n                <Dispatch {...this} />\r\n                <div className='submit-form col-12'>\r\n                  <button\r\n                    onClick={this.handleSubmit}\r\n                    disabled={this.state.disabled}\r\n                  >\r\n                    {this.state.loading === 'submit' ? (\r\n                      <Loading className='form-loader' />\r\n                    ) : (\r\n                      <DoneIcon />\r\n                    )}\r\n                    ثبت اطلاعات\r\n                  </button>\r\n                  <CancelButton redirect='index-TSR' />\r\n                </div>\r\n              </React.Fragment>\r\n            ) : (\r\n              <SignTSR\r\n                {...this}\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n                permision='tsr9_signs'\r\n                disabled={this.handleDisabled()}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\TSR\\tableTSR.js",[],"E:\\bidboland\\src\\TSR\\Inspector.js",["3224"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport StaticData from '../staticData'\r\nimport DatePicker from 'react-datepicker2'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\n// import RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\n// import RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n// import CreatableSelect from 'react-select/creatable';\r\n// import CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\n// import AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\n// import RequestBuy from './RequestBuy'\r\n// import AddIcon from '@material-ui/icons/Add';\r\nimport AttachedDocument from './AttachedDocument'\r\nimport ListSign from './ListSign'\r\nimport SignTSR from './SignTSR'\r\nimport Permision from '../permision/permision'\r\nimport getCustomFormat from '../getCustomFormat'\r\nimport moment from 'moment-jalaali'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport Dispatch from './Dispatch'\r\nimport TOCC from './TOCC'\r\nimport handleCheckText from '../handleCheckText'\r\nimport { ContactSupport } from '@material-ui/icons'\r\nimport handleString from '../handleString'\r\nexport default class Inspector extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    // getCustomFormat = GetCustomFormat.getCustomFormat\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      tsr_no: '',\r\n      created_at: '',\r\n      subject: '',\r\n      disabled: false,\r\n      instruction_description: '',\r\n      documentNumber: [],\r\n      Attachement: [],\r\n      AttachementName: [],\r\n      execution_date: undefined,\r\n      // typeWork: 'mechanics',\r\n      requirements: '',\r\n      exporter_group: '',\r\n      export_date: undefined,\r\n\r\n      foreign_attachment: [\r\n        {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      ],\r\n      internal_attachment: [\r\n        {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      ],\r\n      listSign: [],\r\n      canCreate: false,\r\n      user_list: [],\r\n      notification_to: [],\r\n      notification_cc: []\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - دستور العمل بارزسی فنی`\r\n    this.ShowFetch()\r\n    this.props.GetShowFetch(8, this.ShowFetch)\r\n  }\r\n  async componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = await nextProps\r\n      // await this.ShowFetch()\r\n    }\r\n  }\r\n  ShowFetch = async () => {\r\n    let tsr8 = await this.props.state.tsr8,\r\n      obj = {}\r\n    if (tsr8) {\r\n      for (let value in tsr8) {\r\n        let state\r\n        if (value.includes('tsr8_')) {\r\n          state = value.split('tsr8_')[1]\r\n        } else {\r\n          state = value\r\n        }\r\n        if (state === 'foreign_attachment' || state === 'internal_attachment') {\r\n          if (this.props.show || this.props.canUpdate) {\r\n            let objDetail = tsr8[value]\r\n            if (objDetail) {\r\n              obj[state] = Object.keys(objDetail).map(fi => {\r\n                let objSecond = objDetail[fi]\r\n                if (objSecond.Attachement) {\r\n                  objSecond.Attachement = Object.keys(\r\n                    objSecond.Attachement\r\n                  ).map(att => {\r\n                    return objSecond.Attachement[att]\r\n                  })\r\n                }\r\n                return objDetail[fi]\r\n              })\r\n            }\r\n          }\r\n        } else if (state === 'technical_review') {\r\n          if (!this.props.show) {\r\n            obj[state] = tsr8[value] === '1'\r\n          }\r\n        } else if (state === 'execution_date' || state === 'export_date') {\r\n          if (this.props.canUpdate) {\r\n            if (tsr8[value]) {\r\n              obj[state] = moment(`${tsr8[value]}`, 'jYYYY/jM/jD')\r\n            }\r\n          } else {\r\n            obj[state] = tsr8[value]\r\n          }\r\n        } else {\r\n          obj[state] = tsr8[value]\r\n        }\r\n      }\r\n      let ListMandatory = await ListSign.ListMandatory.tsr8\r\n      let listSign = await this.state.listSign\r\n      ListMandatory.forEach(li => {\r\n        listSign = [...listSign, li]\r\n      })\r\n      listSign = await [...new Set(listSign)]\r\n      obj['listSign'] = await listSign\r\n      obj['role'] = await this.props.state.role\r\n      obj['canCreate'] = await this.Permision.handlePermision(\r\n        this.props.state.role,\r\n        'tsr_create'\r\n      )\r\n      await this.setState(obj)\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ foucs: name })\r\n    }\r\n  }\r\n  OnBlur = () => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ foucs: '' })\r\n    }\r\n  }\r\n  handleChange = e => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n  }\r\n  handleUploadList = async (e, files, names, parentState) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      await e.preventDefault()\r\n      await this.setState({ loading: files })\r\n      names = await names.split('_')[0]\r\n      let key = await parseInt(files.split('_')[1])\r\n      files = await files.split('_')[0]\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        let reader = await new FileReader()\r\n        await reader.readAsDataURL(e.target.files[i])\r\n        await this.GetLink(\r\n          files,\r\n          e.target.files[i],\r\n          names,\r\n          e.target.files.length,\r\n          key,\r\n          i,\r\n          parentState\r\n        )\r\n      }\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i, parentState) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let datareg = new FormData()\r\n      let array = this.state[parentState][key][nameState],\r\n        arrayName = this.state[parentState][key][names]\r\n      datareg.append('file', file)\r\n      axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/uploadFile/TSR`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          if (i + 1 === length) {\r\n            this.setState({ loading: '' })\r\n          }\r\n          if (response.status === 200) {\r\n            await array.push(response.data.content)\r\n            await arrayName.push(file.name)\r\n            let _Parent = await this.state[parentState]\r\n            let obj = await _Parent[key]\r\n            obj[nameState] = await array\r\n            obj[names] = await arrayName\r\n            await this.setState({ [parentState]: _Parent })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  deleteFileList = async (key, num, files, names, parent) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let _Parent = await this.state[parent]\r\n      let obj = await _Parent[key]\r\n      let data1 = await obj[files]\r\n      let data2 = await obj[names]\r\n      await data1.splice(num, 1)\r\n      await data2.splice(num, 1)\r\n      await this.setState({ [parent]: _Parent })\r\n    }\r\n  }\r\n  // handleAdd = (nameState) => {\r\n  //     let obj = { number: '', description: '', date: undefined }\r\n  //     this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n  // }\r\n  handleAddAttach = nameState => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let obj = {}\r\n      if (nameState === 'foreign_attachment') {\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      } else if (nameState === 'internal_attachment') {\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      }\r\n      this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n    }\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let data = this.state[nameState]\r\n      data.splice(key, 1)\r\n      this.setState({ [nameState]: data })\r\n    }\r\n  }\r\n  handleChangeList = (parent, name, value, key) => {\r\n    if (this.state.canCreate && !this.props.show) {\r\n      let list = this.state[parent]\r\n      let obj = list[key]\r\n      obj[name] = value\r\n      this.setState({ [parent]: list })\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let {\r\n      exporter_group,\r\n      export_date,\r\n      instruction_description,\r\n      execution_date,\r\n      foreign_attachment,\r\n      internal_attachment,\r\n      notification_to,\r\n      notification_cc,\r\n      listSign\r\n    } = await this.state\r\n    const CheckTo = notification_to\r\n      ? notification_to.length === listSign.length && notification_to.length > 0\r\n      : false\r\n    const check =\r\n      handleCheckText(exporter_group) &&\r\n      export_date !== undefined &&\r\n      handleCheckText(instruction_description) &&\r\n      CheckTo\r\n    // const foreignCheck = this.props.ForeignAttachments(foreign_attachment)\r\n    // const internalCheck = this.props.Internalَttachments(internal_attachment)\r\n    if (check) {\r\n      let To = Object.keys(notification_to).map(toData => {\r\n        return notification_to[toData].value\r\n      })\r\n      notification_cc = notification_cc ? notification_cc : []\r\n      let CC = Object.keys(notification_cc).map(toData => {\r\n        return notification_cc[toData].value\r\n      })\r\n      foreign_attachment = await Object.assign(\r\n        {},\r\n        Object.keys(foreign_attachment).map(_ => {\r\n          foreign_attachment[_].Attachement = Object.assign(\r\n            {},\r\n            foreign_attachment[_].Attachement\r\n          )\r\n          return foreign_attachment[_]\r\n        })\r\n      )\r\n      internal_attachment = await Object.assign({}, internal_attachment)\r\n      this.setState({ disabled: true, loading: 'submit' })\r\n      let datareg = new FormData()\r\n      await datareg.append('tsr_id', this.props.state.id)\r\n      await datareg.append('exporter_group', exporter_group)\r\n      await datareg.append('export_date', getCustomFormat(export_date, false))\r\n      await datareg.append('instruction_description', instruction_description)\r\n      await datareg.append(\r\n        'execution_date',\r\n        getCustomFormat(execution_date, false)\r\n      )\r\n      await datareg.append(\r\n        'foreign_attachment',\r\n        JSON.stringify(foreign_attachment)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachment',\r\n        JSON.stringify(internal_attachment)\r\n      )\r\n      await datareg.append('notification_to', To.join(','))\r\n      await datareg.append('notification_cc', CC.join(','))\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/tsr/tsr8/insert`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleState = (name, value) => {\r\n    this.setState({ [name]: value })\r\n  }\r\n  handleDisabled = () => {\r\n    if (this.props.close) {\r\n      return true\r\n    } else if (this.props.show) {\r\n      return true\r\n    } else if (this.state.canCreate) {\r\n      return false\r\n    } else if (this.props.canUpdate) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  handleValueDate = name => {\r\n    let date = this.state[name]\r\n    if (date) {\r\n      if (typeof date === 'string') {\r\n        let result = moment(date, 'jYYYY/jM/jD')\r\n        return result._isValid ? result : null\r\n      } else return date\r\n    }\r\n    return null\r\n  }\r\n  render () {\r\n    const ShowToCC =\r\n      !this.handleDisabled() &&\r\n      this.props.state.can_do_action &&\r\n      !this.props.close\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/index-TSR`,\r\n            state: { select: 2 }\r\n          }}\r\n        />\r\n      )\r\n    } else\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <div className='col-12'>\r\n            <div className='box-note'>\r\n              <p className='m-0'>این صفحه توسط کارشناس TSR تکمیل می‌گردد.</p>\r\n            </div>\r\n          </div>\r\n          <div className='w-100 row justify-content-start m-0'>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.tsr_no) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  شماره TSR\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='number'\r\n                  value={handleString(this.state.tsr_no)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.created_at) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className='icon-field'>\r\n                  <DateRangeRoundedIcon />\r\n                </div>\r\n                <div className='col p-0'>\r\n                  <label>\r\n                    تاریخ\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <input\r\n                    type='text'\r\n                    name='number'\r\n                    value={handleString(this.state.created_at)}\r\n                    readOnly={true}\r\n                    disabled={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.subject) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  موضوع\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='subject'\r\n                  value={handleString(this.state.subject)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  this.state.foucs === 'exporter_group' ||\r\n                  handleCheckText(this.state.exporter_group)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  گروه صادر کننده دستورالعمل\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='exporter_group'\r\n                  value={handleString(this.state.exporter_group)}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  this.state.export_date ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className='icon-field'>\r\n                  <DateRangeRoundedIcon />\r\n                </div>\r\n                <div className='col p-0'>\r\n                  <label>\r\n                    تاریخ صدور دستورالعمل\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  {this.handleDisabled() ? (\r\n                    <input\r\n                      name='export_date'\r\n                      value={handleString(this.state.export_date)}\r\n                      disabled={true}\r\n                      readOnly={true}\r\n                    />\r\n                  ) : (\r\n                    <DatePicker\r\n                      persianDigits={true}\r\n                      isGregorian={false}\r\n                      timePicker={false}\r\n                      onChange={export_date => this.setState({ export_date })}\r\n                      value={this.handleValueDate('export_date')}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian textarea ${\r\n                  this.state.foucs === `instruction_description` ||\r\n                  handleCheckText(this.state.instruction_description)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col p-0'>\r\n                  <label className='textarea'>\r\n                    شرح دستورالعمل بارزسی\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  </label>\r\n                  <textarea\r\n                    className='w-100'\r\n                    type='text'\r\n                    name={`instruction_description`}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    value={handleString(this.state.instruction_description)}\r\n                    readOnly={this.handleDisabled()}\r\n                    disabled={this.handleDisabled()}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  this.state.execution_date ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className='icon-field'>\r\n                  <DateRangeRoundedIcon />\r\n                </div>\r\n                <div className='col p-0'>\r\n                  <label>زمان اجرا</label>\r\n                  {this.handleDisabled() ? (\r\n                    <input\r\n                      name='execution_date'\r\n                      value={handleString(this.state.execution_date)}\r\n                      readOnly={true}\r\n                      disabled={true}\r\n                    />\r\n                  ) : (\r\n                    <DatePicker\r\n                      persianDigits={true}\r\n                      isGregorian={false}\r\n                      timePicker={false}\r\n                      onChange={execution_date =>\r\n                        this.setState({ execution_date })\r\n                      }\r\n                      value={this.handleValueDate('execution_date')}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              out={true}\r\n              nameParent='foreign_attachment'\r\n              canCreate={!this.handleDisabled()}\r\n            />\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              nameParent='internal_attachment'\r\n              canCreate={!this.handleDisabled()}\r\n            />\r\n            {ShowToCC ? <TOCC {...this} /> : ''}\r\n            {this.props.close ? (\r\n              ''\r\n            ) : !this.handleDisabled() && this.props.state.can_do_action ? (\r\n              <React.Fragment>\r\n                <Dispatch {...this} />\r\n                <div className='submit-form col-12'>\r\n                  <button\r\n                    onClick={this.handleSubmit}\r\n                    disabled={this.state.disabled}\r\n                  >\r\n                    {this.state.loading === 'submit' ? (\r\n                      <Loading className='form-loader' />\r\n                    ) : (\r\n                      <DoneIcon />\r\n                    )}\r\n                    ثبت اطلاعات\r\n                  </button>\r\n                  <CancelButton redirect='index-TSR' />\r\n                </div>\r\n              </React.Fragment>\r\n            ) : (\r\n              <SignTSR\r\n                {...this}\r\n                handleState={(name, value) => this.setState({ [name]: value })}\r\n                permision='tsr8_signs'\r\n                disabled={this.handleDisabled()}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\TSR11\\ItemOffice.js",[],"E:\\bidboland\\src\\TSR\\WorkOrder.js",[],"E:\\bidboland\\src\\TSR\\GeneralEngineering.js",[],"E:\\bidboland\\src\\TSR\\committee.js",[],"E:\\bidboland\\src\\library\\TableRequest.js",["3225"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nimport StaticData from '../staticData'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport AdvanceSearch from '../Customization/advancedSearch'\r\nimport Loading from '../layout/loading'\r\nimport NotFoundTable from '../table/notFound'\r\nimport Row from '../table/Row'\r\nimport OutputFilter from '../table/OutputFilter'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n// import { Link } from 'react-router-dom'\r\n// import VisibilityIcon from '@material-ui/icons/Visibility';\r\n// import PrintIcon from '@material-ui/icons/Print';\r\nimport Permision from '../permision/permision'\r\n// import GetAppRoundedIcon from '@material-ui/icons/GetAppRounded'\r\n// import EditIcon from '@material-ui/icons/Edit'\r\nexport default class TableRequest extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      header: [\r\n        { name: 'ردیف', value: 'id' },\r\n        { name: 'شرح درخواست', value: 'description' },\r\n        { name: 'شماره ویرایش سند', value: 'doc_edition' },\r\n        { name: 'ناشر سند', value: 'doc_publisher' },\r\n        { name: 'نوع سند', value: 'doc_type' },\r\n        { name: 'سال انتشار', value: 'publish_year' },\r\n        { name: 'درخواست کننده', value: 'author' },\r\n        { name: 'تاریخ درخواست', value: 'created_at' }\r\n      ],\r\n      row: [],\r\n      contentPerPage: 25,\r\n      page: 1,\r\n      totalLength: 0,\r\n      pageNumber: 1,\r\n      search: '',\r\n      loading: 'table',\r\n      letterNumber: '',\r\n      idLetter: '',\r\n      columns: {},\r\n      open_header: '',\r\n      list: [],\r\n      textUrl: 'searchByFields',\r\n      testObject: {},\r\n      secondText: [],\r\n      textSearch: ''\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.props.getReset(this.Reset)\r\n    this.props.FilterReset(this.RemoveFilter)\r\n    this.props.GetFunction(this.handleSearch)\r\n    this.fetchData()\r\n    this.props.getHeader(this.state.header)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillUnmount () {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleSearch = async text => {\r\n    if (this.state.token) {\r\n      this.setState({ search: text, loading: 'table', textSearch: '' })\r\n      if (text === '') {\r\n        await this.setState({ page: 1 })\r\n      }\r\n      await axios\r\n        .get(\r\n          `${StaticData.domainIp}/Library/requestedList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&searchInAll=${text}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          }\r\n        )\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            if (\r\n              response.data.content.rows.length === 0 &&\r\n              response.data.content.length > 0\r\n            ) {\r\n              await this.setState({ page: 1 })\r\n              await this.handleSearch(this.state.search)\r\n            } else {\r\n              await this.setState({\r\n                totalLength: response.data.content.length,\r\n                row: response.data.content.rows,\r\n                pageNumber: response.data.content.pageNumber,\r\n                columns: response.data.content.columns\r\n                  ? response.data.content.columns\r\n                  : this.state.columns\r\n              })\r\n            }\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(async err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  fetchData = async (text = null) => {\r\n    if (this.state.token) {\r\n      await this.setState({ loading: 'table' })\r\n      let url = ''\r\n      if (text !== null) {\r\n        url = `${StaticData.domainIp}/Library/requestedList/${this.state.page}?contentPerPage=${this.state.contentPerPage}&${text}`\r\n      } else {\r\n        url = `${StaticData.domainIp}/Library/requestedList/${this.state.page}?contentPerPage=${this.state.contentPerPage}`\r\n      }\r\n      await this.setState({ loading: 'table', search: '' })\r\n      await this.props.resetSearch()\r\n      await axios\r\n        .get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.state.token}`\r\n          }\r\n        })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await this.setState({\r\n              totalLength: response.data.content.length,\r\n              row: response.data.content.rows,\r\n              pageNumber: response.data.content.pageNumber,\r\n              columns: response.data.content.columns\r\n                ? response.data.content.columns\r\n                : this.state.columns,\r\n              role: response.data.role\r\n            })\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  changeRowNumber = async e => {\r\n    await this.setState({\r\n      [e.target.name]: parseInt(e.target.value),\r\n      loading: 'table'\r\n    })\r\n\r\n    if (e.target.name === 'contentPerPage') {\r\n      await this.setState({ page: 1 })\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await 1\r\n      }\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await parseInt(e.target.value)\r\n      }\r\n    } else if (e.target.name === 'page') {\r\n      if (this.refs.contentPerPage) {\r\n        this.refs.contentPerPage.value = await this.state.contentPerPage\r\n      }\r\n      if (this.refs.page) {\r\n        this.refs.page.value = await parseInt(e.target.value)\r\n      }\r\n    }\r\n    if (this.state.search !== '') {\r\n      await this.handleSearch(this.state.search)\r\n    } else if (this.state.textSearch !== '') {\r\n      await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n    } else {\r\n      await this.fetchData()\r\n    }\r\n  }\r\n  handleClick = async status => {\r\n    switch (status) {\r\n      case 'right':\r\n        if (this.state.page > 1 && this.state.page <= this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) - 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      case 'left':\r\n        if (this.state.page < this.state.pageNumber) {\r\n          await this.setState({\r\n            page: parseInt(this.state.page) + 1,\r\n            loading: 'table'\r\n          })\r\n          if (this.state.search !== '') {\r\n            await this.handleSearch(this.state.search)\r\n          } else if (this.state.textSearch !== '') {\r\n            await this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n          } else {\r\n            await this.fetchData()\r\n          }\r\n          if (this.refs.page) {\r\n            this.refs.page.value = await parseInt(this.state.page)\r\n          }\r\n          if (this.refs.contentPerPage) {\r\n            this.refs.contentPerPage.value = await this.state.contentPerPage\r\n          }\r\n        }\r\n        break\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  handleNumberPage = () => {\r\n    let allData = []\r\n    for (let i = 0; i < this.state.pageNumber; i++) {\r\n      allData.push(<option value={i + 1}>{i + 1}</option>)\r\n    }\r\n    return allData\r\n  }\r\n  //   handleAttachment = data => {\r\n  //     let allData = []\r\n  //     for (let value in data) {\r\n  //       allData.push(data[value])\r\n  //     }\r\n  //     return allData\r\n  //   }\r\n  handleFilter = name => {\r\n    if (this.props.selected.length === 0) {\r\n      return ''\r\n    } else {\r\n      if (this.props.selected.includes(name)) {\r\n        return ''\r\n      } else {\r\n        return 'd-none'\r\n      }\r\n    }\r\n  }\r\n  RemoveFilter = () => {\r\n    if (this.refs.page && this.refs.contentPerPage) {\r\n      this.setState({ page: 1, contentPerPage: 25, textSearch: '', search: '' })\r\n      this.refs.page.value = 1\r\n      this.refs.contentPerPage.value = 10\r\n    }\r\n  }\r\n  handleClickOutside = event => {\r\n    if (\r\n      this.refs[`_header_${this.state.open_header}`] &&\r\n      !this.refs[`_header_${this.state.open_header}`].contains(event.target)\r\n    ) {\r\n      this.setState({\r\n        open_header: ''\r\n      })\r\n    }\r\n  }\r\n  Reset = async () => {\r\n    let state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('_header_')) {\r\n        state[value] = await false\r\n      }\r\n    }\r\n    state['_listData_'] = []\r\n    state['_active'] = await ''\r\n    state['objFiltered'] = await {}\r\n    await this.setState(state)\r\n    await this.fetchData()\r\n  }\r\n  _handleClick = async (index, data) => {\r\n    await this.setState({ list: [] })\r\n    if (this.state.columns && this.state.columns[data.value] && data) {\r\n      await this.setState({\r\n        open_header: index,\r\n        list: this.state.columns[data.value].split('__DARA__')\r\n      })\r\n    }\r\n  }\r\n  handleActions = data => {\r\n    let text = ''\r\n    let dbNameList = [],\r\n      listValue = []\r\n    let testObject = this.state.testObject\r\n    // let testObject = {}\r\n    let delimiter = '__DARA__'\r\n    for (let state in this.state) {\r\n      if (state.includes(delimiter)) {\r\n        let dbName = state.split(delimiter)[1]\r\n        let value = state.split(delimiter)[0].split('_header_')[1]\r\n        // testObject[dbName] = value\r\n        if (this.state[state]) {\r\n          // state = state.split(delimiter)\r\n          // dbNameList.push(dbName)\r\n          if (data.value === dbName) {\r\n            listValue.push(value)\r\n            listValue = [...new Set(listValue)]\r\n            testObject[dbName] = listValue.join(delimiter)\r\n          }\r\n        } else if (!this.state[state] && listValue.length === 0) {\r\n          delete testObject[dbName]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ testObject: testObject, loading: 'table' })\r\n    let ListText = []\r\n    for (let txt in testObject) {\r\n      dbNameList.push(txt)\r\n      let _text = `${txt}=${testObject[txt]}`\r\n      ListText.push(_text)\r\n    }\r\n    dbNameList = [...new Set(dbNameList)]\r\n    text = `${dbNameList.join(',')}&${ListText.join('&')}`\r\n    this.setState({ textSearch: text })\r\n    setTimeout(() => {\r\n      if (\r\n        Object.keys(this.state.testObject).length === 0 &&\r\n        this.state.testObject.constructor === Object\r\n      ) {\r\n        this.setState({ textSearch: '' })\r\n        this.fetchData()\r\n      } else {\r\n        this.fetchData(`searchByFields=${this.state.textSearch}`)\r\n      }\r\n      this.setState({ open_header: '' })\r\n    }, 100)\r\n  }\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        <div className='table rtl w-100 persian'>\r\n          <table>\r\n            <thead>\r\n              <tr className='header'>\r\n                {this.state.header.map((data, index) => (\r\n                  <th\r\n                    key={index}\r\n                    className={`${this.handleFilter(data.name)}`}\r\n                    onClick={() => this._handleClick(index, data)}\r\n                    ref={`_header_${index}`}\r\n                  >\r\n                    {data.name}\r\n                    <div className='filter d-inline-block'>\r\n                      <img src='img/Sort_Icon.svg' alt='filter' />\r\n                    </div>\r\n                    {this.state.open_header === index && (\r\n                      <AdvanceSearch\r\n                        key={index}\r\n                        index={index}\r\n                        data={data}\r\n                        {...this}\r\n                        rtl={true}\r\n                        handleSelect={(checked, name) =>\r\n                          this.setState({ [name]: checked })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.loading === 'table' ? (\r\n                <tr className='loading'>\r\n                  <div className='main-loading'>\r\n                    <div className='w-100 row m-0 justify-content-center'>\r\n                      <Loading className='table row m-0 justify-content-center' />\r\n                      <span className='w-100 mt-2'>در حال بارگذاری</span>\r\n                    </div>\r\n                  </div>\r\n                </tr>\r\n              ) : this.state.row.length === 0 ? (\r\n                <NotFoundTable />\r\n              ) : (\r\n                this.state.row.map((data, index) => (\r\n                  <tr\r\n                    className={this.state._active === index ? '_active' : ''}\r\n                    key={index}\r\n                    ref={`tr_${data.id}`}\r\n                  >\r\n                    <Row\r\n                      _active={this.state._active}\r\n                      _index={index}\r\n                      handleState={(name, value) =>\r\n                        this.setState({ [name]: value })\r\n                      }\r\n                      data={data}\r\n                      row={Object.keys(this.state.header).map(_ => {\r\n                        return this.state.header[_].value\r\n                      })}\r\n                      handleFilter={this.handleFilter}\r\n                      header={this.state.header}\r\n                      objFiltered={this.state.objFiltered}\r\n                      //   handleAttachment={this.handleAttachment}\r\n                      //   objLink={{ LibraryNo: data.file_address }}\r\n                      //   permision={this.Permision.handlePermision(\r\n                      //     this.state.role,\r\n                      //     'comment_sheet_download'\r\n                      //   )}\r\n                      // link={['pictures', 'attachments']}\r\n                    />\r\n                    {/* <td className='action justify-content-center'>\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'comment_sheet_download'\r\n                      ) && (\r\n                        <a\r\n                          className='mr-auto ml-auto'\r\n                          href={`#/`}\r\n                          target='_blank'\r\n                          rel='noreferrer'\r\n                        >\r\n                          <span className='edit'>\r\n                            <GetAppRoundedIcon />\r\n                          </span>\r\n                        </a>\r\n                      )}\r\n                      {this.Permision.handlePermision(\r\n                        this.state.role,\r\n                        'comment_sheet_edit'\r\n                      ) && (\r\n                        <a href={`/edit-Library-${data.id}`}>\r\n                          <span className='edit'>\r\n                            <EditIcon />\r\n                          </span>\r\n                        </a>\r\n                      )}\r\n                    </td> */}\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {this.state.row.length === 0 && this.state.search === '' ? (\r\n          ''\r\n        ) : (\r\n          <div\r\n            className={`footer-table row mr-0 ml-0 w-100 justify-content-end ${\r\n              this.state.loading === 'table' ? 'd-none' : ''\r\n            }`}\r\n          >\r\n            <div className='col-xl-7 col-lg-7 col-md-12 col-12 align-items-center row m-0 justify-content-end'>\r\n              <div className='main-item-footer'>\r\n                <div className='item num-row'>\r\n                  <label>تعداد ردیف در هر صفحه :</label>\r\n                  <select\r\n                    name='contentPerPage'\r\n                    ref='contentPerPage'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                  </select>\r\n                </div>\r\n                <div className='item'>\r\n                  <label>\r\n                    آیتم\r\n                    {this.state.totalLength <\r\n                    this.state.contentPerPage * this.state.page\r\n                      ? this.state.totalLength\r\n                      : this.state.contentPerPage * this.state.page}\r\n                    از\r\n                    {this.state.length}\r\n                    {this.state.totalLength}- صفحه\r\n                  </label>\r\n                  <select\r\n                    ref='page'\r\n                    name='page'\r\n                    onChange={e => this.changeRowNumber(e)}\r\n                  >\r\n                    {this.handleNumberPage()}\r\n                  </select>\r\n                  <label>از {this.state.pageNumber}</label>\r\n                </div>\r\n                <div className='item arrow'>\r\n                  <button onClick={() => this.handleClick('right')}>\r\n                    <ChevronRightIcon />\r\n                  </button>\r\n                  <button onClick={() => this.handleClick('left')}>\r\n                    <ChevronLeftIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\ARP\\Revisions.js",["3226"],"import React, { useState, useEffect } from 'react'\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace'\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight'\r\nimport Loading from '../layout/loading'\r\nimport handleString from '../handleString'\r\n\r\nfunction Revisions (props) {\r\n  const [list, setList] = useState([])\r\n  const [selectRev, setSelectRev] = useState('')\r\n  // const [loading, setLoading] = useState('')\r\n  const { revisions, select, id, role, loading } = props.state\r\n  useEffect(() => {\r\n    props.GetReset(() => setSelectRev(''))\r\n    if (revisions) {\r\n      if (revisions[`arp${select}`]) {\r\n        setList(revisions[`arp${select}`])\r\n      } else {\r\n        setList([])\r\n      }\r\n    } else {\r\n      setList([])\r\n    }\r\n  }, [props])\r\n  function handleRev (key, data) {\r\n    // setLoading(`${select}_${key}`)\r\n    props.handleState('loading', `${select}_${key}`)\r\n    setSelectRev(key)\r\n    props.handleRev(data)\r\n  }\r\n  async function ShowFetch () {\r\n    if (id) {\r\n      // await setLoading(`back_${select}`)\r\n      props.handleState('loading', `back_${select}`)\r\n      await props.fetchData(id, true)\r\n      await setSelectRev('')\r\n    }\r\n  }\r\n  function FoundThisRevision () {\r\n    let result = list.filter(data => data.thisRevision)\r\n    if (result) {\r\n      result = result[0]\r\n    } else return false\r\n    return result\r\n  }\r\n  if (\r\n    list.length > 1 &&\r\n    props.Permision.handlePermision(role, 'arp_revisions')\r\n  ) {\r\n    return (\r\n      <div className='col-12'>\r\n        <div className='main-revisions'>\r\n          <div className='head-rev row mx-0'>\r\n            <div className='title-rev'>\r\n              <h4>ریویژن‌های پیشین این فرم</h4>\r\n            </div>\r\n            <div className='last-rev'>\r\n              <span className='pointer' onClick={() => ShowFetch()}>\r\n                بازگشت به آخرین ریویژن (\r\n                {FoundThisRevision() ? FoundThisRevision().title : ''})\r\n                {loading === `back_${select}` ? (\r\n                  <Loading className='rev-loading' />\r\n                ) : (\r\n                  <KeyboardBackspaceIcon />\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className='list-rev'>\r\n            <ul className='ltr row mx-0 mb-0'>\r\n              {list.map(\r\n                (data, key) =>\r\n                  !data.thisRevision && (\r\n                    <li\r\n                      className={`col-xl-4 col-lg-4 col-md-6 col-12 my-1 pointer ${\r\n                        selectRev === key ? 'active' : ''\r\n                      }`}\r\n                      key={key}\r\n                      onClick={() => handleRev(key, data)}\r\n                    >\r\n                      {loading === `${select}_${key}` ? (\r\n                        <Loading className='item-rev' />\r\n                      ) : (\r\n                        <KeyboardArrowRightIcon className='mr-1 mb-1' />\r\n                      )}\r\n                      {handleString(data.title)}\r\n                    </li>\r\n                  )\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else return ''\r\n}\r\nexport default Revisions\r\n","E:\\bidboland\\src\\TSR\\PreliminaryReview.js",[],"E:\\bidboland\\src\\TSR\\HSE.js",[],"E:\\bidboland\\src\\TSR\\ProcessTsr.js",[],"E:\\bidboland\\src\\ARP\\TechnicalReport.js",[],"E:\\bidboland\\src\\TSR\\TechnicalServiceApplication.js",["3227"],"import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../staticData'\r\n// import DatePicker from 'react-datepicker2';\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\n// import CreatableSelect from 'react-select/creatable';\r\n// import CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport Loading from '../layout/loading'\r\n// import AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\nimport AttachedDocument from './AttachedDocument'\r\nimport Permision from '../permision/permision'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport SignTSR from './SignTSR'\r\nimport ListSign from './ListSign'\r\nimport handleCheckText from '../handleCheckText'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport handleString from '../handleString'\r\nexport default class TechnicalServiceApplication extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      foucs: '',\r\n      token: Cookies.get('token'),\r\n      tsr_no: '',\r\n      created_at: '',\r\n      subject: null,\r\n      subjectSuggest: [],\r\n      // documentNumber: '',\r\n      applicant_unit: 'HSE',\r\n      area: '',\r\n      operation_unit: '',\r\n      machine_no: '',\r\n      technical_problem_description: '',\r\n      execution_cause: '',\r\n      corrective_suggest: '',\r\n      improvement_type: [\r\n        {\r\n          value: 'تامین الزامات ایمنی تجهیزات و نیروی انسانی',\r\n          label: 'تامین الزامات ایمنی تجهیزات و نیروی انسانی'\r\n        },\r\n        {\r\n          value: 'رفع موانع جهت دستیابی به ظرفیت اسمی',\r\n          label: 'رفع موانع جهت دستیابی به ظرفیت اسمی'\r\n        },\r\n        {\r\n          value: 'جلوگیری از تولید محصول نامنطبق',\r\n          label: 'جلوگیری از تولید محصول نامنطبق'\r\n        },\r\n        {\r\n          value: 'بهبود در راندمان فرایندهای تولیدی',\r\n          label: 'بهبود در راندمان فرایندهای تولیدی'\r\n        },\r\n        {\r\n          value: 'رفع موانع جهت دستیابی به ظرفیت برنامه ای',\r\n          label: 'رفع موانع جهت دستیابی به ظرفیت برنامه ای'\r\n        },\r\n        {\r\n          value: 'افزایش راندمان مصرف انرژی',\r\n          label: 'افزایش راندمان مصرف انرژی'\r\n        },\r\n        {\r\n          value: 'جلوگیری از خرابی مکرر تجهیزات عملیاتی',\r\n          label: 'جلوگیری از خرابی مکرر تجهیزات عملیاتی'\r\n        },\r\n        {\r\n          value: 'بهبود در عملیات بهره برداری و تعمیرات',\r\n          label: 'بهبود در عملیات بهره برداری و تعمیرات'\r\n        },\r\n        {\r\n          value: 'کاهش و یا حذف عوامل زیان آور زیست محیطی',\r\n          label: 'کاهش و یا حذف عوامل زیان آور زیست محیطی'\r\n        },\r\n        {\r\n          value: 'افزایش ظرفیت اسمی تولید',\r\n          label: 'افزایش ظرفیت اسمی تولید'\r\n        },\r\n        {\r\n          value: 'بهبود شرایط سلامت، محیط کار و ارگونومی',\r\n          label: 'بهبود شرایط سلامت، محیط کار و ارگونومی'\r\n        },\r\n        {\r\n          value: 'تولید گریدهای جدید',\r\n          label: 'تولید گریدهای جدید'\r\n        },\r\n        {\r\n          value: 'بهبود در پایش سرویس های مبادلاتی',\r\n          label: 'بهبود در پایش سرویس های مبادلاتی'\r\n        },\r\n        {\r\n          value: 'درخواست های خدماتی، اداری و غیر فرایندی',\r\n          label: 'درخواست های خدماتی، اداری و غیر فرایندی'\r\n        }\r\n      ],\r\n      userDetail: Cookies.get('userDetail')\r\n        ? JSON.parse(Cookies.get('userDetail'))\r\n        : {},\r\n      popUp: false,\r\n      applicant_unitOther: '',\r\n      foreign_attachments: [\r\n        {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      ],\r\n      internal_attachments: [\r\n        {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      ],\r\n      canCreate: false,\r\n      role: null,\r\n      disabled: false,\r\n      redirect: false,\r\n      listSign: [],\r\n      loading: '',\r\n      rejectSelect: '',\r\n      user_list: [],\r\n      notification_to: [],\r\n      notification_cc: []\r\n      // verified: false\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - صدور درخواست توسط متقاضی`\r\n    if (this.props.GetShowFetch) {\r\n      this.props.GetShowFetch(1, this.ShowFetch)\r\n    }\r\n    if (this.props.show || this.props.canUpdate) {\r\n      this.ShowFetch()\r\n    } else {\r\n      this.fetchData()\r\n    }\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      if (this.props.show || this.props.canUpdate) {\r\n        this.ShowFetch()\r\n      }\r\n    }\r\n  }\r\n  ShowFetch = () => {\r\n    let { tsr1, status, part, role, id } = this.props.state,\r\n      obj = {}\r\n    if (tsr1) {\r\n      for (let value in tsr1) {\r\n        let state = value.split('tsr1_')[1]\r\n        if (\r\n          state === 'foreign_attachments' ||\r\n          state === 'internal_attachments'\r\n        ) {\r\n          let detail = tsr1[value]\r\n          if (detail) {\r\n            let array = Object.keys(detail).map(fi => {\r\n              if (detail[fi].Attachement) {\r\n                if (Object.keys(detail[fi].Attachement).length) {\r\n                  detail[fi].Attachement = Object.keys(\r\n                    detail[fi].Attachement\r\n                  ).map(att => {\r\n                    return detail[fi].Attachement[att]\r\n                  })\r\n                } else {\r\n                  detail[fi].Attachement = []\r\n                }\r\n              }\r\n              return detail[fi]\r\n            })\r\n            obj[state] = array\r\n          }\r\n        } else if (state === 'improvement_type') {\r\n          let list = tsr1[value].split(',')\r\n          if (list) {\r\n            list.forEach(item => {\r\n              obj[`_improvement_${item}`] = true\r\n            })\r\n          }\r\n        } else if (state === 'applicant_unit') {\r\n          const check =\r\n            tsr1[value] === 'HSE' ||\r\n            tsr1[value] === 'bahre' ||\r\n            tsr1[value] === 'repair'\r\n          if (check) {\r\n            obj[state] = tsr1[value]\r\n            obj['applicant_unitOther'] = ''\r\n          } else {\r\n            obj[state] = 'other'\r\n            obj['applicant_unitOther'] = tsr1[value]\r\n          }\r\n        } else if (state === 'notification_to' || state === 'notification_cc') {\r\n          let _list = []\r\n          let array = tsr1['tsr1_user_list']\r\n          if (array) {\r\n            let selected = tsr1[value]\r\n            if (selected) {\r\n              let arraySelected = selected.split(',')\r\n              if (arraySelected) {\r\n                arraySelected.forEach(id => {\r\n                  let filter = array.filter(item => item.value === id)\r\n                  if (filter) {\r\n                    _list.push(filter[0])\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          }\r\n          obj[state] = _list\r\n        } else if (state === 'tsr_no') {\r\n          obj['_tsr_no'] = handleString(tsr1[value])\r\n        } else {\r\n          obj[state] = tsr1[value]\r\n        }\r\n      }\r\n      let ListMandatory = ListSign.ListMandatory.tsr1\r\n      let listSign = this.state.listSign\r\n      ListMandatory.forEach(li => {\r\n        listSign = [...listSign, li]\r\n      })\r\n      listSign = [...new Set(listSign)]\r\n      obj['part'] = part\r\n      obj['status'] = status\r\n      obj['listSign'] = listSign\r\n      obj['role'] = role\r\n      if (this.props.canUpdate) {\r\n        obj['subject'] = {\r\n          value: tsr1.tsr1_subject,\r\n          label: tsr1.tsr1_subject\r\n        }\r\n      } else {\r\n        obj['subject'] = tsr1.tsr1_subject\r\n      }\r\n      obj['canCreate'] = this.Permision.handlePermision(role, 'tsr_create')\r\n      if (\r\n        tsr1.subjectSuggest &&\r\n        tsr1.subjectSuggest.length &&\r\n        this.props.canUpdate\r\n      ) {\r\n        obj['subjectSuggest'] = tsr1.subjectSuggest\r\n      }\r\n      this.setState(obj)\r\n    }\r\n  }\r\n  fetchData = () => {\r\n    axios\r\n      .get(`${StaticData.domainIp}/tsr/getFirstDetailForCreate`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.state.token}`\r\n        }\r\n      })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          const state = await response.data.content\r\n          state['role'] = await response.data.role\r\n          // state['verified'] = await true\r\n          state['canCreate'] = await this.Permision.handlePermision(\r\n            response.data.role,\r\n            'tsr_create'\r\n          )\r\n          let ListMandatory = ListSign.ListMandatory.tsr1\r\n          let listSign = this.state.listSign\r\n          ListMandatory.forEach(li => {\r\n            if (li.value === this.props.part) {\r\n              listSign = [...listSign, li]\r\n            }\r\n          })\r\n          state['listSign'] = await listSign\r\n          await this.setState(state)\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  OnFocus = name => {\r\n    if (this.state.canCreate) {\r\n      this.setState({ foucs: name })\r\n    }\r\n  }\r\n  OnBlur = () => {\r\n    if (this.state.canCreate) {\r\n      this.setState({ foucs: '' })\r\n    }\r\n  }\r\n  handleChange = e => {\r\n    if (this.state.canCreate) {\r\n      this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n  }\r\n  handleUploadList = async (e, files, names, parentState) => {\r\n    if (this.state.canCreate) {\r\n      await e.preventDefault()\r\n      await this.setState({ loading: files })\r\n      names = await names.split('_')[0]\r\n      let key = await parseInt(files.split('_')[1])\r\n      files = await files.split('_')[0]\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        let reader = await new FileReader()\r\n        await reader.readAsDataURL(e.target.files[i])\r\n        await this.GetLink(\r\n          files,\r\n          e.target.files[i],\r\n          names,\r\n          e.target.files.length,\r\n          key,\r\n          i,\r\n          parentState\r\n        )\r\n      }\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, key, i, parentState) => {\r\n    let datareg = new FormData()\r\n    let array = this.state[parentState][key][nameState],\r\n      arrayName = this.state[parentState][key][names]\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/TSR1`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          await array.push(response.data.content)\r\n          await arrayName.push(file.name)\r\n          let _Parent = await this.state[parentState]\r\n          let obj = await _Parent[key]\r\n          obj[nameState] = await array\r\n          obj[names] = await arrayName\r\n          await this.setState({ [parentState]: _Parent })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  deleteFileList = async (key, num, files, names, parent) => {\r\n    if (this.state.canCreate) {\r\n      let _Parent = await this.state[parent]\r\n      let obj = await _Parent[key]\r\n      let data1 = await obj[files]\r\n      let data2 = await obj[names]\r\n      await data1.splice(num, 1)\r\n      await data2.splice(num, 1)\r\n      await this.setState({ [parent]: _Parent })\r\n    }\r\n  }\r\n  handleCheck = e => {\r\n    if (this.state.canCreate) {\r\n      this.setState({\r\n        [e.target.name]: e.target.checked\r\n      })\r\n    }\r\n  }\r\n  handleChangeList = (parent, name, value, key) => {\r\n    if (this.state.canCreate) {\r\n      let list = this.state[parent]\r\n      let obj = list[key]\r\n      obj[name] = value\r\n      this.setState({ [parent]: list })\r\n    }\r\n  }\r\n  handleAddAttach = nameState => {\r\n    if (this.state.canCreate) {\r\n      let obj = {}\r\n      if (nameState === 'foreign_attachments') {\r\n        obj = {\r\n          documentNumber: '',\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: '',\r\n          AttachementName: [],\r\n          Attachement: []\r\n        }\r\n      } else if (nameState === 'internal_attachments') {\r\n        obj = {\r\n          documentNumber: null,\r\n          degreeTitle: '',\r\n          numberPages: '',\r\n          descriptionAttachment: ''\r\n        }\r\n      }\r\n      this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n    }\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    if (this.state.canCreate) {\r\n      let data = this.state[nameState]\r\n      data.splice(key, 1)\r\n      this.setState({ [nameState]: data })\r\n    }\r\n  }\r\n  handleSubmit = async () => {\r\n    let {\r\n      subject,\r\n      applicant_unit,\r\n      applicant_unitOther,\r\n      area,\r\n      operation_unit,\r\n      machine_no,\r\n      foreign_attachments,\r\n      internal_attachments,\r\n      technical_problem_description,\r\n      execution_cause,\r\n      corrective_suggest,\r\n      notification_to,\r\n      notification_cc\r\n    } = this.state\r\n    const check =\r\n      handleCheckText(area) &&\r\n      handleCheckText(operation_unit) &&\r\n      handleCheckText(machine_no) &&\r\n      (notification_to ? notification_to.length === 2 : false)\r\n    // notification_to.length === 2\r\n    const foreignCheck = this.props.ForeignAttachments(foreign_attachments)\r\n    // const internalCheck = this.props.Internalَttachments(internal_attachments)\r\n    const checkSubject = subject ? handleCheckText(subject.value) : false\r\n    const checkApplicant_unit =\r\n      applicant_unit === 'other' ? handleCheckText(applicant_unitOther) : true\r\n    if (check && checkSubject && checkApplicant_unit && foreignCheck) {\r\n      let To = Object.keys(notification_to).map(toData => {\r\n        return notification_to[toData].value\r\n      })\r\n      notification_cc = notification_cc ? notification_cc : []\r\n      let CC = Object.keys(notification_cc).map(toData => {\r\n        return notification_cc[toData].value\r\n      })\r\n      await this.setState({ loading: 'submit', disabled: true })\r\n      foreign_attachments = await Object.assign(\r\n        {},\r\n        Object.keys(foreign_attachments).map(_ => {\r\n          foreign_attachments[_].Attachement = Object.assign(\r\n            {},\r\n            foreign_attachments[_].Attachement\r\n          )\r\n          return foreign_attachments[_]\r\n        })\r\n      )\r\n      internal_attachments = await Object.assign({}, internal_attachments)\r\n      let improvement_list = await []\r\n      Object.keys(this.state).map(state => {\r\n        if (state.includes('_improvement_')) {\r\n          let value = state.split('_improvement_')[1]\r\n          if (this.state[state]) {\r\n            improvement_list.push(value)\r\n          }\r\n        }\r\n        return true\r\n      })\r\n      let datareg = await new FormData()\r\n      await datareg.append('subject', subject.value)\r\n      await datareg.append(\r\n        'applicant_unit',\r\n        applicant_unit === 'other' ? applicant_unitOther : applicant_unit\r\n      )\r\n      await datareg.append('area', area)\r\n      await datareg.append('operation_unit', operation_unit)\r\n      await datareg.append('machine_no', machine_no)\r\n      await datareg.append(\r\n        'technical_problem_description',\r\n        technical_problem_description\r\n      )\r\n      await datareg.append('execution_cause', execution_cause)\r\n      await datareg.append('corrective_suggest', corrective_suggest)\r\n      await datareg.append(\r\n        'foreign_attachments',\r\n        JSON.stringify(foreign_attachments)\r\n      )\r\n      await datareg.append(\r\n        'internal_attachments',\r\n        JSON.stringify(internal_attachments)\r\n      )\r\n      await datareg.append('improvement_type', improvement_list.join(','))\r\n      await datareg.append('notification_to', To.join(','))\r\n      await datareg.append('notification_cc', CC.join(','))\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/tsr/insert`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      this.setState({ loading: '' })\r\n\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleEdit = async () => {\r\n    let {\r\n      subject,\r\n      applicant_unit,\r\n      applicant_unitOther,\r\n      area,\r\n      operation_unit,\r\n      machine_no,\r\n      foreign_attachments,\r\n      internal_attachments,\r\n      technical_problem_description,\r\n      execution_cause,\r\n      corrective_suggest,\r\n      notification_to,\r\n      notification_cc\r\n    } = this.state\r\n    const { id } = this.props.state\r\n    const check =\r\n      handleCheckText(area) &&\r\n      handleCheckText(operation_unit) &&\r\n      handleCheckText(machine_no) &&\r\n      notification_to.length === 2\r\n    const foreignCheck = this.props.ForeignAttachments(foreign_attachments)\r\n    // const internalCheck = this.props.Internalَttachments(internal_attachments)\r\n    const checkSubject = subject ? handleCheckText(subject.value) : false\r\n    const checkApplicant_unit =\r\n      applicant_unit === 'other' ? handleCheckText(applicant_unitOther) : true\r\n    if (\r\n      check &&\r\n      foreignCheck &&\r\n      checkSubject &&\r\n      checkApplicant_unit\r\n      // internalCheck\r\n    ) {\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      let To = Object.keys(notification_to).map(toData => {\r\n        return notification_to[toData].value\r\n      })\r\n      let CC = Object.keys(notification_cc).map(toData => {\r\n        return notification_cc[toData].value\r\n      })\r\n      foreign_attachments = Object.assign(\r\n        {},\r\n        Object.keys(foreign_attachments).map(_ => {\r\n          foreign_attachments[_].Attachement = Object.assign(\r\n            {},\r\n            foreign_attachments[_].Attachement\r\n          )\r\n          return foreign_attachments[_]\r\n        })\r\n      )\r\n      internal_attachments = Object.assign({}, internal_attachments)\r\n      let improvement_list = []\r\n      Object.keys(this.state).map(state => {\r\n        if (state.includes('_improvement_')) {\r\n          let value = state.split('_improvement_')[1]\r\n          if (this.state[state]) {\r\n            improvement_list.push(value)\r\n          }\r\n        }\r\n        return true\r\n      })\r\n      let datareg = new FormData()\r\n      datareg.append('tsr_id', id)\r\n      datareg.append('subject', subject.value)\r\n      datareg.append(\r\n        'applicant_unit',\r\n        applicant_unit === 'other' ? applicant_unitOther : applicant_unit\r\n      )\r\n      datareg.append('area', area)\r\n      datareg.append('operation_unit', operation_unit)\r\n      datareg.append('machine_no', machine_no)\r\n      datareg.append(\r\n        'technical_problem_description',\r\n        technical_problem_description\r\n      )\r\n      datareg.append('execution_cause', execution_cause)\r\n      datareg.append('corrective_suggest', corrective_suggest)\r\n      datareg.append('foreign_attachments', JSON.stringify(foreign_attachments))\r\n      datareg.append(\r\n        'internal_attachments',\r\n        JSON.stringify(internal_attachments)\r\n      )\r\n      datareg.append('improvement_type', improvement_list.join(','))\r\n      await datareg.append('notification_to', To.join(','))\r\n      await datareg.append('notification_cc', CC.join(','))\r\n      await axios({\r\n        method: 'post',\r\n        url: `${StaticData.domainIp}/tsr/update`,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              await this.setState({ redirect: true, disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            this.setState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ loading: '', disabled: false })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  handleShowButtonSubmit = () => {\r\n    // if (!this.props.close) {\r\n    if (this.props.canUpdate) {\r\n      return (\r\n        <div className='submit-form col-12'>\r\n          <button\r\n            className='continue mt-3'\r\n            onClick={this.handleEdit}\r\n            disabled={this.state.disabled}\r\n          >\r\n            {this.state.loading === 'submit' ? (\r\n              <Loading className='form-loader' />\r\n            ) : (\r\n              <EditIcon />\r\n            )}\r\n            ویرایش اطلاعات\r\n          </button>\r\n          <CancelButton redirect='index-TSR' />\r\n        </div>\r\n      )\r\n    } else if (!this.props.show && this.state.canCreate) {\r\n      return (\r\n        <div className='submit-form col-12'>\r\n          <button\r\n            className='mt-3'\r\n            onClick={this.handleSubmit}\r\n            disabled={this.state.disabled}\r\n          >\r\n            {this.state.loading === 'submit' ? (\r\n              <Loading className='form-loader' />\r\n            ) : (\r\n              <DoneIcon />\r\n            )}\r\n            ثبت اطلاعات\r\n          </button>\r\n          <CancelButton redirect='index-TSR' />\r\n        </div>\r\n      )\r\n    } else if (this.props.show) {\r\n      return (\r\n        <SignTSR\r\n          {...this}\r\n          handleState={(name, value) => this.setState({ [name]: value })}\r\n          permision='tsr1_signs'\r\n          disabled={this.handleDisabled()}\r\n        />\r\n      )\r\n    } else return ''\r\n    // }\r\n  }\r\n  handleChangeSelect = (name, newValue) => {\r\n    let filter = newValue ? newValue.filter(data => !data.__isNew__) : []\r\n    const check = name === 'notification_to' ? filter.length < 3 : true\r\n    if (check) {\r\n      this.setState({\r\n        [name]: filter\r\n      })\r\n    }\r\n  }\r\n  handleDisabled = () => {\r\n    if (this.props.close) {\r\n      return true\r\n    } else if (this.props.show) {\r\n      return true\r\n    } else if (this.state.canCreate) {\r\n      return false\r\n    } else if (this.props.canUpdate) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  render () {\r\n    if (this.state.token === undefined) {\r\n      return <Redirect to='/Login' />\r\n    } else if (this.state.redirect) {\r\n      return <Redirect to='index-TSR' />\r\n    } else\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <div className='w-100 row justify-content-start m-0'>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state._tsr_no) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>شماره TSR</label>\r\n                <input\r\n                  type='text'\r\n                  name='_tsr_no'\r\n                  value={handleString(this.state._tsr_no)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  handleCheckText(this.state.created_at) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <div className='icon-field'>\r\n                  <DateRangeRoundedIcon />\r\n                </div>\r\n                <div className='col p-0'>\r\n                  <label>تاریخ درخواست</label>\r\n                  <input\r\n                    type='text'\r\n                    name='number'\r\n                    value={handleString(this.state.created_at)}\r\n                    readOnly={true}\r\n                    disabled={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              {!this.handleDisabled() ? (\r\n                <div className='field-form selectBox'>\r\n                  <CreatableSelect\r\n                    value={this.state.subject ? this.state.subject : ''}\r\n                    onChange={newValue =>\r\n                      !this.handleDisabled() &&\r\n                      this.setState({ subject: newValue })\r\n                    }\r\n                    options={this.state.subjectSuggest}\r\n                    readOnly={this.state.canCreate}\r\n                    placeholder={\r\n                      <label className='rtl'>\r\n                        موضوع\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                    }\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  className={`field-form persian ${\r\n                    handleCheckText(this.state.subject) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  <div className='col p-0'>\r\n                    <label className='rtl'>\r\n                      موضوع\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    </label>\r\n                    <input\r\n                      type='text'\r\n                      name={`subject`}\r\n                      value={handleString(this.state.subject)}\r\n                      readOnly={true}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className='col-xl-12 col-lg-6 col-md-12 col-12 d-flex align-items-center'>\r\n              <div className='field-radio w-100'>\r\n                <label>\r\n                  واحد درخواست کننده\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <div className='main-radio pr-0'>\r\n                  <div className='radio-button mr-1 ml-1'>\r\n                    {this.handleDisabled() ? (\r\n                      ''\r\n                    ) : (\r\n                      <input\r\n                        className='d-none'\r\n                        type='radio'\r\n                        id='HSE'\r\n                        onClick={() =>\r\n                          this.setState({\r\n                            applicant_unit: 'HSE',\r\n                            applicant_unitOther: ''\r\n                          })\r\n                        }\r\n                      />\r\n                    )}\r\n                    <label\r\n                      htmlFor='HSE'\r\n                      className={this.handleDisabled() ? 'disabled' : ''}\r\n                    >\r\n                      {this.state.applicant_unit === 'HSE' ? (\r\n                        <RadioButtonCheckedIcon />\r\n                      ) : (\r\n                        <RadioButtonUncheckedIcon />\r\n                      )}\r\n                      HSE\r\n                    </label>\r\n                  </div>\r\n                  <div className='radio-button mr-1 ml-1'>\r\n                    {this.handleDisabled() ? (\r\n                      ''\r\n                    ) : (\r\n                      <input\r\n                        className='d-none'\r\n                        type='radio'\r\n                        id='bahre'\r\n                        onClick={() =>\r\n                          this.setState({\r\n                            applicant_unit: 'bahre',\r\n                            applicant_unitOther: ''\r\n                          })\r\n                        }\r\n                      />\r\n                    )}\r\n                    <label\r\n                      htmlFor='bahre'\r\n                      className={this.handleDisabled() ? 'disabled' : ''}\r\n                    >\r\n                      {this.state.applicant_unit === 'bahre' ? (\r\n                        <RadioButtonCheckedIcon />\r\n                      ) : (\r\n                        <RadioButtonUncheckedIcon />\r\n                      )}\r\n                      بهره برداری\r\n                    </label>\r\n                  </div>\r\n                  <div className='radio-button mr-1 ml-1'>\r\n                    {this.handleDisabled() ? (\r\n                      ''\r\n                    ) : (\r\n                      <input\r\n                        className='d-none'\r\n                        type='radio'\r\n                        id='repair'\r\n                        onClick={() =>\r\n                          this.setState({\r\n                            applicant_unit: 'repair',\r\n                            applicant_unitOther: ''\r\n                          })\r\n                        }\r\n                      />\r\n                    )}\r\n                    <label\r\n                      htmlFor='repair'\r\n                      className={this.handleDisabled() ? 'disabled' : ''}\r\n                    >\r\n                      {this.state.applicant_unit === 'repair' ? (\r\n                        <RadioButtonCheckedIcon />\r\n                      ) : (\r\n                        <RadioButtonUncheckedIcon />\r\n                      )}\r\n                      تعمیرات\r\n                    </label>\r\n                  </div>\r\n                  <div className='radio-button mr-1 ml-1'>\r\n                    {this.handleDisabled() ? (\r\n                      ''\r\n                    ) : (\r\n                      <input\r\n                        className='d-none'\r\n                        type='radio'\r\n                        id='other'\r\n                        onClick={() =>\r\n                          this.setState({ applicant_unit: 'other' })\r\n                        }\r\n                      />\r\n                    )}\r\n                    <label\r\n                      htmlFor='other'\r\n                      className={this.handleDisabled() ? 'disabled' : ''}\r\n                    >\r\n                      {this.state.applicant_unit === 'other' ? (\r\n                        <RadioButtonCheckedIcon />\r\n                      ) : (\r\n                        <RadioButtonUncheckedIcon />\r\n                      )}\r\n                      سایر\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.applicant_unit === 'other' && (\r\n              <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n                <div\r\n                  className={`field-form persian ${\r\n                    this.state.foucs === `applicant_unitOther` ||\r\n                    handleCheckText(this.state.applicant_unitOther)\r\n                      ? 'active'\r\n                      : ''\r\n                  }`}\r\n                >\r\n                  <div className='col p-0'>\r\n                    <label>\r\n                      واحد درخواست کننده\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    </label>\r\n                    <input\r\n                      type='text'\r\n                      name={`applicant_unitOther`}\r\n                      onFocus={e => this.OnFocus(e.target.name)}\r\n                      onBlur={this.OnBlur}\r\n                      onChange={this.handleChange}\r\n                      value={handleString(this.state.applicant_unitOther)}\r\n                      readOnly={this.handleDisabled()}\r\n                      disabled={this.handleDisabled()}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian pl-1 ${\r\n                  this.state.foucs === `area` ||\r\n                  handleCheckText(this.state.area)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  ناحیه\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name={`area`}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  value={handleString(this.state.area)}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian pl-1 ${\r\n                  this.state.foucs === `operation_unit` ||\r\n                  handleCheckText(this.state.operation_unit)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  واحد عملیاتی\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name={`operation_unit`}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  value={handleString(this.state.operation_unit)}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  this.state.foucs === 'machine_no' ||\r\n                  handleCheckText(this.state.machine_no)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  شماره دستگاه\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name='machine_no'\r\n                  value={handleString(this.state.machine_no)}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian textarea ${\r\n                  this.state.foucs === `technical_problem_description` ||\r\n                  handleCheckText(this.state.technical_problem_description)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col p-0'>\r\n                  <label className='textarea'>شرح اشکالات فنی</label>\r\n                  <textarea\r\n                    className='w-100'\r\n                    type='text'\r\n                    name={`technical_problem_description`}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    value={handleString(\r\n                      this.state.technical_problem_description\r\n                    )}\r\n                    readOnly={this.handleDisabled()}\r\n                    disabled={this.handleDisabled()}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian textarea ${\r\n                  this.state.foucs === `execution_cause` ||\r\n                  handleCheckText(this.state.execution_cause)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col p-0'>\r\n                  <label className='textarea'>\r\n                    ریشه‌یابی و تجزیه و تحلیل علل و توجیه لزوم اجرا\r\n                  </label>\r\n                  <textarea\r\n                    className='w-100'\r\n                    type='text'\r\n                    name={`execution_cause`}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    value={handleString(this.state.execution_cause)}\r\n                    readOnly={this.handleDisabled()}\r\n                    disabled={this.handleDisabled()}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian textarea ${\r\n                  this.state.foucs === `corrective_suggest` ||\r\n                  handleCheckText(this.state.corrective_suggest)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col p-0'>\r\n                  <label className='textarea'>پیشنهاد اصلاحی</label>\r\n                  <textarea\r\n                    className='w-100'\r\n                    type='text'\r\n                    name={`corrective_suggest`}\r\n                    onFocus={e => this.OnFocus(e.target.name)}\r\n                    onBlur={this.OnBlur}\r\n                    onChange={this.handleChange}\r\n                    value={handleString(this.state.corrective_suggest)}\r\n                    readOnly={this.handleDisabled()}\r\n                    disabled={this.handleDisabled()}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              out={true}\r\n              nameParent='foreign_attachments'\r\n              canCreate={!this.handleDisabled()}\r\n              require={true}\r\n            />\r\n            <AttachedDocument\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              nameParent='internal_attachments'\r\n              canCreate={!this.handleDisabled()}\r\n            />\r\n            <div className='title-password col-12 mt-3 mb-2'>\r\n              <h2 className='IranSans_Bold'>نوع بهبود</h2>\r\n              <div className='line'></div>\r\n            </div>\r\n            {this.state.improvement_type.map((data, key) => (\r\n              <div\r\n                className='disiplin-checkbox col-xl-6 col-lg-6 col-md-4 col-6 w-auto mt-3 mb-3'\r\n                key={key}\r\n              >\r\n                <div className='checkbox m-0'>\r\n                  {this.handleDisabled() ? (\r\n                    ''\r\n                  ) : (\r\n                    <input\r\n                      className='d-none'\r\n                      id={`_improvement_${data.value}`}\r\n                      name={`_improvement_${data.value}`}\r\n                      type='checkbox'\r\n                      onChange={e => this.handleCheck(e)}\r\n                      checked={\r\n                        this.state[`_improvement_${data.value}`] ? true : false\r\n                      }\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className={`full ${\r\n                      this.handleDisabled() ? 'disabled' : ''\r\n                    }`}\r\n                    htmlFor={`_improvement_${data.value}`}\r\n                  >\r\n                    {this.state[`_improvement_${data.value}`] ? (\r\n                      <CheckBoxRoundedIcon />\r\n                    ) : (\r\n                      <CheckBoxOutlineBlankRoundedIcon />\r\n                    )}\r\n                    {data.label}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {this.props.showToCC ||\r\n            (!this.props.close && this.props.canUpdate) ? (\r\n              <div className='w-100 row mx-0'>\r\n                <div className='title-password col-12 mt-3 mb-2'>\r\n                  <h2 className='IranSans_Bold'>تخصیص شخص بررسی کننده</h2>\r\n                  <div className='line'></div>\r\n                </div>\r\n                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                  <div className='field-form selectBox'>\r\n                    <CreatableSelect\r\n                      isMulti\r\n                      onChange={newValue =>\r\n                        this.handleChangeSelect('notification_to', newValue)\r\n                      }\r\n                      options={this.state.user_list}\r\n                      value={this.state.notification_to}\r\n                      placeholder={\r\n                        <label className='ltr'>\r\n                          TO\r\n                          <span className='star IranSans_Bold'>*</span>\r\n                        </label>\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className='col-12 px-0'>\r\n                    <div className='box-note'>\r\n                      <p className='m-0'>\r\n                        جهت ارسال فرم به منظور دریافت امضاهای بعدی از بخش TO\r\n                        استفاده نمائید. (رئیس واحد، رئیس اداره/امور)\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n                  <div className='field-form selectBox'>\r\n                    <CreatableSelect\r\n                      isMulti\r\n                      onChange={newValue =>\r\n                        this.handleChangeSelect('notification_cc', newValue)\r\n                      }\r\n                      options={this.state.user_list}\r\n                      value={this.state.notification_cc}\r\n                      placeholder={<label>CC</label>}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n            {this.handleShowButtonSubmit()}\r\n          </div>\r\n          {this.state.popUp && (\r\n            <Sign\r\n              userDetail={this.state.userDetail}\r\n              close={e => this.setState({ popUp: e })}\r\n            />\r\n          )}\r\n        </div>\r\n      )\r\n  }\r\n}\r\nclass Sign extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='backGroundPopup' onClick={() => this.props.close(false)}>\r\n        <div className='col-xl-6 col-lg-10 col-12'>\r\n          {this.props.userDetail.sign ? (\r\n            <img src={this.props.userDetail.sign} alt='sign' />\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\ARP\\CorrectiveActions.js",["3228","3229"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport { Redirect } from 'react-router-dom'\r\nimport StaticData from '../staticData'\r\n// import DatePicker from 'react-datepicker2';\r\n// import DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded';\r\n// import Clock from '../clock/clock'\r\n// import QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\r\nimport SimilarEvents from './SimilarEvents'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport ListSign from './ListSign'\r\nimport SignARP from './SignARP'\r\nimport Permision from '../permision/permision'\r\nimport Loading from '../layout/loading'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport handleCheckText from '../handleCheckText'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport HeadTopFirst from './HeadTopFirst'\r\nimport HanldeToCC from './HanldeToCC'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport handleString from '../handleString'\r\nexport default class CorrectiveActions extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      documentNumber: '',\r\n      arp_no: '',\r\n      created_at: undefined,\r\n      unit: '',\r\n      numberLabel: '',\r\n      equipment_name: '',\r\n      dateAccident: undefined,\r\n      _corrective_actions: [\r\n        { description: '', responsible: [], status: '', action: '' }\r\n      ],\r\n      listSign: [],\r\n      responsible_list: [\r\n        { label: 'خدمات فنی', value: 'خدمات فنی' },\r\n        { label: 'بهره برداری', value: 'بهره برداری' },\r\n        { label: 'تعمیرات', value: 'تعمیرات' },\r\n        { label: 'HSE', value: 'HSE' }\r\n      ],\r\n      attachment: [],\r\n      attachmentName: [],\r\n      canCreate: false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.title = `${StaticData.Title} - اقدامات اصلاحی جهت جلوگیری از حوادث مشابه`\r\n    this.ShowFetch()\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      this.ShowFetch()\r\n    }\r\n  }\r\n  ShowFetch = async () => {\r\n    const { state } = await this.props\r\n    if (state) {\r\n      state['canCreate'] = await state.secretary_committee_allow\r\n      for (let value in state) {\r\n        if (value === 'event_type') {\r\n          let _data = state[value]\r\n          const checkOther =\r\n            _data !== 'انسانی' &&\r\n            _data !== 'خسارت به تجهیزات' &&\r\n            _data !== 'Total S/D' &&\r\n            _data !== 'زیست محیطی' &&\r\n            _data !== 'نشتی مواد' &&\r\n            _data !== 'آتش سوزی'\r\n          if (checkOther) {\r\n            if (!state['other_event_type']) {\r\n              state[value] = 'other'\r\n              state['other_event_type'] = _data\r\n            }\r\n          }\r\n        }\r\n      }\r\n      let ListMandatory = await ListSign.ListMandatory.arp4\r\n      let listSign = await this.state.listSign\r\n      await ListMandatory.forEach(li => {\r\n        listSign = [...listSign, li]\r\n      })\r\n      listSign = await [...new Set(listSign)]\r\n      state['listSign'] = await listSign\r\n      if (state.corrective_actions) {\r\n        if (\r\n          state.corrective_actions.length &&\r\n          state.corrective_actions.length > 0\r\n        ) {\r\n          let { corrective_actions } = state\r\n          let { responsible_list } = this.state\r\n          let array = []\r\n          corrective_actions.forEach(data => {\r\n            let filter = responsible_list.filter(_data =>\r\n              data.responsible.includes(_data.value)\r\n            )\r\n            if (filter.length > 0) {\r\n              data.responsible = filter\r\n              array.push(data)\r\n            }\r\n          })\r\n\r\n          if (array.length > 0) {\r\n            state['_corrective_actions'] = array\r\n          } else {\r\n            state['_corrective_actions'] = state.corrective_actions\r\n          }\r\n        }\r\n      }\r\n      if (state.document_link_arp4) {\r\n        if (state.document_link_arp4.length > 0) {\r\n          state['attachment'] = await state.document_link_arp4\r\n          state['attachmentName'] = await state.document_link_arp4\r\n        }\r\n      }\r\n      await this.setState(state)\r\n    }\r\n  }\r\n  OnFocus = name => {\r\n    if (!this.handleDisabled()) {\r\n      this.setState({ foucs: name })\r\n    }\r\n  }\r\n  OnBlur = () => {\r\n    if (!this.handleDisabled()) {\r\n      this.setState({ foucs: '' })\r\n    }\r\n  }\r\n  handleChange = e => {\r\n    if (!this.handleDisabled()) {\r\n      this.setState({ [e.target.name]: handleString(e.target.value) })\r\n    }\r\n  }\r\n  handleChangeList = (nameState, name, value) => {\r\n    let list = this.state[nameState]\r\n    let key = parseInt(name.split('_')[1])\r\n    name = name.split('_')[0]\r\n    if (name === 'responsible') {\r\n      if (!value) {\r\n        value = []\r\n      }\r\n    }\r\n    let obj = list[key]\r\n    obj[name] = value\r\n    this.setState({ [nameState]: list })\r\n    // }\r\n  }\r\n  ChangeDateList = (date, key, nameState, name) => {\r\n    if (!this.handleDisabled()) {\r\n      let list = this.state[nameState]\r\n      let obj = list[key]\r\n      obj[name] = date\r\n      this.setState({ [nameState]: list })\r\n    }\r\n  }\r\n  handleAdd = nameState => {\r\n    if (!this.handleDisabled()) {\r\n      let obj = { description: '', responsible: '', status: '', action: '' }\r\n      this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n    }\r\n  }\r\n  handleDisabled = () => {\r\n    if (!this.state.secretary_committee_allow) {\r\n      return true\r\n    } else if (this.props.canUpdate) {\r\n      return false\r\n    } else if (this.props.show) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  handleDelete = (nameState, key) => {\r\n    if (!this.handleDisabled()) {\r\n      let data = this.state[nameState]\r\n      data.splice(key, 1)\r\n      this.setState({ [nameState]: data })\r\n    }\r\n  }\r\n  handleCheckCorrective = () => {\r\n    const { _corrective_actions } = this.state\r\n    let i = 0\r\n    let check = false\r\n    while (i < _corrective_actions.length) {\r\n      check =\r\n        handleCheckText(_corrective_actions[i].status) &&\r\n        _corrective_actions[i].responsible.length > 0\r\n      // &&\r\n      // handleCheckText(_corrective_actions[i].responsible)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  handleSubmit = async () => {\r\n    const {\r\n      id,\r\n      _corrective_actions,\r\n      technical_agent_arp4,\r\n      operation_agent_arp4,\r\n      repair_agent_arp4,\r\n      hse_agent_arp4,\r\n      token,\r\n      attachment\r\n    } = this.state\r\n    const check = this.handleCheckCorrective()\r\n    const checkSign =\r\n      technical_agent_arp4 !== null &&\r\n      operation_agent_arp4 !== null &&\r\n      repair_agent_arp4 !== null &&\r\n      hse_agent_arp4 !== null\r\n    const checkFinal = check && checkSign\r\n    if (checkFinal) {\r\n      const document_link_arp4 = Object.assign({}, attachment)\r\n      let resultObj = await Object.assign(\r\n        {},\r\n        Object.keys(_corrective_actions).map(_data => {\r\n          let _list = _corrective_actions[_data].responsible\r\n          _corrective_actions[_data].responsible = Object.keys(_list).map(\r\n            _value => {\r\n              return _list[_value].value\r\n            }\r\n          )\r\n          return _corrective_actions[_data]\r\n        })\r\n      )\r\n      await this.setState({ loading: 'submit', disabled: true })\r\n      const url = await `${StaticData.domainIp}/arp/insertFourth`\r\n      const datareg = await new FormData()\r\n      await datareg.append('arp_id', id)\r\n      await datareg.append('corrective_actions', JSON.stringify(resultObj))\r\n      await datareg.append(\r\n        'document_link_arp4',\r\n        JSON.stringify(document_link_arp4)\r\n      )\r\n      await datareg.append('technical_agent_arp4', technical_agent_arp4.value)\r\n      await datareg.append('operation_agent_arp4', operation_agent_arp4.value)\r\n      await datareg.append('repair_agent_arp4', repair_agent_arp4.value)\r\n      await datareg.append('hse_agent_arp4', hse_agent_arp4.value)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({\r\n            loading: ''\r\n          })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              this.setState({\r\n                disabled: false,\r\n                redirect: false\r\n              })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            this.setState({\r\n              disabled: false\r\n            })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            disabled: false,\r\n            loading: ''\r\n          })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleEdit = async () => {\r\n    const { id, _corrective_actions, token, attachment } = this.state\r\n    const check = this.handleCheckCorrective()\r\n    if (check) {\r\n      const document_link_arp4 = Object.assign({}, attachment)\r\n      let resultObj = await Object.assign(\r\n        {},\r\n        Object.keys(_corrective_actions).map(_data => {\r\n          let _list = _corrective_actions[_data].responsible\r\n          _corrective_actions[_data].responsible = Object.keys(_list).map(\r\n            _value => {\r\n              return _list[_value].value\r\n            }\r\n          )\r\n          return _corrective_actions[_data]\r\n        })\r\n      )\r\n      await this.setState({ loading: 'submit', disabled: true })\r\n      const url = await `${StaticData.domainIp}/arp/updateArp4`\r\n      const datareg = await new FormData()\r\n      await datareg.append('arp_id', id)\r\n      await datareg.append('corrective_actions', JSON.stringify(resultObj))\r\n      await datareg.append(\r\n        'document_link_arp4',\r\n        JSON.stringify(document_link_arp4)\r\n      )\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({\r\n            loading: ''\r\n          })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              this.setState({\r\n                disabled: false,\r\n                redirect: false\r\n              })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            this.setState({\r\n              disabled: false\r\n            })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            disabled: false,\r\n            loading: ''\r\n          })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    }\r\n  }\r\n  handleState = obj => {\r\n    this.setState(obj)\r\n  }\r\n  handleUpload = (e, files, names) => {\r\n    e.preventDefault()\r\n    this.setState({ loading: files })\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      let reader = new FileReader()\r\n      reader.readAsDataURL(e.target.files[i])\r\n      this.GetLink(files, e.target.files[i], names, e.target.files.length, i)\r\n    }\r\n  }\r\n  GetLink = (nameState, file, names, length, i) => {\r\n    let array = this.state[nameState] ? this.state[nameState] : [],\r\n      arrayName = this.state[names] ? this.state[names] : []\r\n    let datareg = new FormData()\r\n    datareg.append('file', file)\r\n    axios({\r\n      method: 'post',\r\n      url: `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Arp/${this.state.id}`,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: this.state.token ? `Bearer ${this.state.token}` : null\r\n      }\r\n    })\r\n      .then(async response => {\r\n        if (i + 1 === length) {\r\n          this.setState({ loading: '' })\r\n        }\r\n        if (response.status === 200) {\r\n          // await arrayName.push(file.name)\r\n          // await array.push(response.data.content)\r\n          await this.setState({\r\n            [names]: [...this.state[names], file.name],\r\n            [nameState]: [...this.state[nameState], response.data.content]\r\n            // [nameState]: array\r\n          })\r\n        } else {\r\n          Notification.notify(Message.text(response.status), 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({ loading: '' })\r\n        if (err.response) {\r\n          Notification.notify(Message.text(err.response.status), 'error')\r\n        }\r\n      })\r\n  }\r\n  deleteFile = (num, files, names) => {\r\n    let data = this.state[`${files}`],\r\n      data2 = this.state[`${names}`]\r\n    data.splice(num, 1)\r\n    data2.splice(num, 1)\r\n    this.setState({ [files]: data, [names]: data2 })\r\n  }\r\n  render() {\r\n    const { secretary_committee_allow, token, redirect, _corrective_actions, attachmentName, attachment, loading, canCreate, disabled, id } = this.state\r\n    const { show, canUpdate } = this.props\r\n    const ShowToCC = !show && !canUpdate && secretary_committee_allow\r\n    if (!token) {\r\n      return <Redirect to='/Login' />\r\n    } else if (redirect) {\r\n      return <Redirect to='/index-ARP' />\r\n    } else {\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <HeadTopFirst\r\n            {...this}\r\n            disabled={true}\r\n          // dontShow={true}\r\n          />\r\n          <div className='w-100'>\r\n            <div className='title-password col-12 mt-3 mb-2'>\r\n              <h2 className='IranSans_Bold'>\r\n                اقدامات اصلاحی برای پیشگیری از رویداد‌های مشابه\r\n              </h2>\r\n              <div className='line'></div>\r\n            </div>\r\n            {_corrective_actions.map((data, key) => (\r\n              <SimilarEvents\r\n                {...this}\r\n                key={key}\r\n                data={data}\r\n                _key={key}\r\n                name='_corrective_actions'\r\n              />\r\n            ))}\r\n            {this.handleDisabled() ? (\r\n              ''\r\n            ) : (\r\n              <div className='button-add col-12'>\r\n                <button onClick={() => this.handleAdd('_corrective_actions')}>\r\n                  <AddIcon />\r\n                  افزودن مورد جدید\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className='title-password col-12 mt-3 mb-2'>\r\n            <h2 className='IranSans_Bold'>مدارک پیوست</h2>\r\n            <div className='line'></div>\r\n          </div>\r\n          <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n            <div className={`field-form persian`}>\r\n              <label>فایل ضمیمه</label>\r\n              <div\r\n                className={`allName col row m-0 justify-content-end ${this.handleDisabled() ? 'pl-2' : ''\r\n                  }`}\r\n              >\r\n                {attachmentName.map((name, key) => (\r\n                  <span key={key}>\r\n                    {this.handleDisabled() ? (\r\n                      ''\r\n                    ) : (\r\n                      <CloseRoundedIcon\r\n                        onClick={() =>\r\n                          this.deleteFile(key, 'attachment', 'attachmentName')\r\n                        }\r\n                      />\r\n                    )}\r\n                    <a\r\n                      href={\r\n                        attachment[key]\r\n                          ? attachment[key]\r\n                          : '#/'\r\n                      }\r\n                      target='_blank'\r\n                      rel='noreferrer'\r\n                    >\r\n                      {handleString(name)}\r\n                    </a>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n              {this.handleDisabled() ? (\r\n                ''\r\n              ) : (\r\n                <React.Fragment>\r\n                  <input\r\n                    className='d-none'\r\n                    type='file'\r\n                    id='has_log_sheets-upload'\r\n                    multiple\r\n                    onChange={e =>\r\n                      this.handleUpload(e, 'attachment', 'attachmentName')\r\n                    }\r\n                  />\r\n                  <label\r\n                    className='upload-label'\r\n                    htmlFor='has_log_sheets-upload'\r\n                  >\r\n                    {loading === 'attachment' ? (\r\n                      <Loading className='form-loader w-auto' />\r\n                    ) : (\r\n                      <AttachFileIcon />\r\n                    )}\r\n                    آپلود فایل\r\n                  </label>\r\n                </React.Fragment>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {ShowToCC ? <HanldeToCC {...this} dontCC={true} /> : ''}\r\n          {ShowToCC ? (\r\n            canCreate ? (\r\n              <div className='submit-form col-12'>\r\n                <button\r\n                  onClick={this.handleSubmit}\r\n                  disabled={disabled}\r\n                >\r\n                  {loading === 'submit' ? (\r\n                    <Loading className='form-loader' />\r\n                  ) : (\r\n                    <DoneIcon />\r\n                  )}\r\n                  ثبت اطلاعات\r\n                </button>\r\n                <CancelButton redirect='index-ARP' />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )\r\n          ) : (\r\n            <SignARP\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              permision='arp_signs'\r\n            />\r\n          )}\r\n          {canUpdate ? (\r\n            <div className='submit-form col-12 mt-3'>\r\n              <button\r\n                className='edit'\r\n                onClick={this.handleEdit}\r\n                disabled={disabled}\r\n              >\r\n                {loading === 'submit' ? (\r\n                  <Loading className='form-loader' />\r\n                ) : (\r\n                  <DoneIcon />\r\n                )}\r\n                ویرایش اطلاعات\r\n              </button>\r\n              <CancelButton redirect={`arp-${id}`} />\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\ARP\\ReviewReports.js",["3230","3231"],"import React, { Component } from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport StaticData from '../staticData'\r\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded'\r\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { Redirect } from 'react-router-dom'\r\nimport ListSign from './ListSign'\r\nimport SignARP from './SignARP'\r\nimport Permision from '../permision/permision'\r\nimport Loading from '../layout/loading'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport CancelButton from '../layout/CancelButton'\r\nimport HeadTopFirst from './HeadTopFirst'\r\nimport HanldeToCC from './HanldeToCC'\r\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded'\r\nimport handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nexport default class ReviewReports extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.Permision = new Permision()\r\n    this.state = {\r\n      token: Cookies.get('token'),\r\n      userDetail: null,\r\n      listSign: [],\r\n      reasonsAccident: [\r\n        {\r\n          value: 'کار بر روی تجهیز بدون قطع منبع انرژی',\r\n          label: 'کار بر روی تجهیز بدون قطع منبع انرژی'\r\n        },\r\n        {\r\n          value: 'عدم کارایی سیستم‌های ایمنی تجهیزات',\r\n          label: 'عدم کارایی سیستم‌های ایمنی تجهیزات'\r\n        },\r\n        {\r\n          value: 'عدم رعایت الزامات در دستورالعمل‌های بهره‌برداری',\r\n          label: 'عدم رعایت الزامات در دستورالعمل‌های بهره‌برداری'\r\n        },\r\n\r\n        {\r\n          value: 'نقص در نحوه نگارش پروانه‌های کار',\r\n          label: 'نقص در نحوه نگارش پروانه‌های کار'\r\n        },\r\n        {\r\n          value: 'فقدان یا نامناسب بودن وسایل حفاظت فردی',\r\n          label: 'فقدان یا نامناسب بودن وسایل حفاظت فردی'\r\n        },\r\n        {\r\n          value: 'فقدان دستورالعمل کاری مناسب',\r\n          label: 'فقدان دستورالعمل کاری مناسب'\r\n        },\r\n\r\n        {\r\n          value: 'راه اندازی تجهیز به شکل ناایمن',\r\n          label: 'راه اندازی تجهیز به شکل ناایمن'\r\n        },\r\n        {\r\n          value: 'عدم ایزوله کردن درست تجهیز',\r\n          label: 'عدم ایزوله کردن درست تجهیز'\r\n        },\r\n        {\r\n          value: 'عدم اجرای روش جاری در مدیریت تغییر',\r\n          label: 'عدم اجرای روش جاری در مدیریت تغییر'\r\n        },\r\n\r\n        {\r\n          value: 'نقص در نحوه اجرای پروانه‌های کار',\r\n          label: 'نقص در نحوه اجرای پروانه‌های کار'\r\n        },\r\n        { value: 'نقص در ارتباطات پروسسی', label: 'نقص در ارتباطات پروسسی' },\r\n        { value: 'عدم اجرای مدیریت ریسک', label: 'عدم اجرای مدیریت ریسک' },\r\n\r\n        {\r\n          value: 'کار برروی تجهیز بدون مجوز',\r\n          label: 'کار برروی تجهیز بدون مجوز'\r\n        },\r\n        {\r\n          value: 'استفاده نادرست و غیراصولی از تجهیزات(آموزش ناکافی)',\r\n          label: 'استفاده نادرست و غیراصولی از تجهیزات(آموزش ناکافی)'\r\n        },\r\n        {\r\n          value: 'فقدان یا ضعف برنامه تعمیر و نگهداری پیشگیرانه و بازرسی',\r\n          label: 'فقدان یا ضعف برنامه تعمیر و نگهداری پیشگیرانه و بازرسی'\r\n        },\r\n\r\n        { value: 'نقشه‌های نامناسب', label: 'نقشه‌های نامناسب' },\r\n        {\r\n          value: 'نقص در طراحی (شناسایی پیش از حادثه)',\r\n          label: 'نقص در طراحی (شناسایی پیش از حادثه)'\r\n        },\r\n        {\r\n          value: 'نقص در طراحی (عدم شناسایی پیش از حادثه)',\r\n          label: 'نقص در طراحی (عدم شناسایی پیش از حادثه)'\r\n        }\r\n      ],\r\n      other: false,\r\n      userDetail: null,\r\n      listSign: [],\r\n      discipline: '',\r\n      canCreate: false,\r\n      listOther: [{ value: '' }]\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    document.title = `${StaticData.Title} - گزارش رویداد (حادثه و شبه حادثه فرایندی)`\r\n    if (Cookies.get('userDetail')) {\r\n      this.setState({ userDetail: JSON.parse(Cookies.get('userDetail')) })\r\n    }\r\n    this.ShowFetch()\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      this.ShowFetch()\r\n    }\r\n  }\r\n  ResetSelect = () => {\r\n    const state = this.state\r\n    for (let value in state) {\r\n      if (value.includes('event_reasons_')) {\r\n        this.setState({ [value]: false })\r\n      }\r\n    }\r\n  }\r\n  ShowFetch = async () => {\r\n    const { state } = await this.props\r\n    if (state) {\r\n      state['canCreate'] = await state.secretary_committee_allow\r\n      for (let value in state) {\r\n        // const checkDate = value === 'event_date'\r\n        if (value === 'event_type') {\r\n          let _data = state[value]\r\n          const checkOther =\r\n            _data !== 'انسانی' &&\r\n            _data !== 'خسارت به تجهیزات' &&\r\n            _data !== 'Total S/D' &&\r\n            _data !== 'زیست محیطی' &&\r\n            _data !== 'نشتی مواد' &&\r\n            _data !== 'آتش سوزی'\r\n          if (checkOther) {\r\n            if (!state['other_event_type']) {\r\n              state[value] = 'other'\r\n              state['other_event_type'] = _data\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      let ListMandatory = await ListSign.ListMandatory.arp3\r\n      let listSign = await this.state.listSign\r\n      await ListMandatory.forEach(li => {\r\n        listSign = [...listSign, li]\r\n      })\r\n      listSign = await [...new Set(listSign)]\r\n      state['listSign'] = await listSign\r\n      const newState = this.hanldeCheckReasons(state)\r\n      await this.setState(newState)\r\n    }\r\n  }\r\n  hanldeCheckReasons = state => {\r\n    let { event_reasons } = state\r\n    if (event_reasons) {\r\n      const { reasonsAccident } = this.state\r\n      let _array = event_reasons.split(',')\r\n      let _reasonsAccident = Object.keys(reasonsAccident).map(_obj => {\r\n        return reasonsAccident[_obj].value\r\n      })\r\n      let listOther = []\r\n      _array.forEach(_itm => {\r\n        if (_reasonsAccident.includes(_itm)) {\r\n          state[`event_reasons_${_itm}`] = true\r\n        } else {\r\n          let __obj = { value: _itm }\r\n          listOther.push(__obj)\r\n        }\r\n      })\r\n      state['other'] = listOther.length > 0\r\n      state['listOther'] = listOther\r\n    }\r\n    return state\r\n  }\r\n  OnFocus = name => {\r\n    this.setState({ foucs: name })\r\n  }\r\n  OnBlur = () => {\r\n    this.setState({ foucs: '' })\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: handleString(e.target.value) })\r\n  }\r\n  handleAdd = nameState => {\r\n    let obj = { value: '' }\r\n    this.setState({ [nameState]: [...this.state[nameState], obj] })\r\n  }\r\n  handleDisabled = () => {\r\n    if (!this.state.canCreate) {\r\n      return true\r\n    } else if (this.props.show) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  handleAccidentReasons = () => {\r\n    const state = this.state,\r\n      list = []\r\n    Object.keys(state).map(data => {\r\n      if (data.includes('event_reasons_')) {\r\n        if (state[data]) {\r\n          let text = data.split('event_reasons_')[1]\r\n          list.push(text)\r\n        }\r\n      }\r\n      return true\r\n    })\r\n    return list\r\n  }\r\n  hanldleCheckOther = () => {\r\n    const { listOther } = this.state\r\n    let check = false,\r\n      i = 0\r\n    while (i < listOther.length) {\r\n      let _obj = listOther[i]\r\n      check = handleCheckText(_obj.value)\r\n      if (!check) {\r\n        break\r\n      }\r\n      i++\r\n    }\r\n    return check\r\n  }\r\n  handleOtherList = () => {\r\n    let array = []\r\n    const { other, listOther } = this.state\r\n    if (other) {\r\n      array = Object.keys(listOther).map(_t => {\r\n        return listOther[_t].value\r\n      })\r\n    }\r\n    return array\r\n  }\r\n  handleSubmit = async () => {\r\n    // if (licens) {\r\n    const {\r\n      id,\r\n      discipline,\r\n      event_description,\r\n      event_before_instructions,\r\n      technical_agent_arp3,\r\n      operation_agent_arp3,\r\n      repair_agent_arp3,\r\n      hse_agent_arp3,\r\n      other,\r\n      token\r\n    } = this.state\r\n    let event_reasons = this.handleAccidentReasons()\r\n    const checkReasons = other\r\n      ? this.hanldleCheckOther()\r\n      : event_reasons.length > 0\r\n    const checkSign =\r\n      technical_agent_arp3 !== null &&\r\n      operation_agent_arp3 !== null &&\r\n      repair_agent_arp3 !== null &&\r\n      hse_agent_arp3 !== null\r\n    const check =\r\n      handleCheckText(discipline) &&\r\n      handleCheckText(event_description) &&\r\n      handleCheckText(event_before_instructions)\r\n    const finalCheck = check && checkSign && checkReasons\r\n    const secondArray = this.handleOtherList()\r\n    if (finalCheck) {\r\n      this.setState({ loading: 'submit', disabled: true })\r\n      const finalReasons = event_reasons.concat(secondArray)\r\n      const url = await `${StaticData.domainIp}/arp/insertThird`\r\n      const datareg = await new FormData()\r\n      await datareg.append('arp_id', id)\r\n      await datareg.append('discipline', discipline)\r\n      await datareg.append('event_reasons', finalReasons.join(','))\r\n      await datareg.append('event_description', event_description)\r\n      await datareg.append(\r\n        'event_before_instructions',\r\n        event_before_instructions\r\n      )\r\n      await datareg.append('technical_agent_arp3', technical_agent_arp3.value)\r\n      await datareg.append('operation_agent_arp3', operation_agent_arp3.value)\r\n      await datareg.append('repair_agent_arp3', repair_agent_arp3.value)\r\n      await datareg.append('hse_agent_arp3', hse_agent_arp3.value)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          this.setState({\r\n            loading: ''\r\n          })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              this.setState({\r\n                disabled: false,\r\n                redirect: false\r\n              })\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            this.setState({\r\n              disabled: false\r\n            })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            disabled: false,\r\n            loading: ''\r\n          })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n    // }\r\n  }\r\n  handleState = obj => {\r\n    this.setState(obj)\r\n    // this.props.handleState(obj)\r\n  }\r\n  handleChangeList = e => {\r\n    const { value, name } = e.target\r\n    let key = parseInt(name.split('_')[1])\r\n    let _name = name.split('_')[0]\r\n    let array = this.state.listOther\r\n    let obj = array[key]\r\n    obj[_name] = value\r\n    this.setState({\r\n      listOther: array\r\n    })\r\n  }\r\n  handleDelete = async num => {\r\n    let data = await this.state.listOther\r\n    await data.splice(num, 1)\r\n    await this.setState({ listOther: data, other: data.length !== 0 })\r\n  }\r\n  render () {\r\n    const ShowToCC = !this.props.show\r\n    if (!this.state.token) {\r\n      return <Redirect to='Login' />\r\n    } else if (this.state.redirect) {\r\n      return <Redirect to='/index-ARP' />\r\n    } else {\r\n      return (\r\n        <div className='form row justify-content-start'>\r\n          <HeadTopFirst\r\n            {...this}\r\n            disabled={true}\r\n            // dontShow={true}\r\n          />\r\n          <div className='title-password col-12 mt-3 mb-2 px-0'>\r\n            <div className='line'></div>\r\n          </div>\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian ${\r\n                this.state.foucs === 'discipline' ||\r\n                handleCheckText(this.state.discipline)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                Discipline\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <select\r\n                name='discipline'\r\n                value={handleString(this.state.discipline)}\r\n                onChange={e => this.handleChange(e)}\r\n                onFocus={e => this.OnFocus(e)}\r\n                onBlur={this.OnBlur}\r\n                readOnly={this.handleDisabled()}\r\n                disabled={this.handleDisabled()}\r\n              >\r\n                <option className='d-none'></option>\r\n                <option value='مکانیک'>مکانیک</option>\r\n                <option value='برق'>برق</option>\r\n                <option value='ابزار دقیق'>ابزار دقیق</option>\r\n                <option value='فرآیند'>فرآیند</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className='title-password col-12 mt-3 mb-2'>\r\n            <h2 className='IranSans_Bold'>دلایل بروز حادثه</h2>\r\n            <div className='line'></div>\r\n          </div>\r\n          <div className='col-12 row m-0'>\r\n            {this.state.reasonsAccident.map((data, key) => (\r\n              <div\r\n                className='disiplin-checkbox col-xl-6 col-lg-6 col-md-12 col-12 w-auto mt-3 mb-3 p-0'\r\n                key={key}\r\n              >\r\n                <div className='checkbox m-0'>\r\n                  {this.handleDisabled() ? (\r\n                    ''\r\n                  ) : (\r\n                    <input\r\n                      className='d-none'\r\n                      id={`event_reasons_${data.value}`}\r\n                      name={`event_reasons_${data.value}`}\r\n                      type='checkbox'\r\n                      onChange={e =>\r\n                        this.setState({ [e.target.name]: e.target.checked })\r\n                      }\r\n                      checked={\r\n                        this.state[`event_reasons_${data.value}`] ? true : false\r\n                      }\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className='full'\r\n                    htmlFor={`event_reasons_${data.value}`}\r\n                  >\r\n                    {this.state[`event_reasons_${data.value}`] ? (\r\n                      <CheckBoxRoundedIcon />\r\n                    ) : (\r\n                      <CheckBoxOutlineBlankRoundedIcon />\r\n                    )}\r\n                    {handleString(data.label)}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div className='disiplin-checkbox col-xl-6 col-lg-6 col-md-12 col-12 w-auto mt-3 mb-3 p-0'>\r\n              <div className='checkbox m-0'>\r\n                {this.handleDisabled() ? (\r\n                  ''\r\n                ) : (\r\n                  <input\r\n                    className='d-none'\r\n                    id={`other`}\r\n                    name={`other`}\r\n                    type='checkbox'\r\n                    onChange={e =>\r\n                      this.setState({\r\n                        [e.target.name]: e.target.checked,\r\n                        listOther: [{ value: '' }]\r\n                      })\r\n                    }\r\n                    checked={this.state.other ? true : false}\r\n                  />\r\n                )}\r\n                <label className='full' htmlFor={`other`}>\r\n                  {this.state.other ? (\r\n                    <CheckBoxRoundedIcon />\r\n                  ) : (\r\n                    <CheckBoxOutlineBlankRoundedIcon />\r\n                  )}\r\n                  سایر موارد\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {this.state.other && (\r\n            <div className='w-100'>\r\n              {this.state.listOther.map((data, key) => (\r\n                <div className='w-100'>\r\n                  <div\r\n                    className='col-xl-12 col-lg-12 col-md-12 col-12'\r\n                    key={key}\r\n                  >\r\n                    <div\r\n                      className={`field-form persian ${\r\n                        this.state.foucs === `value_${key}` ||\r\n                        handleCheckText(data.value)\r\n                          ? 'active'\r\n                          : ''\r\n                      }`}\r\n                    >\r\n                      <label>\r\n                        شرح سایر دلایل بروز حادثه\r\n                        <span className='star IranSans_Bold'>*</span>\r\n                      </label>\r\n                      <input\r\n                        type='text'\r\n                        name={`value_${key}`}\r\n                        value={handleString(data.value)}\r\n                        onChange={this.handleChangeList}\r\n                        onBlur={this.OnBlur}\r\n                        onFocus={e => this.OnFocus(e.target.name)}\r\n                        readOnly={this.handleDisabled()}\r\n                        disabled={this.handleDisabled()}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {this.handleDisabled() ? (\r\n                    ''\r\n                  ) : (\r\n                    <div className='button-add col-12 row mr-0 ml-0'>\r\n                      <button\r\n                        className='remove'\r\n                        onClick={() => this.handleDelete(key)}\r\n                      >\r\n                        <DeleteRoundedIcon />\r\n                        حذف\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                  {this.state.listOther.length > 1 && (\r\n                    <div className='title-password col-12 mt-3 mb-2'>\r\n                      <div className='line'></div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n              {this.handleDisabled() ? (\r\n                ''\r\n              ) : (\r\n                <div className='button-add col-12'>\r\n                  <button onClick={() => this.handleAdd('listOther')}>\r\n                    <AddIcon />\r\n                    افزودن مورد جدید\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian textarea ${\r\n                this.state.foucs === `event_description` ||\r\n                handleCheckText(this.state.event_description)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <div className='col p-0'>\r\n                <label className='textarea'>\r\n                  شرح رویداد با جزئیات (پیش از وقوع رویداد چه فعالیتی در حال\r\n                  انجام بود؟)\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <textarea\r\n                  className='w-100'\r\n                  type='text'\r\n                  name={`event_description`}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  value={handleString(this.state.event_description)}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian textarea ${\r\n                this.state.foucs === `event_before_instructions` ||\r\n                handleCheckText(this.state.event_before_instructions)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <div className='col p-0'>\r\n                <label className='textarea'>\r\n                  پیش از وقوع رویداد چه دستورالعمل و مقرراتی (ایمنی و\r\n                  بهره‌برداری) در انجام فعالیت میبایست اجرا میگردید؟\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n                <textarea\r\n                  className='w-100'\r\n                  type='text'\r\n                  name={`event_before_instructions`}\r\n                  onFocus={e => this.OnFocus(e.target.name)}\r\n                  onBlur={this.OnBlur}\r\n                  onChange={this.handleChange}\r\n                  value={handleString(this.state.event_before_instructions)}\r\n                  readOnly={this.handleDisabled()}\r\n                  disabled={this.handleDisabled()}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {ShowToCC ? <HanldeToCC {...this} dontCC={true} /> : ''}\r\n          {ShowToCC ? (\r\n            this.state.canCreate ? (\r\n              <div className='submit-form col-12'>\r\n                <button\r\n                  onClick={this.handleSubmit}\r\n                  disabled={this.state.disabled}\r\n                >\r\n                  {this.state.loading === 'submit' ? (\r\n                    <Loading className='form-loader' />\r\n                  ) : (\r\n                    <DoneIcon />\r\n                  )}\r\n                  ثبت اطلاعات\r\n                </button>\r\n                <CancelButton redirect='index-ARP' />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )\r\n          ) : (\r\n            <SignARP\r\n              {...this}\r\n              handleState={(name, value) => this.setState({ [name]: value })}\r\n              permision='arp_signs'\r\n            />\r\n          )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","E:\\bidboland\\src\\tsrNew\\note\\Create\\footer.js",[],"E:\\bidboland\\src\\ARP\\ReportVariousDisciplines.js",[],"E:\\bidboland\\src\\tsrNew\\note\\List\\API.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Create\\API.js",["3232"],"import StaticData from '../../../staticData'\r\nimport Notification from '../../../notification/notification'\r\nimport Message from '../../../notification/Message'\r\nimport axios from 'axios'\r\nimport handleCheckText from '../../../handleCheckText'\r\nimport handleString from '../../../handleString'\r\nclass APINote {\r\n  constructor(data) {\r\n    this.data = data\r\n  }\r\n  handleUploadFile = async e => {\r\n    const { files } = e.target\r\n    await e.preventDefault()\r\n    const listFiles = Array.from(files)\r\n    listFiles.map(file => this.GetLink(file))\r\n  }\r\n  GetLink = file => {\r\n    const { props, handleState, state } = this.data\r\n    const parnetState = props.state || {}\r\n    const { id, select, token } = parnetState\r\n    const url = `${StaticData.domainIp}/uploadFile/DocumentCenter/ProcessDocument/Tsr/Form${select}/${id}/note`\r\n    const datareg = new FormData()\r\n    datareg.append('file', file)\r\n    handleState({ loading: 'upload' })\r\n    axios({\r\n      method: 'post',\r\n      url: url,\r\n      data: datareg,\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : null\r\n      }\r\n    }).then(response => {\r\n      handleState({ loading: '' })\r\n      if (response.status === 200) {\r\n        const { content } = response.data\r\n        let size = this.ByteConverter(file.size, 2)\r\n        let obj = { size, url: content, name: file.name }\r\n        state.attachment.push(obj)\r\n        handleState({ attachment: state.attachment })\r\n      } else {\r\n        Notification.notify(Message.text(response.status), 'error')\r\n      }\r\n    })\r\n  }\r\n  ByteConverter = (bytes, decimals) => {\r\n    const K_UNIT = 1024\r\n    const SIZES = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB']\r\n    if (bytes == 0) return '0 Byte'\r\n    let i = Math.floor(Math.log(bytes) / Math.log(K_UNIT))\r\n    let resp =\r\n      parseFloat((bytes / Math.pow(K_UNIT, i)).toFixed(decimals)) + SIZES[i]\r\n    return resp\r\n  }\r\n  deleteFileList = async (key, nameState) => {\r\n    const { state, handleState } = await this.data\r\n    let array = (await state[nameState]) || []\r\n    await array.splice(key, 1)\r\n    await handleState({ [nameState]: array })\r\n  }\r\n  CheckArray = array => {\r\n    return array.length > 0\r\n  }\r\n  handleFilterValueArray = (array, name) => {\r\n    const result = Object.keys(array || []).map(item => {\r\n      let obj = array[item] || {}\r\n      return handleString(obj[name])\r\n    })\r\n    return result\r\n  }\r\n  handleSubmit = async () => {\r\n    const { handleState, state, props } = this.data\r\n    const { setStateShow } = props\r\n    const parentState = props.state || {}\r\n    const parentAPI = props.API || {}\r\n    const { handleSwitchid } = parentAPI\r\n    const { token, id, select } = parentState\r\n    const { attachment, cc, receive_to, text } = state\r\n    const check = handleCheckText(text) && handleCheckText(receive_to?.value)\r\n    if (check) {\r\n      handleState({ loading: 'submit', disabled: true })\r\n      const numPage = handleSwitchid(select)\r\n      const attach = await this.handleFilterValueArray(attachment, 'url')\r\n      const _cc = await this.handleFilterValueArray(cc, 'value')\r\n      const url = `${StaticData.domainIp}/tsr_v1/insertNote/${id}/page/${numPage}`\r\n      const datareg = await new FormData()\r\n      await datareg.append('recieve_to', handleString(receive_to?.value))\r\n      await datareg.append('cc', _cc?.join(','))\r\n      await datareg.append('text', text)\r\n      await datareg.append('attach', JSON.stringify(attach))\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          handleState({ loading: '' })\r\n          if (response.status === 200) {\r\n            await Notification.notify(Message.text(900), 'success')\r\n            setTimeout(async () => {\r\n              setStateShow('list')\r\n              handleState({ disabled: false })\r\n            }, 5000)\r\n          } else {\r\n            handleState({ disabled: false })\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          handleState({ disabled: false, loading: '' })\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n}\r\nexport default APINote\r\n","E:\\bidboland\\src\\tsrNew\\note\\Create\\Body.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BasicEngineering.js",[],"E:\\bidboland\\src\\tsrNew\\TSR11\\ItemDoc.js",[],"E:\\bidboland\\src\\TechnicalArchive\\LineList.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BuildersEngineering.js",[],"E:\\bidboland\\src\\forgotPassword\\EnterNewPassword.js",[],"E:\\bidboland\\src\\TechnicalArchive\\IsoMetric.js",[],"E:\\bidboland\\src\\forgotPassword\\EnterCode.js",[],"E:\\bidboland\\src\\forgotPassword\\GetEmail.js",[],"E:\\bidboland\\src\\TechnicalArchive\\P&ID.js",[],"E:\\bidboland\\src\\tsrNew\\TSR8\\ItemPurchaseRequests.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\Tab.js",[],"E:\\bidboland\\src\\tsrNew\\TSR9\\ImplementedEngItem.js",[],"E:\\bidboland\\src\\FAQ\\EditRow.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionInstrument.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionPfd.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionDetailedEngineering.js",["3233"],"import React, { useEffect, useRef } from 'react'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded'\r\nimport SecondBoxData from '../Customization/SecondBoxData'\r\nimport Loading from '../layout/loading'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nconst ActionDetailedEngineering = props => {\r\n  const actionElm = useRef()\r\n  const {\r\n    data,\r\n    state,\r\n    _key,\r\n    Permision,\r\n    GetMore,\r\n    handlePositionBox,\r\n    GetSecondData,\r\n    handleState\r\n  } = props\r\n  let {\r\n    selectNumber,\r\n    role,\r\n    firstData,\r\n    documentSelected,\r\n    secondSelectNumber,\r\n    loading\r\n  } = state\r\n  let list = firstData || []\r\n  const checkLength = list.length > 0\r\n  const handlePermision = Permision.handlePermision\r\n  useEffect(() => {\r\n    if (actionElm) {\r\n      let elm = actionElm.current\r\n      let name = `_action_${_key}`\r\n      props.handleRefs(name, elm)\r\n    }\r\n  }, [])\r\n  function handleTitle () {\r\n    switch (loading) {\r\n      case 'more':\r\n        return (\r\n          <React.Fragment>\r\n            <Loading className='loading-boxmore' />\r\n            <span className='w-100 min-size'>در حال بارگذاری</span>\r\n          </React.Fragment>\r\n        )\r\n      default:\r\n        return checkLength\r\n          ? `${documentSelected} داکیومنت `\r\n          : 'اطلاعات ثبت نشده است'\r\n    }\r\n  }\r\n  return (\r\n    <td\r\n      className={`action justify-content-center ${\r\n        selectNumber === _key ? 'active' : ''\r\n      }`}\r\n      ref={actionElm}\r\n    >\r\n      {handlePermision(role, 'detail_engineering_revisions') && (\r\n        <span\r\n          className='more'\r\n          onClick={() => GetMore(_key, data.documentNumber)}\r\n        >\r\n          <MoreVertRoundedIcon />\r\n        </span>\r\n      )}\r\n      {handlePermision(role, 'detail_engineering_delete') && (\r\n        <span\r\n          className='delete'\r\n          onClick={() => handleState({ delete_id: data.id })}\r\n        >\r\n          <DeleteIcon />\r\n        </span>\r\n      )}\r\n      {handlePermision(role, 'detail_engineering_update') && (\r\n        <a href={`detailEng-${data.id}`}>\r\n          <span className='edit'>\r\n            <EditIcon />\r\n          </span>\r\n        </a>\r\n      )}\r\n      {selectNumber === _key && (\r\n        <div className={`box-more ${handlePositionBox(_key)}`}>\r\n          <div className='title w-100 pl-0'>\r\n            <h4\r\n              className={`w-100 ${\r\n                checkLength\r\n                  ? ''\r\n                  : 'd-flex justify-content-end align-items-center'\r\n              }`}\r\n            >\r\n              {handleTitle()}\r\n            </h4>\r\n          </div>\r\n          <div className='main-item'>\r\n            {list.map((data, index) => (\r\n              <div\r\n                key={index}\r\n                className={`item ${\r\n                  secondSelectNumber === index ? 'active' : ''\r\n                }`}\r\n                onClick={() => GetSecondData(data, index, _key)}\r\n              >\r\n                {loading === `secondmore-${index}` ? (\r\n                  <Loading className='loading-boxmore min-size' />\r\n                ) : (\r\n                  <ChevronLeftRoundedIcon />\r\n                )}\r\n                <span>Rev : {data.revision}</span>\r\n                {secondSelectNumber === index &&\r\n                  handlePermision(\r\n                    role,\r\n                    'detail_engineering_revisions_details'\r\n                  ) && (\r\n                    <SecondBoxData\r\n                      {...props}\r\n                      permision={handlePermision(\r\n                        role,\r\n                        'detail_engineering_download'\r\n                      )}\r\n                    />\r\n                  )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </td>\r\n  )\r\n}\r\nexport default ActionDetailedEngineering\r\n","E:\\bidboland\\src\\TechnicalArchive\\Action3DModel.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionP&ID.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionBuildersEngineering.js",["3234"],"import React, { useEffect, useRef } from 'react'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport MoreVertRoundedIcon from '@material-ui/icons/MoreVertRounded'\r\nimport BoxVpis from './BoxVpis'\r\nconst ActionBuildersEngineering = props => {\r\n  const handlePermision = props.Permision.handlePermision\r\n  let { role, selectNumber } = props.state\r\n  const { _key, data } = props\r\n  const actionElm = useRef()\r\n  useEffect(() => {\r\n    if (actionElm) {\r\n      let elm = actionElm.current\r\n      let name = `_action_${_key}`\r\n      props.handleRefs(name, elm)\r\n    }\r\n  }, [])\r\n  return (\r\n    <td className='action justify-content-center' ref={actionElm}>\r\n      {handlePermision(role, 'builders_engineering_edit') && (\r\n        <a href={`/edit-builders-engineering-${data.id}`}>\r\n          <span className='edit'>\r\n            <EditIcon />\r\n          </span>\r\n        </a>\r\n      )}\r\n      <span className='more' onClick={() => props.GetMore(_key, data)}>\r\n        <MoreVertRoundedIcon />\r\n      </span>\r\n      {selectNumber === _key && <BoxVpis {...props} _key={_key} />}\r\n    </td>\r\n  )\r\n}\r\nexport default ActionBuildersEngineering\r\n","E:\\bidboland\\src\\TechnicalArchive\\ActionBasicEng.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionLineList.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Create\\files.js",[],"E:\\bidboland\\src\\TechnicalArchive\\ActionISO.js",[],"E:\\bidboland\\src\\ARP\\ListSign.js",[],"E:\\bidboland\\src\\ARP\\HeadTopFirst.js",["3235"],"import React, { Component } from 'react'\r\nimport DateRangeRoundedIcon from '@material-ui/icons/DateRangeRounded'\r\nimport moment from 'moment-jalaali'\r\nimport DatePicker from 'react-datepicker2'\r\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder'\r\nimport Clock from '../clock/clock'\r\n// import handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nimport handleCheckText from '../handleCheckText'\r\n// import { ConvertNumber } from '../ConvertNumber'\r\nexport default class HeadTopFirst extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.event_hourOpen = null\r\n    this.state = {}\r\n  }\r\n  componentDidMount() {\r\n    this.setState(this.props.state)\r\n    document.addEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps !== this.props) {\r\n      this.setState(this.props.state)\r\n    }\r\n  }\r\n  CheckData = async () => {\r\n    const { insertData } = await this.props\r\n    const { _event_date, _event_hour } = await this.state\r\n    const check = _event_date === undefined && _event_hour === undefined\r\n    if (insertData && check) {\r\n      let now = await moment().format('jYYYY/jMM/jDD')\r\n      let nowTime = await new Date()\r\n      let hour = nowTime.getHours()\r\n      let minute = nowTime.getMinutes()\r\n      let Time = `${hour}:${minute}`\r\n      let FinalTime = await `${now} ${Time}`\r\n      await this.props.handleState({\r\n        _event_date: now,\r\n        _event_hour: Time\r\n      })\r\n      await this.setState({ _created_at: FinalTime })\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousedown', this.handleClickOutside)\r\n  }\r\n  handleClickOutside = event => {\r\n    const check =\r\n      this.refs.event_hourOpen &&\r\n      !this.refs.event_hourOpen.contains(event.target) &&\r\n      this.event_hourOpen\r\n    if (check) {\r\n      this.event_hourOpen(false)\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props !== nextProps) {\r\n      this.props = nextProps\r\n      this.setState(this.props.state)\r\n      const { _event_date, _event_hour } = this.state\r\n      const check = _event_date === undefined && _event_hour === undefined\r\n      if (check) {\r\n        this.CheckData()\r\n      }\r\n    }\r\n  }\r\n  handleDate = date => {\r\n    if (date) {\r\n      if (this.props.insertData) {\r\n        return date\r\n      } else {\r\n        const currentDate = moment(date).format('jYYYY/jMM/jDD HH:MM')\r\n        return currentDate\r\n      }\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n  handleValue = () => {\r\n    let data = ''\r\n    const { insertData } = this.props\r\n    if (insertData) {\r\n      data = this.handleDate(this.state._created_at)\r\n    } else {\r\n      const { created_at_date, created_at_hour } = this.props.state\r\n      let result = `${created_at_hour ? created_at_hour : ''} - ${created_at_date ? created_at_date : ''}`\r\n      data = result\r\n    }\r\n    return data\r\n  }\r\n  handleValueDate = date => {\r\n    let result = this.state[date]\r\n    const check = result ? true : false\r\n    let resultDate = null\r\n    if (check) {\r\n      if (typeof result === 'object') {\r\n        resultDate = moment(result).format('jYYYY/jMM/jDD')\r\n      } else resultDate = result\r\n    }\r\n    return check ? resultDate : ''\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='w-100 row mx-0'>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state.arp_no ? 'active' : ''\r\n              }`}\r\n          >\r\n            <label>شماره APR</label>\r\n            <input\r\n              type='text'\r\n              name='arp_no'\r\n              value={handleString(this.state.arp_no)}\r\n              disabled={true}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state[\r\n              this.props.insertData ? '_created_at' : 'created_at_date'\r\n            ]\r\n              ? 'active'\r\n              : ''\r\n              }`}\r\n          >\r\n            <div className='icon-field'>\r\n              <DateRangeRoundedIcon />\r\n            </div>\r\n            <div className='col p-0'>\r\n              <label>تاریخ تکمیل فرم</label>\r\n              <input\r\n                className='IranSans_Medium_FA'\r\n                value={handleString(this.handleValue())}\r\n                disabled={true}\r\n                readOnly={true}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state.foucs === 'subject' || handleCheckText(this.state.subject) ? 'active' : ''\r\n              }`}\r\n          >\r\n            <label>موضوع\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              type='text'\r\n              name='subject'\r\n              onChange={this.props.handleChange}\r\n              value={handleString(this.state.subject)}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              disabled={this.props.disabled ? true : false}\r\n              readOnly={this.props.disabled ? true : false}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state.foucs === 'area' || handleCheckText(this.state.area) ? 'active' : ''\r\n              }`}\r\n          >\r\n            <label>\r\n              ناحیه\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <select\r\n              name='area'\r\n              value={handleString(this.state.area)}\r\n              onChange={this.props.handleChange}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              readOnly={this.props.disabled}\r\n              disabled={this.props.disabled}\r\n            >\r\n              <option className='d-none'></option>\r\n              <option value={'Amine'}>Amine</option>\r\n              <option value={'NF'}>NF</option>\r\n              <option value={'UT'}>UT</option>\r\n              <option value={'CP'}>CP</option>\r\n              <option value={'Package C'}>Package C</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state.foucs === 'unit' || handleCheckText(this.state.unit) ? 'active' : ''\r\n              }`}\r\n          >\r\n            <label>\r\n              واحد\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              name='unit'\r\n              value={handleString(this.state.unit)}\r\n              onChange={this.props.handleChange}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              readOnly={this.props.disabled}\r\n              disabled={this.props.disabled}\r\n            />\r\n          </div>\r\n        </div>\r\n        {!this.props.dontShow && (\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian ${this.state.foucs === 'event_type' || handleCheckText(this.state.event_type)\r\n                ? 'active'\r\n                : ''\r\n                }`}\r\n            >\r\n              <label>\r\n                نوع حادثه\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <select\r\n                name='event_type'\r\n                value={handleString(this.state.event_type)}\r\n                onChange={this.props.handleChange}\r\n                onFocus={e => this.props.OnFocus(e.target.name)}\r\n                onBlur={this.props.OnBlur}\r\n                readOnly={this.props.disabled}\r\n                disabled={this.props.disabled}\r\n              >\r\n                <option className='d-none'></option>\r\n                <option value={'انسانی'}>انسانی</option>\r\n                <option value={'خسارت به تجهیزات'}>خسارت به تجهیزات</option>\r\n                <option value={'Total S/D'}>Total S/D</option>\r\n                <option value={'زیست محیطی'}>زیست محیطی</option>\r\n                <option value={'نشتی مواد'}>نشتی مواد</option>\r\n                <option value={'آتش سوزی'}>آتش سوزی</option>\r\n                <option value={'other'}>سایر</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.event_type === 'other' && (\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian ${this.state.foucs === 'other_event_type' ||\r\n                handleCheckText(this.state.other_event_type)\r\n                ? 'active'\r\n                : ''\r\n                }`}\r\n            >\r\n              <label>\r\n                نوع حادثه\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <input\r\n                name='other_event_type'\r\n                value={handleString(this.state.other_event_type)}\r\n                onChange={this.props.handleChange}\r\n                onFocus={e => this.props.OnFocus(e.target.name)}\r\n                onBlur={this.props.OnBlur}\r\n                readOnly={this.props.disabled}\r\n                disabled={this.props.disabled}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form ltr ${this.state.foucs === 'tag_number' || handleCheckText(this.state.tag_number)\r\n              ? 'active'\r\n              : ''\r\n              }`}\r\n          >\r\n            <label>\r\n              Tag No.\r\n              <span className='star IranSans_Bold'>*</span>\r\n            </label>\r\n            <input\r\n              className='text-left ltr'\r\n              type='text'\r\n              name='tag_number'\r\n              value={handleString(this.state.tag_number)}\r\n              onChange={this.props.handleChange}\r\n              onFocus={e => this.props.OnFocus(e.target.name)}\r\n              onBlur={this.props.OnBlur}\r\n              readOnly={this.props.disabled}\r\n              disabled={this.props.disabled}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian ${this.state.event_date ? 'active' : ''\r\n              }`}\r\n          >\r\n            <div className='icon-field'>\r\n              <DateRangeRoundedIcon />\r\n            </div>\r\n            <div className='col p-0'>\r\n              <label className='IranSans_Medium_FA'>\r\n                تاریخ حادثه\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              {this.props.disabled ? (\r\n                <input\r\n                  className='IranSans_Medium_FA'\r\n                  value={handleString(this.handleValueDate('event_date'))}\r\n                  name='event_date'\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              ) : (\r\n                <DatePicker\r\n                  min={moment().subtract(3, 'days')}\r\n                  max={moment()}\r\n                  persianDigits={true}\r\n                  isGregorian={false}\r\n                  timePicker={false}\r\n                  onChange={event_date =>\r\n                    this.props.handleState({ event_date: event_date })\r\n                  }\r\n                  value={this.state.event_date}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form clock persian ${this.state.foucs === `event_hour` ||\r\n              handleCheckText(this.state.event_hour)\r\n              ? 'active'\r\n              : ''\r\n              }`}\r\n            ref='event_hourOpen'\r\n          >\r\n            <div className='icon-field'>\r\n              <QueryBuilderIcon />\r\n            </div>\r\n            <div className='col p-0 ltr'>\r\n              <label>\r\n                ساعت حادثه\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              {this.props.disabled ? (\r\n                <input\r\n                  value={handleString(this.state.event_hour)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                  name='event_hour'\r\n                />\r\n              ) : (\r\n                <Clock\r\n                  getTime={(name, time) => {\r\n                    // setTimeout(() => {\r\n                    this.props.handleState({ [name]: time })\r\n                    // }, 200)\r\n                  }}\r\n                  name='event_hour'\r\n                  value={handleString(this.state.event_hour)}\r\n                  getFocus={e => (this.event_hourOpen = e)}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {!this.props.dontShow && (\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian ${this.state.foucs === 'unit_conditions' ||\r\n                handleCheckText(this.state.unit_conditions)\r\n                ? 'active'\r\n                : ''\r\n                }`}\r\n            >\r\n              <label>\r\n                شرایط واحد در زمان حادثه\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n              <select\r\n                name='unit_conditions'\r\n                value={handleString(this.state.unit_conditions)}\r\n                onChange={this.props.handleChange}\r\n                onFocus={e => this.props.OnFocus(e.target.name)}\r\n                onBlur={this.props.OnBlur}\r\n                readOnly={this.props.disabled}\r\n                disabled={this.props.disabled}\r\n              >\r\n                <option className='d-none'></option>\r\n                <option value={'بهره برداری'}>بهره برداری</option>\r\n                <option value={'تعمیرات'}>تعمیرات</option>\r\n                <option value={'تعمیرات اساسی'}>تعمیرات اساسی</option>\r\n                <option value={'Shut Down'}>Shut Down</option>\r\n                <option value={'راه اندازی'}>راه اندازی</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","E:\\bidboland\\src\\ARP\\ReportItem.js",[],"E:\\bidboland\\src\\ARP\\HanldeToCC.js",[],"E:\\bidboland\\src\\ARP\\SignARP.js",[],"E:\\bidboland\\src\\ARP\\SimilarEvents.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Create\\text.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Create\\ToCC.js",[],"E:\\bidboland\\src\\TSR\\SignTSR.js",[],"E:\\bidboland\\src\\TSR\\AttachedDocument.js",["3236"],"import React, { useState, useEffect } from 'react'\r\nimport Loading from '../layout/loading'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded'\r\nimport SelectBoxSearchForm from '../Customization/SelectBoxSearchForm'\r\nimport handleCheckText from '../handleCheckText'\r\nimport handleString from '../handleString'\r\nconst AttachedDocument = props => {\r\n  // const handleCheckText = HandleCheckText.handleCheckText\r\n  const [list, setList] = useState([])\r\n  useEffect(() => {\r\n    if (props.state[props.nameParent]) {\r\n      const _array = props.state[props.nameParent]\r\n      if (_array.length) {\r\n        setList(props.state[props.nameParent])\r\n      }\r\n    }\r\n  }, [props])\r\n  async function SearchSelect (parent, name, value, key) {\r\n    let list = await props.state[parent]\r\n    let obj = await list[key]\r\n    obj[name] = await value\r\n    obj['select'] = await false\r\n    await props.handleState([parent], list)\r\n    if (value.length > 6) {\r\n      await props.props.handleDocumentMdl(value)\r\n    }\r\n  }\r\n  async function CheckBlur (parent, name, index) {\r\n    setTimeout(async () => {\r\n      let list = await props.state[parent]\r\n      let obj = await list[index]\r\n      if (!handleCheckText(obj[name]) || !obj.select) {\r\n        obj[name] = await ''\r\n        obj['degreeTitle'] = ''\r\n        await props.handleState([parent], list)\r\n      }\r\n      await props.OnBlur()\r\n    }, 250)\r\n  }\r\n  function _handleLink (data) {\r\n    return '#'\r\n  }\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='title-password col-12 mt-3 mb-2'>\r\n        <h2 className='IranSans_Bold'>\r\n          {props.out ? 'مدارک ضمیمه خارج از سامانه' : 'مدارک ضمیمه درون سامانه'}\r\n        </h2>\r\n        <div className='line'></div>\r\n      </div>\r\n      {list.map((data, index) => (\r\n        <div className='w-100 row mr-0 ml-0' key={index}>\r\n          <div className='title-password list-counter col-12 mt-3 mb-2'>\r\n            <h2 className='IranSans_Bold'>{index + 1}</h2>\r\n            <div className='line'></div>\r\n          </div>\r\n          {props.out ? (\r\n            <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n              <div className={`field-form persian`}>\r\n                <label>\r\n                  {props.out ? 'مدارک پیوست خارج از سامانه' : ''}\r\n                  {props.require && (\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  )}\r\n                </label>\r\n                <div\r\n                  className={`allName col row m-0 justify-content-end ${\r\n                    props.canCreate ? '' : 'pl-1'\r\n                  }`}\r\n                >\r\n                  {data.AttachementName.map((name, key) => (\r\n                    <span key={key}>\r\n                      {props.out && props.canCreate && (\r\n                        <CloseRoundedIcon\r\n                          onClick={() =>\r\n                            props.deleteFileList(\r\n                              index,\r\n                              key,\r\n                              'Attachement',\r\n                              'AttachementName',\r\n                              props.nameParent\r\n                            )\r\n                          }\r\n                        />\r\n                      )}\r\n                      <a\r\n                        href={\r\n                          data.Attachement[key] ? data.Attachement[key] : '#'\r\n                        }\r\n                        target='_blank'\r\n                        rel='noreferrer'\r\n                      >\r\n                        {name}\r\n                      </a>\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                {props.out && props.canCreate && (\r\n                  <React.Fragment>\r\n                    <input\r\n                      className='d-none'\r\n                      type='file'\r\n                      id={`upload-Picture_${index}`}\r\n                      multiple\r\n                      onChange={e =>\r\n                        props.handleUploadList(\r\n                          e,\r\n                          `Attachement_${index}`,\r\n                          `AttachementName_${index}`,\r\n                          props.nameParent\r\n                        )\r\n                      }\r\n                    />\r\n                    <label\r\n                      className='upload-label'\r\n                      htmlFor={`upload-Picture_${index}`}\r\n                    >\r\n                      {props.state.loading === `Attachement_${index}` ? (\r\n                        <Loading className='form-loader w-auto' />\r\n                      ) : (\r\n                        <AttachFileIcon />\r\n                      )}\r\n                      آپلود فایل\r\n                    </label>\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          {props.out ? (\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form ${\r\n                  (props.out &&\r\n                    props.state.foucs === `documentNumber_${index}`) ||\r\n                  handleCheckText(data.documentNumber)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  Document Number\r\n                  {/* {data.Attachement.length && (\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    )} */}\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  className='text-left'\r\n                  name={`documentNumber_${index}`}\r\n                  value={handleString(data.documentNumber)}\r\n                  onFocus={e =>\r\n                    props.canCreate && props.OnFocus(e.target.name)\r\n                  }\r\n                  onBlur={() => props.canCreate && props.OnBlur()}\r\n                  onChange={e =>\r\n                    props.canCreate &&\r\n                    props.handleChangeList(\r\n                      props.nameParent,\r\n                      e.target.name.split('_')[0],\r\n                      e.target.value,\r\n                      index\r\n                    )\r\n                  }\r\n                  readOnly={!props.canCreate}\r\n                  disabled={!props.canCreate}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : props.canCreate ? (\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form overflow-initial ${\r\n                  props.state.foucs ===\r\n                    `${props.nameParent}__documentNumber__${index}` ||\r\n                  handleCheckText(data.documentNumber)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div className='col-12 p-0 ltr'>\r\n                  <label>\r\n                    Document Number\r\n                    {/* {props.require ? (\r\n                      <span className='star IranSans_Bold'>*</span>\r\n                    ) : (\r\n                      ''\r\n                    )} */}\r\n                  </label>\r\n                  <input\r\n                    className='text-left ltr'\r\n                    type='text'\r\n                    name={`${props.nameParent}__documentNumber__${index}`}\r\n                    value={handleString(data.documentNumber)}\r\n                    onFocus={e =>\r\n                      props.canCreate && props.OnFocus(e.target.name)\r\n                    }\r\n                    onBlur={e =>\r\n                      CheckBlur(\r\n                        props.nameParent,\r\n                        e.target.name.split('__')[1],\r\n                        index\r\n                      )\r\n                    }\r\n                    onChange={e =>\r\n                      props.canCreate &&\r\n                      SearchSelect(\r\n                        props.nameParent,\r\n                        e.target.name.split('__')[1],\r\n                        e.target.value,\r\n                        index\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n                {props.state.foucs ===\r\n                  `${props.nameParent}__documentNumber__${index}` &&\r\n                  data.documentNumber &&\r\n                  data.documentNumber.length > 2 && (\r\n                    <SelectBoxSearchForm\r\n                      {...props}\r\n                      index={index}\r\n                      name='documentNumber'\r\n                      multi={true}\r\n                    />\r\n                  )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form ${\r\n                  handleCheckText(data.documentNumberDocuments) ? 'active' : ''\r\n                }`}\r\n              >\r\n                <label>Document Number</label>\r\n                <span className='ltr _link-document-out d-flex align-items-center justify-content-end'>\r\n                  {handleString(data.documentNumberDocuments)}\r\n                </span>\r\n                {/* <a\r\n                  href={_handleLink(data)}\r\n                  className='ltr _link-document-out d-flex align-items-center justify-content-end'\r\n                > */}\r\n                {/* </a> */}\r\n              </div>\r\n            </div>\r\n          )}\r\n          {props.out ? (\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  props.state.foucs === `degreeTitle_${index}` ||\r\n                  handleCheckText(data.degreeTitle)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  عنوان مدرک\r\n                  {props.require && (\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  )}\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name={`degreeTitle_${index}`}\r\n                  value={handleString(data.degreeTitle)}\r\n                  onFocus={e =>\r\n                    props.canCreate && props.OnFocus(e.target.name)\r\n                  }\r\n                  onBlur={() => props.canCreate && props.OnBlur()}\r\n                  onChange={e =>\r\n                    props.canCreate &&\r\n                    props.handleChangeList(\r\n                      props.nameParent,\r\n                      e.target.name.split('_')[0],\r\n                      e.target.value,\r\n                      index\r\n                    )\r\n                  }\r\n                  readOnly={!props.canCreate}\r\n                  disabled={!props.canCreate}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n              <div\r\n                className={`field-form persian ${\r\n                  props.state.foucs === `degreeTitle_${index}` ||\r\n                  handleCheckText(data.degreeTitle)\r\n                    ? 'active'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <label>\r\n                  عنوان مدرک\r\n                  {/* {props.require ? (\r\n                    <span className='star IranSans_Bold'>*</span>\r\n                  ) : (\r\n                    ''\r\n                  )} */}\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  name={`degreeTitle_${index}`}\r\n                  value={handleString(data.degreeTitle)}\r\n                  // onFocus={(e) => props.canCreate && props.OnFocus(e.target.name)}\r\n                  // onBlur={() => props.canCreate && props.OnBlur()}\r\n                  // onChange={(e) => props.canCreate && props.handleChangeList(props.nameParent, e.target.name.split('_')[0], e.target.value, index)}\r\n                  readOnly={true}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian ${\r\n                props.state.foucs === `numberPages_${index}` ||\r\n                handleCheckText(data.numberPages)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <label>\r\n                تعداد صفحات\r\n                {/* {props.out &&\r\n                data.Attachement &&\r\n                data.Attachement.length &&\r\n                props.require ? (\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                ) : (\r\n                  ''\r\n                )} */}\r\n              </label>\r\n              <input\r\n                type='text'\r\n                name={`numberPages_${index}`}\r\n                value={handleString(data.numberPages)}\r\n                onFocus={e => props.canCreate && props.OnFocus(e.target.name)}\r\n                onBlur={() => props.canCreate && props.OnBlur()}\r\n                onChange={e =>\r\n                  props.canCreate &&\r\n                  props.handleChangeList(\r\n                    props.nameParent,\r\n                    e.target.name.split('_')[0],\r\n                    e.target.value,\r\n                    index\r\n                  )\r\n                }\r\n                readOnly={!props.canCreate && !data.documentNumber}\r\n                disabled={!props.canCreate}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n            <div\r\n              className={`field-form persian textarea ${\r\n                props.state.foucs === `descriptionAttachment_${index}` ||\r\n                handleCheckText(data.descriptionAttachment)\r\n                  ? 'active'\r\n                  : ''\r\n              }`}\r\n            >\r\n              <div className='col p-0'>\r\n                <label className='textarea'>توضیحات</label>\r\n                <textarea\r\n                  className='w-100'\r\n                  type='text'\r\n                  name={`descriptionAttachment_${index}`}\r\n                  onFocus={e =>\r\n                    props.canCreate && props.OnFocus(e.target.name)\r\n                  }\r\n                  onBlur={() => props.canCreate && props.OnBlur()}\r\n                  onChange={e =>\r\n                    props.canCreate &&\r\n                    props.handleChangeList(\r\n                      props.nameParent,\r\n                      e.target.name.split('_')[0],\r\n                      e.target.value,\r\n                      index\r\n                    )\r\n                  }\r\n                  value={handleString(data.descriptionAttachment)}\r\n                  readOnly={!props.canCreate}\r\n                  disabled={!props.canCreate}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {list.length > 1 && props.canCreate && (\r\n            <div className='button-add col-12 row mr-0 ml-0'>\r\n              <button\r\n                className='remove'\r\n                onClick={() => props.handleDelete(props.nameParent, index)}\r\n              >\r\n                <DeleteRoundedIcon />\r\n                حذف\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {props.canCreate && (\r\n        <div className='button-add col-12'>\r\n          <button onClick={() => props.handleAddAttach(props.nameParent)}>\r\n            <AddIcon />\r\n            افزودن مورد جدید\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default AttachedDocument\r\n","E:\\bidboland\\src\\TSR\\TOCC.js",[],"E:\\bidboland\\src\\TSR\\Dispatch.js",["3237"],"import React, { useEffect, useState } from 'react'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport axios from 'axios'\r\nimport Notification from '../notification/notification'\r\nimport Message from '../notification/Message'\r\nimport StaticData from '../staticData'\r\nconst Dispatch = props => {\r\n  const [user_list, setUser_list] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [disabled, setDisabled] = useState(false)\r\n  const [userSelect, setUserSelect] = useState('')\r\n  useEffect(() => {\r\n    let array = props.props.state.user_list\r\n    if (array) {\r\n      setUser_list(array)\r\n    }\r\n  })\r\n  async function handleSubmit () {\r\n    if (props.isMulti) {\r\n      MultiSelectSendback(userSelect)\r\n    } else {\r\n      SendBack(userSelect)\r\n    }\r\n  }\r\n  async function MultiSelectSendback (array) {\r\n    if (array) {\r\n      if (array.length <= props.length) {\r\n        await setLoading(true)\r\n        await array.forEach(async data => {\r\n          setTimeout(() => {\r\n            SendBack(data)\r\n          }, 100)\r\n        })\r\n        setTimeout(async () => {\r\n          await setLoading(false)\r\n        }, 100)\r\n      } else {\r\n        Notification.notify(Message.text(99), 'error')\r\n      }\r\n    }\r\n  }\r\n  async function SendBack (_data) {\r\n    if (_data && _data.value) {\r\n      const url = await `${StaticData.domainIp}/tsr/dispatch`\r\n      const id = await props.props.state.id\r\n      const token = await props.state.token\r\n      await setLoading(true)\r\n      await setDisabled(true)\r\n      const datareg = await new FormData()\r\n      await datareg.append('tsr_id', id)\r\n      await datareg.append('user_id', _data.value)\r\n      await axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: datareg,\r\n        headers: {\r\n          Authorization: token ? `Bearer ${token}` : null\r\n        }\r\n      })\r\n        .then(async response => {\r\n          await setLoading(false)\r\n          await setDisabled(false)\r\n          if (response.status === 200) {\r\n            Notification.notify(Message.text(929), 'success')\r\n            setTimeout(() => {\r\n              window.location.reload(true)\r\n            }, 5000)\r\n          } else {\r\n            Notification.notify(Message.text(response.status), 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          setLoading(false)\r\n          setDisabled(false)\r\n          if (err.response) {\r\n            Notification.notify(Message.text(err.response.status), 'error')\r\n          }\r\n        })\r\n    } else {\r\n      Notification.notify(Message.text(99), 'error')\r\n    }\r\n  }\r\n  function handleChange (newValue) {\r\n    if (props.isMulti) {\r\n      let filter = newValue ? newValue.filter(data => !data.__isNew__) : []\r\n      if (props.length >= filter.length) {\r\n        setUserSelect(filter)\r\n      }\r\n    } else {\r\n      const checkNew = newValue.__isNew__ ? true : false\r\n      setUserSelect(checkNew ? '' : newValue)\r\n    }\r\n  }\r\n  // function handleCheckPermission () {\r\n  //   const check = props.Permision.handlePermision(\r\n  //     props.state.role,\r\n  //     'tsr_dispatch'\r\n  //   )\r\n  //   return check\r\n  // }\r\n  // if (handleCheckPermission()) {\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='title-password col-12 mt-3 mb-2 px-1'>\r\n        <h2 className='IranSans_Bold'>دستگردانی</h2>\r\n        <div className='line'></div>\r\n      </div>\r\n      <div className='row mx-0'>\r\n        <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n          <div className='field-form selectBox'>\r\n            <CreatableSelect\r\n              isMulti={props.isMulti ? true : false}\r\n              value={userSelect}\r\n              onChange={newValue => handleChange(newValue)}\r\n              options={user_list}\r\n              readOnly={props.state.canCreate}\r\n              placeholder={\r\n                <label className='rtl'>\r\n                  تخصیص افراد\r\n                  {props.isMulti ? ` (${props.length} نفر) ` : ''}\r\n                  <span className='star IranSans_Bold'>*</span>\r\n                </label>\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='submit-form col-12 mb-2'>\r\n          <button\r\n            className='continue'\r\n            disabled={disabled}\r\n            onClick={handleSubmit}\r\n          >\r\n            {loading ? <Loading className='form-loader' /> : <DoneIcon />}\r\n            دستگردانی\r\n          </button>\r\n        </div>\r\n\r\n        {/* <div className='col-xl-12 col-lg-12 col-md-12 col-12'>\r\n          <div\r\n            className={`field-form persian textarea ${\r\n              props.state.foucs === `furtherInformation` ||\r\n              props.state.furtherInformation\r\n                ? 'active'\r\n                : ''\r\n            }`}\r\n          >\r\n            <div className='col p-0'>\r\n              <label className='textarea'>اطلاعات تکمیلی (اختیاری)</label>\r\n              <textarea\r\n                className='w-100'\r\n                type='text'\r\n                name={`furtherInformation`}\r\n                onFocus={e => props.OnFocus(e.target.name)}\r\n                onBlur={props.OnBlur}\r\n                onChange={props.handleChange}\r\n                value={\r\n                  props.state.furtherInformation\r\n                    ? props.state.furtherInformation\r\n                    : ''\r\n                }\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  )\r\n  // } else return ''\r\n}\r\nexport default Dispatch\r\n","E:\\bidboland\\src\\TSR\\listItems.js",[],"E:\\bidboland\\src\\TSR\\RequestBuy.js",[],"E:\\bidboland\\src\\TSR\\SubmitWorkOrder.js",[],"E:\\bidboland\\src\\TSR\\HandleTypeWork.js",[],"E:\\bidboland\\src\\TSR\\ConfirmReject.js",[],"E:\\bidboland\\src\\TSR\\DeterminantStatus.js",[],"E:\\bidboland\\src\\TSR\\AttachedDocumentWorkOrder.js",[],"E:\\bidboland\\src\\TSR\\EngineeringItems.js",[],"E:\\bidboland\\src\\TSR\\DistributionDocuments.js",[],"E:\\bidboland\\src\\TSR\\DifficultiesItems.js",[],"E:\\bidboland\\src\\TSR\\DocumentList.js",[],"E:\\bidboland\\src\\ARP\\Report.js",[],"E:\\bidboland\\src\\ARP\\ActionArp.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\files.js",[],"E:\\bidboland\\src\\ARP\\FetchApi.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\ToCC.js",[],"E:\\bidboland\\src\\tsrNew\\note\\Show\\text.js",[],"E:\\bidboland\\src\\Customization\\SecondBoxData.js",[],"E:\\bidboland\\src\\TechnicalArchive\\BoxVpis.js",[],"E:\\bidboland\\src\\ARP\\ExpertSelection.js",[],"E:\\bidboland\\src\\ARP\\Fns.js",[],"E:\\bidboland\\src\\ARP\\SelectUnitManager.js",["3238"],"import React from 'react'\r\nimport CreatableSelect from 'react-select/creatable'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Loading from '../layout/loading'\r\nimport handleString from '../handleString'\r\nimport handleCheckText from '../handleCheckText'\r\nconst SelectUnitManager = props => {\r\n  const { tabSelected, user_list, loading, disabled , allocation_secretary_committee_allow } = props.state\r\n  const _disbaled = props.state[`${tabSelected}_dis1`]\r\n    ? props.state[`${tabSelected}_dis1`]\r\n    : allocation_secretary_committee_allow\r\n  const _check = props.state[`${tabSelected}_boss_allow`]\r\n  function handleDisable () {\r\n    let state1 = allocation_secretary_committee_allow\r\n    const result =\r\n      disabled || _disbaled || !_check || props.handleTimeOut() || state1\r\n    return result\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className='title-password col-12 mt-3 mb-2'>\r\n        <h2 className='IranSans_Bold'>تخصیص سرپرست واحد رسیدگی به حادثه</h2>\r\n        <div className='line'></div>\r\n      </div>\r\n      <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n        <div\r\n          className={`field-form persian ${\r\n            props.handlecheckValue(`${tabSelected}_discipline`) ? 'active' : ''\r\n          }`}\r\n        >\r\n          <label>\r\n            Discipline\r\n            <span className='star IranSans_Bold'>*</span>\r\n          </label>\r\n          <select\r\n            name={`${tabSelected}_discipline`}\r\n            onBlur={() =>\r\n              props.handleState({\r\n                foucs: ''\r\n              })\r\n            }\r\n            onFocus={e => props.handleState({ foucs: e.target.name })}\r\n            onChange={e =>\r\n              props.handleState({\r\n                [e.target.name]: handleString(e.target.value)\r\n              })\r\n            }\r\n            value={handleString(props.state[`${tabSelected}_discipline`])}\r\n            disabled={handleDisable()}\r\n            readOnly={handleDisable()}\r\n          >\r\n            <option className='d-none'></option>\r\n            {props.handleSwitch().array.map((data, key) => (\r\n              <option key={key} value={data.value}>\r\n                {data.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className='col-xl-6 col-lg-6 col-md-12 col-12'>\r\n        <div className='field-form selectBox'>\r\n          <CreatableSelect\r\n            onChange={newValue =>\r\n              props.handleState({\r\n                [`${tabSelected}_unit_supervisor`]: newValue\r\n              })\r\n            }\r\n            value={props.state[`${tabSelected}_unit_supervisor`]}\r\n            options={user_list}\r\n            isDisabled={handleDisable()}\r\n            placeholder={\r\n              <label className='rtl'>\r\n                سرپرست واحد\r\n                <span className='star IranSans_Bold'>*</span>\r\n              </label>\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n      {!_disbaled ? (\r\n        <div className='submit-form col-12'>\r\n          <button\r\n            onClick={() =>\r\n              props.MainFn && !handleDisable()\r\n                ? props.MainFn.handleSubmit1()\r\n                : ''\r\n            }\r\n            disabled={handleDisable()}\r\n          >\r\n            {loading === `office-${tabSelected}` ? (\r\n              <Loading className='form-loader' />\r\n            ) : (\r\n              <DoneIcon />\r\n            )}\r\n            ثبت اطلاعات\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SelectUnitManager\r\n","E:\\bidboland\\src\\ARP\\AttachFile.js",[],"E:\\bidboland\\src\\ARP\\SecretaryCommittee.js",[],"E:\\bidboland\\src\\ARP\\Location.js",[],"E:\\bidboland\\src\\ARP\\Participants.js",[],"E:\\bidboland\\src\\ARP\\PopUpReject.js",[],"E:\\bidboland\\src\\ARP\\SecondReject.js",[],"E:\\bidboland\\src\\ARP\\FirstReject.js",[],"E:\\bidboland\\src\\Customization\\SelectBoxSearchFormWorkOrder.js",[],"E:\\bidboland\\src\\TSR\\PopUpReject.js",[],"E:\\bidboland\\src\\Customization\\SelectBoxSearchForm.js",[],{"ruleId":"3239","replacedBy":"3240"},{"ruleId":"3241","replacedBy":"3242"},{"ruleId":"3243","severity":1,"message":"3244","line":207,"column":7,"nodeType":"3245","endLine":207,"endColumn":34},{"ruleId":"3243","severity":1,"message":"3244","line":247,"column":7,"nodeType":"3245","endLine":247,"endColumn":34},{"ruleId":"3246","severity":1,"message":"3247","line":155,"column":25,"nodeType":"3248","endLine":155,"endColumn":37},{"ruleId":"3249","severity":1,"message":"3250","line":6,"column":8,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":21},{"ruleId":"3249","severity":1,"message":"3253","line":7,"column":8,"nodeType":"3251","messageId":"3252","endLine":7,"endColumn":27},{"ruleId":"3249","severity":1,"message":"3254","line":15,"column":8,"nodeType":"3251","messageId":"3252","endLine":15,"endColumn":25},{"ruleId":"3255","severity":1,"message":"3256","line":107,"column":45,"nodeType":"3257","messageId":"3258","endLine":107,"endColumn":47},{"ruleId":"3249","severity":1,"message":"3259","line":205,"column":44,"nodeType":"3251","messageId":"3252","endLine":205,"endColumn":50},{"ruleId":"3260","severity":1,"message":"3261","line":141,"column":5,"nodeType":"3262","messageId":"3263","endLine":193,"endColumn":6},{"ruleId":"3249","severity":1,"message":"3264","line":351,"column":9,"nodeType":"3251","messageId":"3252","endLine":351,"endColumn":15},{"ruleId":"3255","severity":1,"message":"3256","line":382,"column":25,"nodeType":"3257","messageId":"3258","endLine":382,"endColumn":27},{"ruleId":"3249","severity":1,"message":"3265","line":16,"column":10,"nodeType":"3251","messageId":"3252","endLine":16,"endColumn":22},{"ruleId":"3255","severity":1,"message":"3266","line":87,"column":45,"nodeType":"3257","messageId":"3258","endLine":87,"endColumn":47},{"ruleId":"3249","severity":1,"message":"3267","line":4,"column":20,"nodeType":"3251","messageId":"3252","endLine":4,"endColumn":24},{"ruleId":"3249","severity":1,"message":"3267","line":4,"column":20,"nodeType":"3251","messageId":"3252","endLine":4,"endColumn":24},{"ruleId":"3260","severity":1,"message":"3261","line":291,"column":9,"nodeType":"3262","messageId":"3263","endLine":326,"endColumn":10},{"ruleId":"3255","severity":1,"message":"3266","line":62,"column":45,"nodeType":"3257","messageId":"3258","endLine":62,"endColumn":47},{"ruleId":"3268","severity":1,"message":"3269","line":130,"column":11,"nodeType":"3270","messageId":"3271","endLine":130,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":133,"column":11,"nodeType":"3270","messageId":"3271","endLine":133,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":136,"column":11,"nodeType":"3270","messageId":"3271","endLine":136,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":139,"column":11,"nodeType":"3270","messageId":"3271","endLine":139,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":142,"column":11,"nodeType":"3270","messageId":"3271","endLine":142,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":145,"column":11,"nodeType":"3270","messageId":"3271","endLine":145,"endColumn":16},{"ruleId":"3255","severity":1,"message":"3256","line":388,"column":25,"nodeType":"3257","messageId":"3258","endLine":388,"endColumn":27},{"ruleId":"3249","severity":1,"message":"3272","line":413,"column":11,"nodeType":"3251","messageId":"3252","endLine":413,"endColumn":12},{"ruleId":"3249","severity":1,"message":"3265","line":22,"column":10,"nodeType":"3251","messageId":"3252","endLine":22,"endColumn":22},{"ruleId":"3273","severity":1,"message":"3274","line":90,"column":21,"nodeType":"3245","messageId":"3275","endLine":90,"endColumn":74},{"ruleId":"3268","severity":1,"message":"3269","line":137,"column":11,"nodeType":"3270","messageId":"3271","endLine":137,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":140,"column":11,"nodeType":"3270","messageId":"3271","endLine":140,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":143,"column":11,"nodeType":"3270","messageId":"3271","endLine":143,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":146,"column":11,"nodeType":"3270","messageId":"3271","endLine":146,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":149,"column":11,"nodeType":"3270","messageId":"3271","endLine":149,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":152,"column":11,"nodeType":"3270","messageId":"3271","endLine":152,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":130,"column":11,"nodeType":"3270","messageId":"3271","endLine":130,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":133,"column":11,"nodeType":"3270","messageId":"3271","endLine":133,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":136,"column":11,"nodeType":"3270","messageId":"3271","endLine":136,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":139,"column":11,"nodeType":"3270","messageId":"3271","endLine":139,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":142,"column":11,"nodeType":"3270","messageId":"3271","endLine":142,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":145,"column":11,"nodeType":"3270","messageId":"3271","endLine":145,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":129,"column":11,"nodeType":"3270","messageId":"3271","endLine":129,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":132,"column":11,"nodeType":"3270","messageId":"3271","endLine":132,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":135,"column":11,"nodeType":"3270","messageId":"3271","endLine":135,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":138,"column":11,"nodeType":"3270","messageId":"3271","endLine":138,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":141,"column":11,"nodeType":"3270","messageId":"3271","endLine":141,"endColumn":16},{"ruleId":"3268","severity":1,"message":"3269","line":144,"column":11,"nodeType":"3270","messageId":"3271","endLine":144,"endColumn":16},{"ruleId":"3249","severity":1,"message":"3267","line":5,"column":20,"nodeType":"3251","messageId":"3252","endLine":5,"endColumn":24},{"ruleId":"3246","severity":1,"message":"3247","line":89,"column":31,"nodeType":"3248","endLine":89,"endColumn":43},{"ruleId":"3276","severity":1,"message":"3277","line":181,"column":22,"nodeType":"3248","endLine":181,"endColumn":73},{"ruleId":"3276","severity":1,"message":"3278","line":182,"column":22,"nodeType":"3248","endLine":182,"endColumn":54},{"ruleId":"3276","severity":1,"message":"3279","line":184,"column":11,"nodeType":"3248","endLine":191,"endColumn":13},{"ruleId":"3276","severity":1,"message":"3280","line":196,"column":11,"nodeType":"3248","endLine":200,"endColumn":13},{"ruleId":"3281","severity":1,"message":"3282","line":169,"column":11,"nodeType":"3257","messageId":"3283","endLine":169,"endColumn":52},{"ruleId":"3284","severity":1,"message":"3285","line":332,"column":11,"nodeType":"3248","endLine":337,"endColumn":12},{"ruleId":"3286","severity":1,"message":"3287","line":10,"column":6,"nodeType":"3288","endLine":10,"endColumn":13,"suggestions":"3289"},{"ruleId":"3249","severity":1,"message":"3290","line":18,"column":8,"nodeType":"3251","messageId":"3252","endLine":18,"endColumn":20},{"ruleId":"3246","severity":1,"message":"3247","line":175,"column":19,"nodeType":"3248","endLine":180,"endColumn":20},{"ruleId":"3246","severity":1,"message":"3247","line":186,"column":19,"nodeType":"3248","endLine":191,"endColumn":20},{"ruleId":"3291","severity":1,"message":"3292","line":1168,"column":9,"nodeType":"3293","messageId":"3294","endLine":1168,"endColumn":13},{"ruleId":"3249","severity":1,"message":"3295","line":11,"column":8,"nodeType":"3251","messageId":"3252","endLine":11,"endColumn":20},{"ruleId":"3249","severity":1,"message":"3296","line":18,"column":8,"nodeType":"3251","messageId":"3252","endLine":18,"endColumn":25},{"ruleId":"3249","severity":1,"message":"3297","line":19,"column":8,"nodeType":"3251","messageId":"3252","endLine":19,"endColumn":16},{"ruleId":"3249","severity":1,"message":"3295","line":11,"column":8,"nodeType":"3251","messageId":"3252","endLine":11,"endColumn":20},{"ruleId":"3249","severity":1,"message":"3298","line":10,"column":26,"nodeType":"3251","messageId":"3252","endLine":10,"endColumn":30},{"ruleId":"3249","severity":1,"message":"3299","line":6,"column":8,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":17},{"ruleId":"3286","severity":1,"message":"3300","line":17,"column":8,"nodeType":"3288","endLine":17,"endColumn":15,"suggestions":"3301"},{"ruleId":"3249","severity":1,"message":"3302","line":4,"column":8,"nodeType":"3251","messageId":"3252","endLine":4,"endColumn":31},{"ruleId":"3249","severity":1,"message":"3303","line":6,"column":8,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":13},{"ruleId":"3249","severity":1,"message":"3304","line":7,"column":8,"nodeType":"3251","messageId":"3252","endLine":7,"endColumn":18},{"ruleId":"3249","severity":1,"message":"3305","line":8,"column":8,"nodeType":"3251","messageId":"3252","endLine":8,"endColumn":20},{"ruleId":"3249","severity":1,"message":"3306","line":9,"column":8,"nodeType":"3251","messageId":"3252","endLine":9,"endColumn":15},{"ruleId":"3249","severity":1,"message":"3307","line":10,"column":8,"nodeType":"3251","messageId":"3252","endLine":10,"endColumn":23},{"ruleId":"3286","severity":1,"message":"3308","line":39,"column":6,"nodeType":"3288","endLine":39,"endColumn":8,"suggestions":"3309"},{"ruleId":"3286","severity":1,"message":"3310","line":29,"column":5,"nodeType":"3311","endLine":29,"endColumn":34},{"ruleId":"3286","severity":1,"message":"3312","line":29,"column":5,"nodeType":"3311","endLine":29,"endColumn":34,"suggestions":"3313"},{"ruleId":"3314","severity":1,"message":"3315","line":81,"column":7,"nodeType":"3316","messageId":"3317","endLine":83,"endColumn":14},{"ruleId":"3318","severity":1,"message":"3319","line":93,"column":7,"nodeType":"3316","messageId":"3294","endLine":95,"endColumn":14},{"ruleId":"3318","severity":1,"message":"3319","line":96,"column":7,"nodeType":"3316","messageId":"3294","endLine":98,"endColumn":14},{"ruleId":"3318","severity":1,"message":"3319","line":99,"column":7,"nodeType":"3316","messageId":"3294","endLine":101,"endColumn":14},{"ruleId":"3286","severity":1,"message":"3320","line":20,"column":48,"nodeType":"3288","endLine":20,"endColumn":56,"suggestions":"3321"},{"ruleId":"3249","severity":1,"message":"3322","line":50,"column":9,"nodeType":"3251","messageId":"3252","endLine":50,"endColumn":18},{"ruleId":"3286","severity":1,"message":"3323","line":17,"column":6,"nodeType":"3288","endLine":17,"endColumn":13,"suggestions":"3324"},{"ruleId":"3286","severity":1,"message":"3325","line":34,"column":6,"nodeType":"3288","endLine":34,"endColumn":19,"suggestions":"3326"},{"ruleId":"3286","severity":1,"message":"3323","line":17,"column":6,"nodeType":"3288","endLine":17,"endColumn":13,"suggestions":"3327"},{"ruleId":"3286","severity":1,"message":"3325","line":32,"column":6,"nodeType":"3288","endLine":32,"endColumn":19,"suggestions":"3328"},{"ruleId":"3286","severity":1,"message":"3323","line":17,"column":6,"nodeType":"3288","endLine":17,"endColumn":13,"suggestions":"3329"},{"ruleId":"3286","severity":1,"message":"3325","line":32,"column":6,"nodeType":"3288","endLine":32,"endColumn":19,"suggestions":"3330"},{"ruleId":"3286","severity":1,"message":"3331","line":35,"column":6,"nodeType":"3288","endLine":35,"endColumn":12,"suggestions":"3332"},{"ruleId":"3249","severity":1,"message":"3333","line":32,"column":9,"nodeType":"3251","messageId":"3252","endLine":32,"endColumn":18},{"ruleId":"3286","severity":1,"message":"3334","line":47,"column":6,"nodeType":"3288","endLine":47,"endColumn":12,"suggestions":"3335"},{"ruleId":"3286","severity":1,"message":"3336","line":6,"column":44,"nodeType":"3288","endLine":6,"endColumn":49,"suggestions":"3337"},{"ruleId":"3286","severity":1,"message":"3338","line":11,"column":6,"nodeType":"3288","endLine":11,"endColumn":8,"suggestions":"3339"},{"ruleId":"3286","severity":1,"message":"3340","line":20,"column":5,"nodeType":"3251","endLine":20,"endColumn":14,"suggestions":"3341"},{"ruleId":"3249","severity":1,"message":"3342","line":9,"column":7,"nodeType":"3251","messageId":"3252","endLine":9,"endColumn":17},{"ruleId":"3286","severity":1,"message":"3308","line":13,"column":6,"nodeType":"3288","endLine":13,"endColumn":8,"suggestions":"3343"},{"ruleId":"3284","severity":1,"message":"3285","line":233,"column":9,"nodeType":"3248","endLine":238,"endColumn":10},{"ruleId":"3284","severity":1,"message":"3285","line":374,"column":11,"nodeType":"3248","endLine":380,"endColumn":12},{"ruleId":"3286","severity":1,"message":"3320","line":20,"column":48,"nodeType":"3288","endLine":20,"endColumn":56,"suggestions":"3344"},{"ruleId":"3249","severity":1,"message":"3345","line":4,"column":8,"nodeType":"3251","messageId":"3252","endLine":4,"endColumn":24},{"ruleId":"3249","severity":1,"message":"3346","line":5,"column":8,"nodeType":"3251","messageId":"3252","endLine":5,"endColumn":15},{"ruleId":"3249","severity":1,"message":"3304","line":7,"column":8,"nodeType":"3251","messageId":"3252","endLine":7,"endColumn":18},{"ruleId":"3249","severity":1,"message":"3303","line":8,"column":8,"nodeType":"3251","messageId":"3252","endLine":8,"endColumn":13},{"ruleId":"3249","severity":1,"message":"3305","line":10,"column":8,"nodeType":"3251","messageId":"3252","endLine":10,"endColumn":20},{"ruleId":"3249","severity":1,"message":"3306","line":11,"column":8,"nodeType":"3251","messageId":"3252","endLine":11,"endColumn":15},{"ruleId":"3249","severity":1,"message":"3347","line":12,"column":8,"nodeType":"3251","messageId":"3252","endLine":12,"endColumn":16},{"ruleId":"3291","severity":1,"message":"3348","line":28,"column":41,"nodeType":"3293","messageId":"3294","endLine":28,"endColumn":53},{"ruleId":"3286","severity":1,"message":"3349","line":30,"column":6,"nodeType":"3288","endLine":30,"endColumn":13,"suggestions":"3350"},{"ruleId":"3351","severity":1,"message":"3352","line":2,"column":36,"nodeType":"3353","messageId":"3354","endLine":2,"endColumn":37,"suggestions":"3355"},{"ruleId":"3351","severity":1,"message":"3352","line":2,"column":61,"nodeType":"3353","messageId":"3354","endLine":2,"endColumn":62,"suggestions":"3356"},{"ruleId":"3351","severity":1,"message":"3352","line":2,"column":70,"nodeType":"3353","messageId":"3354","endLine":2,"endColumn":71,"suggestions":"3357"},{"ruleId":"3351","severity":1,"message":"3352","line":2,"column":74,"nodeType":"3353","messageId":"3354","endLine":2,"endColumn":75,"suggestions":"3358"},{"ruleId":"3249","severity":1,"message":"3359","line":9,"column":12,"nodeType":"3251","messageId":"3252","endLine":9,"endColumn":26},{"ruleId":"3360","severity":1,"message":"3361","line":11,"column":61,"nodeType":"3362","messageId":"3294","endLine":11,"endColumn":63},{"ruleId":"3286","severity":1,"message":"3349","line":30,"column":6,"nodeType":"3288","endLine":30,"endColumn":13,"suggestions":"3363"},{"ruleId":"3249","severity":1,"message":"3364","line":1,"column":8,"nodeType":"3251","messageId":"3252","endLine":1,"endColumn":13},{"ruleId":"3365","severity":1,"message":"3366","line":756,"column":75,"nodeType":"3362","messageId":"3367","endLine":756,"endColumn":76},{"ruleId":"3365","severity":1,"message":"3366","line":757,"column":55,"nodeType":"3362","messageId":"3367","endLine":757,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":785,"column":72,"nodeType":"3362","messageId":"3367","endLine":785,"endColumn":73},{"ruleId":"3365","severity":1,"message":"3366","line":786,"column":55,"nodeType":"3362","messageId":"3367","endLine":786,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":849,"column":73,"nodeType":"3362","messageId":"3367","endLine":849,"endColumn":74},{"ruleId":"3365","severity":1,"message":"3366","line":850,"column":55,"nodeType":"3362","messageId":"3367","endLine":850,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":879,"column":77,"nodeType":"3362","messageId":"3367","endLine":879,"endColumn":78},{"ruleId":"3365","severity":1,"message":"3366","line":880,"column":55,"nodeType":"3362","messageId":"3367","endLine":880,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":773,"column":75,"nodeType":"3362","messageId":"3367","endLine":773,"endColumn":76},{"ruleId":"3365","severity":1,"message":"3366","line":774,"column":55,"nodeType":"3362","messageId":"3367","endLine":774,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":806,"column":72,"nodeType":"3362","messageId":"3367","endLine":806,"endColumn":73},{"ruleId":"3365","severity":1,"message":"3366","line":807,"column":55,"nodeType":"3362","messageId":"3367","endLine":807,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":878,"column":73,"nodeType":"3362","messageId":"3367","endLine":878,"endColumn":74},{"ruleId":"3365","severity":1,"message":"3366","line":879,"column":55,"nodeType":"3362","messageId":"3367","endLine":879,"endColumn":58},{"ruleId":"3365","severity":1,"message":"3366","line":912,"column":77,"nodeType":"3362","messageId":"3367","endLine":912,"endColumn":78},{"ruleId":"3365","severity":1,"message":"3366","line":913,"column":55,"nodeType":"3362","messageId":"3367","endLine":913,"endColumn":58},{"ruleId":"3246","severity":1,"message":"3368","line":1009,"column":19,"nodeType":"3248","endLine":1018,"endColumn":20},{"ruleId":"3286","severity":1,"message":"3310","line":13,"column":6,"nodeType":"3251","endLine":13,"endColumn":11},{"ruleId":"3286","severity":1,"message":"3369","line":13,"column":6,"nodeType":"3251","endLine":13,"endColumn":11,"suggestions":"3370"},{"ruleId":"3246","severity":1,"message":"3368","line":32,"column":13,"nodeType":"3248","endLine":32,"endColumn":51},{"ruleId":"3249","severity":1,"message":"3267","line":2,"column":20,"nodeType":"3251","messageId":"3252","endLine":2,"endColumn":24},{"ruleId":"3291","severity":1,"message":"3371","line":71,"column":7,"nodeType":"3293","messageId":"3294","endLine":71,"endColumn":12},{"ruleId":"3249","severity":1,"message":"3372","line":1,"column":17,"nodeType":"3251","messageId":"3252","endLine":1,"endColumn":26},{"ruleId":"3373","severity":1,"message":"3374","line":107,"column":22,"nodeType":"3375","messageId":"3376","endLine":107,"endColumn":34,"fix":"3377"},{"ruleId":"3255","severity":1,"message":"3266","line":702,"column":22,"nodeType":"3257","messageId":"3258","endLine":702,"endColumn":24},{"ruleId":"3260","severity":1,"message":"3261","line":967,"column":9,"nodeType":"3262","messageId":"3263","endLine":986,"endColumn":10},{"ruleId":"3260","severity":1,"message":"3261","line":989,"column":9,"nodeType":"3262","messageId":"3263","endLine":1008,"endColumn":10},{"ruleId":"3260","severity":1,"message":"3261","line":1024,"column":9,"nodeType":"3262","messageId":"3263","endLine":1037,"endColumn":10},{"ruleId":"3260","severity":1,"message":"3261","line":1040,"column":9,"nodeType":"3262","messageId":"3263","endLine":1053,"endColumn":10},{"ruleId":"3260","severity":1,"message":"3261","line":1056,"column":9,"nodeType":"3262","messageId":"3263","endLine":1075,"endColumn":10},{"ruleId":"3260","severity":1,"message":"3261","line":1078,"column":9,"nodeType":"3262","messageId":"3263","endLine":1097,"endColumn":10},{"ruleId":"3286","severity":1,"message":"3378","line":11,"column":6,"nodeType":"3288","endLine":11,"endColumn":8,"suggestions":"3379"},{"ruleId":"3286","severity":1,"message":"3336","line":6,"column":44,"nodeType":"3288","endLine":6,"endColumn":49,"suggestions":"3380"},{"ruleId":"3249","severity":1,"message":"3381","line":6,"column":8,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":25},{"ruleId":"3249","severity":1,"message":"3297","line":7,"column":8,"nodeType":"3251","messageId":"3252","endLine":7,"endColumn":16},{"ruleId":"3249","severity":1,"message":"3265","line":6,"column":10,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":22},{"ruleId":"3249","severity":1,"message":"3265","line":8,"column":10,"nodeType":"3251","messageId":"3252","endLine":8,"endColumn":22},{"ruleId":"3286","severity":1,"message":"3382","line":16,"column":17,"nodeType":"3383","endLine":16,"endColumn":32},{"ruleId":"3291","severity":1,"message":"3384","line":29,"column":7,"nodeType":"3293","messageId":"3294","endLine":29,"endColumn":21},{"ruleId":"3291","severity":1,"message":"3385","line":30,"column":7,"nodeType":"3293","messageId":"3294","endLine":30,"endColumn":21},{"ruleId":"3291","severity":1,"message":"3386","line":31,"column":7,"nodeType":"3293","messageId":"3294","endLine":31,"endColumn":24},{"ruleId":"3291","severity":1,"message":"3387","line":45,"column":7,"nodeType":"3293","messageId":"3294","endLine":45,"endColumn":20},{"ruleId":"3291","severity":1,"message":"3388","line":125,"column":9,"nodeType":"3293","messageId":"3294","endLine":125,"endColumn":16},{"ruleId":"3360","severity":1,"message":"3361","line":576,"column":20,"nodeType":"3362","messageId":"3294","endLine":576,"endColumn":22},{"ruleId":"3291","severity":1,"message":"3388","line":45,"column":9,"nodeType":"3293","messageId":"3294","endLine":45,"endColumn":16},{"ruleId":"3249","severity":1,"message":"3307","line":13,"column":8,"nodeType":"3251","messageId":"3252","endLine":13,"endColumn":23},{"ruleId":"3249","severity":1,"message":"3389","line":14,"column":8,"nodeType":"3251","messageId":"3252","endLine":14,"endColumn":23},{"ruleId":"3249","severity":1,"message":"3389","line":10,"column":8,"nodeType":"3251","messageId":"3252","endLine":10,"endColumn":23},{"ruleId":"3243","severity":1,"message":"3244","line":163,"column":11,"nodeType":"3245","endLine":163,"endColumn":36},{"ruleId":"3243","severity":1,"message":"3244","line":164,"column":11,"nodeType":"3245","endLine":164,"endColumn":36},{"ruleId":"3249","severity":1,"message":"3390","line":172,"column":45,"nodeType":"3251","messageId":"3252","endLine":172,"endColumn":56},{"ruleId":"3286","severity":1,"message":"3391","line":57,"column":6,"nodeType":"3288","endLine":57,"endColumn":8,"suggestions":"3392"},{"ruleId":"3255","severity":1,"message":"3393","line":42,"column":74,"nodeType":"3257","messageId":"3394","endLine":42,"endColumn":76},{"ruleId":"3249","severity":1,"message":"3390","line":118,"column":45,"nodeType":"3251","messageId":"3252","endLine":118,"endColumn":56},{"ruleId":"3260","severity":1,"message":"3261","line":7,"column":5,"nodeType":"3262","messageId":"3263","endLine":136,"endColumn":6},{"ruleId":"3360","severity":1,"message":"3361","line":284,"column":47,"nodeType":"3362","messageId":"3294","endLine":284,"endColumn":49},{"ruleId":"3260","severity":1,"message":"3261","line":9,"column":5,"nodeType":"3262","messageId":"3263","endLine":214,"endColumn":6},{"ruleId":"3395","severity":1,"message":"3396","line":22,"column":9,"nodeType":"3397","messageId":"3294","endLine":26,"endColumn":6},{"ruleId":"3249","severity":1,"message":"3390","line":164,"column":45,"nodeType":"3251","messageId":"3252","endLine":164,"endColumn":56},{"ruleId":"3255","severity":1,"message":"3256","line":112,"column":41,"nodeType":"3257","messageId":"3258","endLine":112,"endColumn":43},{"ruleId":"3286","severity":1,"message":"3323","line":13,"column":3,"nodeType":"3251","endLine":13,"endColumn":12,"suggestions":"3398"},{"ruleId":"3281","severity":1,"message":"3282","line":764,"column":11,"nodeType":"3257","messageId":"3283","endLine":764,"endColumn":52},{"ruleId":"3249","severity":1,"message":"3267","line":4,"column":20,"nodeType":"3251","messageId":"3252","endLine":4,"endColumn":24},{"ruleId":"3249","severity":1,"message":"3399","line":20,"column":7,"nodeType":"3251","messageId":"3252","endLine":20,"endColumn":17},{"ruleId":"3255","severity":1,"message":"3266","line":135,"column":43,"nodeType":"3257","messageId":"3258","endLine":135,"endColumn":45},{"ruleId":"3249","severity":1,"message":"3400","line":29,"column":10,"nodeType":"3251","messageId":"3252","endLine":29,"endColumn":24},{"ruleId":"3249","severity":1,"message":"3295","line":11,"column":8,"nodeType":"3251","messageId":"3252","endLine":11,"endColumn":20},{"ruleId":"3286","severity":1,"message":"3401","line":23,"column":6,"nodeType":"3288","endLine":23,"endColumn":13,"suggestions":"3402"},{"ruleId":"3249","severity":1,"message":"3403","line":161,"column":37,"nodeType":"3251","messageId":"3252","endLine":161,"endColumn":39},{"ruleId":"3249","severity":1,"message":"3404","line":367,"column":9,"nodeType":"3251","messageId":"3252","endLine":367,"endColumn":14},{"ruleId":"3249","severity":1,"message":"3405","line":368,"column":7,"nodeType":"3251","messageId":"3252","endLine":368,"endColumn":16},{"ruleId":"3291","severity":1,"message":"3406","line":101,"column":7,"nodeType":"3293","messageId":"3294","endLine":101,"endColumn":17},{"ruleId":"3291","severity":1,"message":"3407","line":102,"column":7,"nodeType":"3293","messageId":"3294","endLine":102,"endColumn":15},{"ruleId":"3360","severity":1,"message":"3361","line":48,"column":15,"nodeType":"3362","messageId":"3294","endLine":48,"endColumn":17},{"ruleId":"3286","severity":1,"message":"3408","line":37,"column":6,"nodeType":"3288","endLine":37,"endColumn":8,"suggestions":"3409"},{"ruleId":"3286","severity":1,"message":"3408","line":16,"column":6,"nodeType":"3288","endLine":16,"endColumn":8,"suggestions":"3410"},{"ruleId":"3411","severity":1,"message":"3412","line":56,"column":3,"nodeType":"3413","messageId":"3294","endLine":66,"endColumn":4},{"ruleId":"3249","severity":1,"message":"3414","line":43,"column":12,"nodeType":"3251","messageId":"3252","endLine":43,"endColumn":23},{"ruleId":"3286","severity":1,"message":"3415","line":14,"column":3,"nodeType":"3251","endLine":14,"endColumn":12,"suggestions":"3416"},{"ruleId":"3249","severity":1,"message":"3307","line":6,"column":8,"nodeType":"3251","messageId":"3252","endLine":6,"endColumn":23},"no-native-reassign",["3417"],"no-negated-in-lhs",["3418"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'AddCircleIcon' is defined but never used.","Identifier","unusedVar","'SystemUpdateAltIcon' is defined but never used.","'UploadInformation' is defined but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'upload' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'result' is assigned a value but never used.","'handleFilter' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","'Link' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'a' is assigned a value but never used.","no-self-assign","'response.data.content.documents[data].replyAttachment' is assigned to itself.","selfAssignment","react/jsx-pascal-case","Imported JSX component Form_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Form_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Form_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Form_4 must be in PascalCase or SCREAMING_SNAKE_CASE","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.","ArrayExpression",["3419"],"'handleString' is defined but never used.","no-dupe-keys","Duplicate key 'hold'.","ObjectExpression","unexpected","'OutputFilter' is defined but never used.","'GetAppRoundedIcon' is defined but never used.","'EditIcon' is defined but never used.","'data' is assigned a value but never used.","'CloseIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'handleRefs', and 'reject_id'. Either include them or remove the dependency array.",["3420"],"'ThumbDownAltRoundedIcon' is defined but never used.","'axios' is defined but never used.","'StaticData' is defined but never used.","'Notification' is defined but never used.","'Message' is defined but never used.","'handleCheckText' is defined but never used.","React Hook useEffect has a missing dependency: 'handleRefs'. Either include it or remove the dependency array.",["3421"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","ConditionalExpression","React Hook useEffect has a missing dependency: 'state.list'. Either include it or remove the dependency array.",["3422"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-duplicate-case","Duplicate case label.","React Hook useEffect has a missing dependency: 'handleElms'. Either include it or remove the dependency array.",["3423"],"'checkShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["3424"],"React Hook useMemo has an unnecessary dependency: 'index'. Either exclude it or remove the dependency array.",["3425"],["3426"],["3427"],["3428"],["3429"],"React Hook useLayoutEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["3430"],"'valueAxis' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["3431"],"React Hook useEffect has missing dependencies: 'handleElms' and 'name'. Either include them or remove the dependency array.",["3432"],"React Hook useEffect has missing dependencies: 'TrueCheck' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["3433"],"React Hook useEffect has a missing dependency: 'ValuesCategory'. Either include it or remove the dependency array.",["3434"],"'name_state' is assigned a value but never used.",["3435"],["3436"],"'CloseRoundedIcon' is defined but never used.","'Loading' is defined but never used.","'DoneIcon' is defined but never used.","Duplicate key 'marginBottom'.","React Hook useEffect has missing dependencies: 'close' and 'reply'. Either include them or remove the dependency array.",["3437"],"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["3438","3439"],["3440","3441"],["3442","3443"],["3444","3445"],"'handleCheckBox' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["3446"],"'React' is defined but never used.","no-mixed-operators","Unexpected mix of '>' and '!=='.","unexpectedMixedOperator","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'props.list'. Either include it or remove the dependency array. If 'setArray' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["3447"],"Duplicate key 'popUp'.","'useEffect' is defined but never used.","no-useless-rename","Destructuring assignment label unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"3448","text":"3449"},"React Hook useEffect has a missing dependency: 'handleAll'. Either include it or remove the dependency array.",["3450"],["3451"],"'AssignmentIndIcon' is defined but never used.","Assignments to the 'revisions' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","Duplicate key 'process_result'.","Duplicate key 'general_result'.","Duplicate key 'inspection_result'.","Duplicate key 'review_result'.","Duplicate key 'require'.","'getCustomFormat' is defined but never used.","'degreeTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'FName', 'LName', 'ResetChange', 'name', 'nameCheckBox', 'parentProps', 'props', 'updateCheck', and 'user_list'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["3452"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern",["3453"],"'name_table' is assigned a value but never used.","'ContactSupport' is defined but never used.","React Hook useEffect has missing dependencies: 'revisions' and 'select'. Either include them or remove the dependency array.",["3454"],"'id' is assigned a value but never used.","'array' is assigned a value but never used.","'arrayName' is assigned a value but never used.","Duplicate key 'userDetail'.","Duplicate key 'listSign'.","React Hook useEffect has missing dependencies: '_key' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["3455"],["3456"],"no-dupe-class-members","Duplicate name 'componentWillReceiveProps'.","MethodDefinition","'_handleLink' is defined but never used.","React Hook useEffect contains a call to 'setUser_list'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.props.state.user_list] as a second argument to the useEffect Hook.",["3457"],"no-global-assign","no-unsafe-negation",{"desc":"3458","fix":"3459"},{"desc":"3460","fix":"3461"},{"desc":"3462","fix":"3463"},{"desc":"3464","fix":"3465"},{"desc":"3466","fix":"3467"},{"desc":"3468","fix":"3469"},{"desc":"3470","fix":"3471"},{"desc":"3468","fix":"3472"},{"desc":"3470","fix":"3473"},{"desc":"3468","fix":"3474"},{"desc":"3470","fix":"3475"},{"desc":"3476","fix":"3477"},{"desc":"3476","fix":"3478"},{"desc":"3479","fix":"3480"},{"desc":"3481","fix":"3482"},{"desc":"3483","fix":"3484"},{"desc":"3462","fix":"3485"},{"desc":"3466","fix":"3486"},{"desc":"3487","fix":"3488"},{"messageId":"3489","fix":"3490","desc":"3491"},{"messageId":"3492","fix":"3493","desc":"3494"},{"messageId":"3489","fix":"3495","desc":"3491"},{"messageId":"3492","fix":"3496","desc":"3494"},{"messageId":"3489","fix":"3497","desc":"3491"},{"messageId":"3492","fix":"3498","desc":"3494"},{"messageId":"3489","fix":"3499","desc":"3491"},{"messageId":"3492","fix":"3500","desc":"3494"},{"desc":"3487","fix":"3501"},{"desc":"3502","fix":"3503"},[3238,3250],"label",{"desc":"3504","fix":"3505"},{"desc":"3479","fix":"3506"},{"desc":"3507","fix":"3508"},{"desc":"3509","fix":"3510"},{"desc":"3511","fix":"3512"},{"desc":"3513","fix":"3514"},{"desc":"3513","fix":"3515"},{"desc":"3516","fix":"3517"},"Update the dependencies array to be: [handleClick, props]",{"range":"3518","text":"3519"},"Update the dependencies array to be: [fetchData, handleRefs, myElm, reject_id]",{"range":"3520","text":"3521"},"Update the dependencies array to be: [handleRefs]",{"range":"3522","text":"3523"},"Update the dependencies array to be: [state.list]",{"range":"3524","text":"3525"},"Update the dependencies array to be: [handleElms, tabElm]",{"range":"3526","text":"3527"},"Update the dependencies array to be: [fetchData, index]",{"range":"3528","text":"3529"},"Update the dependencies array to be: [list]",{"range":"3530","text":"3531"},{"range":"3532","text":"3529"},{"range":"3533","text":"3531"},{"range":"3534","text":"3529"},{"range":"3535","text":"3531"},"Update the dependencies array to be: [data, id]",{"range":"3536","text":"3537"},{"range":"3538","text":"3537"},"Update the dependencies array to be: [elm, handleElms, name]",{"range":"3539","text":"3540"},"Update the dependencies array to be: [TrueCheck, props]",{"range":"3541","text":"3542"},"Update the dependencies array to be: [ValuesCategory]",{"range":"3543","text":"3544"},{"range":"3545","text":"3523"},{"range":"3546","text":"3527"},"Update the dependencies array to be: [close, props, reply]",{"range":"3547","text":"3548"},"removeEscape",{"range":"3549","text":"3550"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"3551","text":"3552"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"3553","text":"3550"},{"range":"3554","text":"3552"},{"range":"3555","text":"3550"},{"range":"3556","text":"3552"},{"range":"3557","text":"3550"},{"range":"3558","text":"3552"},{"range":"3559","text":"3548"},"Update the dependencies array to be: [props.list]",{"range":"3560","text":"3561"},"Update the dependencies array to be: [handleAll]",{"range":"3562","text":"3563"},{"range":"3564","text":"3540"},"Update the dependencies array to be: [FName, LName, ResetChange, name, nameCheckBox, parentProps, props, updateCheck, user_list]",{"range":"3565","text":"3566"},"Update the dependencies array to be: [fetchData]",{"range":"3567","text":"3568"},"Update the dependencies array to be: [props, revisions, select]",{"range":"3569","text":"3570"},"Update the dependencies array to be: [_key, props]",{"range":"3571","text":"3572"},{"range":"3573","text":"3572"},"Add dependencies array: [props.props.state.user_list]",{"range":"3574","text":"3575"},[405,412],"[handleClick, props]",[668,675],"[fetchData, handleRefs, myElm, reject_id]",[1265,1267],"[handleRefs]",[1097,1126],"[state.list]",[1009,1017],"[handleElms, tabElm]",[585,592],"[fetchData, index]",[971,984],"[list]",[578,585],[923,936],[576,583],[902,915],[1084,1090],"[data, id]",[1536,1542],[257,262],"[elm, handleElms, name]",[429,431],"[TrueCheck, props]",[907,927],"[ValuesCategory]",[410,412],[1009,1017],[1066,1073],"[close, props, reply]",[66,67],"",[66,66],"\\",[91,92],[91,91],[100,101],[100,100],[104,105],[104,104],[1034,1041],[386,391],"[props.list]",[429,431],"[handleAll]",[257,262],[2606,2608],"[FName, LName, ResetChange, name, nameCheckBox, parentProps, props, updateCheck, user_list]",[610,612],"[fetchData]",[784,791],"[props, revisions, select]",[1034,1036],"[_key, props]",[573,575],[718,718],", [props.props.state.user_list]"]